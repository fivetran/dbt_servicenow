{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.9", "generated_at": "2024-08-14T21:38:49.096583Z", "invocation_id": "f98778e3-3fe1-479c-b3b5-cee906a716f3", "env": {}, "project_name": "develop", "project_id": "a19ea622182c63ddc19bb22cde982b82", "user_id": "9727b491-ecfe-4596-b1e2-53e646e8f80e", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.servicenow.servicenow__user_enhanced": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__user_enhanced", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__user_enhanced.sql", "original_file_path": "models/servicenow__user_enhanced.sql", "unique_id": "model.servicenow.servicenow__user_enhanced", "fqn": ["servicenow", "servicenow__user_enhanced"], "alias": "servicenow__user_enhanced", "checksum": {"name": "sha256", "checksum": "465f9ef18aa773d20d77b2ebdb61d626278a5947e81900d3911fd9beb8c0966f"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a user with their associated groups and roles, in addition to additional user info from the sys_user table.", "columns": {"sys_user_id": {"name": "sys_user_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_ids": {"name": "sys_user_group_ids", "description": "List of associated user group ids.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_ids": {"name": "sys_user_role_ids", "description": "List of associated user roles ids.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_names": {"name": "sys_user_role_names", "description": "Names of associated user roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_roles": {"name": "included_roles", "description": "List of included roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_roles": {"name": "sys_user_group_roles", "description": "List of associated user group roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_created_at": {"name": "user_created_at", "description": "Date and time when the user record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_updated_at": {"name": "user_updated_at", "description": "Date and time when the user record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accumulated_roles": {"name": "accumulated_roles", "description": "Roles accumulated or associated with the system user over time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The family name or surname of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_name": {"name": "sys_user_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Flag indicating whether the record is currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_link": {"name": "department_link", "description": "Link to the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_value": {"name": "department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_number": {"name": "employee_number", "description": "Employee number or identifier associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender information associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hashed_user_id": {"name": "hashed_user_id", "description": "Hashed identifier associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_password": {"name": "last_password", "description": "The timestamp or information related to the user's last password update.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldap_server_link": {"name": "ldap_server_link", "description": "A link to the LDAP (Lightweight Directory Access Protocol) server associated with the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldap_server_value": {"name": "ldap_server_value", "description": "The value or name of the LDAP server associated with the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_link": {"name": "manager_link", "description": "A link to the user's manager or supervisor in the organizational hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_value": {"name": "manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_name": {"name": "manager_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mobile_phone": {"name": "mobile_phone", "description": "The contact number for the user's mobile phone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The contact number belonging to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_roles": {"name": "sys_user_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_link": {"name": "schedule_link", "description": "Link to the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_value": {"name": "schedule_value", "description": "Value representing the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source or origin of the user's or user group's profile information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_format": {"name": "time_format", "description": "The preferred time format for the user (e.g., 12-hour or 24-hour).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone configured for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The username used by the user to log in to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_password": {"name": "user_password", "description": "The user's current password information or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.824594, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__user_enhanced`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\nwith user_aggregates as (\n\n    select *\n    from {{ ref('servicenow__user_aggregated')}}\n),\n\nsys_user as (\n    \n    select *\n    from {{ ref('stg_servicenow__sys_user') }}\n),\n\ncore_company as (\n    \n    select *\n    from {{ ref('stg_servicenow__core_company') }}\n),\n\nuser_enhanced as (\n\n    select\n\n        user_aggregates.*,\n        sys_user.user_created_at,\n        sys_user.user_updated_at,\n        sys_user.accumulated_roles,\n        sys_user.first_name,\n        sys_user.last_name,\n        sys_user.sys_user_name,\n        sys_user.is_active,\n        sys_user.company_link,\n        sys_user.company_value,\n        core_company.company_name,\n        sys_user.cost_center_link,\n        sys_user.cost_center_value,\n        sys_user.department_link,\n        sys_user.department_value,\n        sys_user.email,\n        sys_user.employee_number,\n        sys_user.gender,\n        sys_user.hashed_user_id,\n        sys_user.last_password,\n        sys_user.ldap_server_link,\n        sys_user.ldap_server_value,\n        sys_user.manager_link,\n        sys_user.manager_value,\n        manager.sys_user_name as manager_name,\n        sys_user.mobile_phone,\n        sys_user.phone,\n        sys_user.sys_user_roles,\n        sys_user.schedule_link,\n        sys_user.schedule_value,\n        sys_user.source,\n        sys_user.state,\n        sys_user.sys_class_name,\n        sys_user.sys_domain_link,\n        sys_user.sys_domain_path,\n        sys_user.sys_domain_value,\n        sys_user.time_format,\n        sys_user.time_zone,\n        sys_user.user_name,\n        sys_user.user_password\n\n    from user_aggregates\n    left join sys_user\n        on user_aggregates.sys_user_id = sys_user.sys_user_id\n        and user_aggregates.source_relation = sys_user.source_relation\n    left join core_company \n        on sys_user.company_value = core_company.core_company_id\n        and sys_user.source_relation = core_company.source_relation\n    left join sys_user manager\n        on sys_user.manager_value = manager.sys_user_id\n        and sys_user.source_relation = manager.source_relation\n)\n\nselect *\nfrom user_enhanced", "language": "sql", "refs": [{"name": "servicenow__user_aggregated", "package": null, "version": null}, {"name": "stg_servicenow__sys_user", "package": null, "version": null}, {"name": "stg_servicenow__core_company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.servicenow.servicenow__user_aggregated", "model.servicenow.stg_servicenow__sys_user", "model.servicenow.stg_servicenow__core_company"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__user_enhanced.sql", "compiled": true, "compiled_code": "\n\nwith user_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__user_aggregated`\n),\n\nsys_user as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n),\n\ncore_company as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company`\n),\n\nuser_enhanced as (\n\n    select\n\n        user_aggregates.*,\n        sys_user.user_created_at,\n        sys_user.user_updated_at,\n        sys_user.accumulated_roles,\n        sys_user.first_name,\n        sys_user.last_name,\n        sys_user.sys_user_name,\n        sys_user.is_active,\n        sys_user.company_link,\n        sys_user.company_value,\n        core_company.company_name,\n        sys_user.cost_center_link,\n        sys_user.cost_center_value,\n        sys_user.department_link,\n        sys_user.department_value,\n        sys_user.email,\n        sys_user.employee_number,\n        sys_user.gender,\n        sys_user.hashed_user_id,\n        sys_user.last_password,\n        sys_user.ldap_server_link,\n        sys_user.ldap_server_value,\n        sys_user.manager_link,\n        sys_user.manager_value,\n        manager.sys_user_name as manager_name,\n        sys_user.mobile_phone,\n        sys_user.phone,\n        sys_user.sys_user_roles,\n        sys_user.schedule_link,\n        sys_user.schedule_value,\n        sys_user.source,\n        sys_user.state,\n        sys_user.sys_class_name,\n        sys_user.sys_domain_link,\n        sys_user.sys_domain_path,\n        sys_user.sys_domain_value,\n        sys_user.time_format,\n        sys_user.time_zone,\n        sys_user.user_name,\n        sys_user.user_password\n\n    from user_aggregates\n    left join sys_user\n        on user_aggregates.sys_user_id = sys_user.sys_user_id\n        and user_aggregates.source_relation = sys_user.source_relation\n    left join core_company \n        on sys_user.company_value = core_company.core_company_id\n        and sys_user.source_relation = core_company.source_relation\n    left join sys_user manager\n        on sys_user.manager_value = manager.sys_user_id\n        and sys_user.source_relation = manager.source_relation\n)\n\nselect *\nfrom user_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.servicenow__change_request_enhanced": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__change_request_enhanced", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__change_request_enhanced.sql", "original_file_path": "models/servicenow__change_request_enhanced.sql", "unique_id": "model.servicenow.servicenow__change_request_enhanced", "fqn": ["servicenow", "servicenow__change_request_enhanced"], "alias": "servicenow__change_request_enhanced", "checksum": {"name": "sha256", "checksum": "4cd5ec722f3f61d115f01eecca9ed30fc47a0514e125fbb2ecb67d3ae437b728"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a change request with additional information about users who have interacted with it, pertinent task data, and relevant timestamps.", "columns": {"change_request_id": {"name": "change_request_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_category": {"name": "change_request_category", "description": "The category of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_type": {"name": "change_request_type", "description": "The type or category of the changes outlined in the current record, indicating the nature or purpose of the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_created_at": {"name": "change_request_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_created_date": {"name": "change_request_created_date", "description": "Date the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_updated_at": {"name": "change_request_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_updated_date": {"name": "change_request_updated_date", "description": "Date the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_start_date": {"name": "change_request_start_date", "description": "The requested start date for the implementation or execution of the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_date": {"name": "change_requested_by_date", "description": "The date the change is requested for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_link": {"name": "change_requested_by_link", "description": "A link to the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_value": {"name": "change_requested_by_value", "description": "The name or identifier of the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_review_date": {"name": "change_request_review_date", "description": "The date when the record was reviewed or evaluated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_review_status": {"name": "change_request_review_status", "description": "The status or outcome of the review process associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_comments": {"name": "review_comments", "description": "Comments or feedback provided during the review process for the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_plan": {"name": "change_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "backout_plan": {"name": "backout_plan", "description": "Information about the plan or process for backing out or undoing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chg_model_link": {"name": "chg_model_link", "description": "A link to the change model or template associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chg_model_value": {"name": "chg_model_value", "description": "The name or identifier of the change model or template linked to the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_close_code": {"name": "change_request_close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conflict_last_run": {"name": "conflict_last_run", "description": "The timestamp indicating when the conflict detection was last run for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conflict_status": {"name": "conflict_status", "description": "The status or outcome of the conflict detection process for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_phase": {"name": "change_request_phase", "description": "The phase or stage of the change request or change record within the change management process, indicating its progress or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_phase_state": {"name": "change_request_phase_state", "description": "The current state or status of the phase associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_implementation_plan": {"name": "change_request_implementation_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_justification": {"name": "change_request_justification", "description": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_request_on_hold": {"name": "is_change_request_on_hold", "description": "Indicates whether the change is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_on_hold_reason": {"name": "change_request_on_hold_reason", "description": "The reason or rationale for placing the associated record on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold_task": {"name": "on_hold_task", "description": "A link to the task or activity that indicates the current record is on hold, specifying the task associated with the \nhold status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outside_maintenance_schedule": {"name": "outside_maintenance_schedule", "description": "Indicates whether the changes associated with the current record fall outside the regular maintenance schedule or window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_production_system": {"name": "is_production_system", "description": "Indicates whether the changes associated with the current record are intended for the production environment or system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_reason": {"name": "change_request_reason", "description": "The reason or rationale behind the changes requested by the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_risk": {"name": "change_request_risk", "description": "The level of risk associated with the changes, indicating the potential impact or consequences of implementing the modifications outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "risk_impact_analysis": {"name": "risk_impact_analysis", "description": "An analysis or assessment of the impact or consequences of the changes outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_scope": {"name": "change_request_scope", "description": "The scope or extent of the changes outlined in the current record, specifying the areas or components affected by the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_test_plan": {"name": "change_request_test_plan", "description": "Information about the plan or process for testing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_request_unauthorized": {"name": "is_change_request_unauthorized", "description": "Indicates whether the changes associated with the current record were made without proper authorization or approval.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_date": {"name": "cab_date", "description": "The date of the Change Advisory Board (CAB) meeting associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_date_time": {"name": "cab_date_time", "description": "The date and time of the Change Advisory Board (CAB) meeting associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_delegate_link": {"name": "cab_delegate_link", "description": "A link to the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) in relation \nto the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_delegate_value": {"name": "cab_delegate_value", "description": "The name or identifier of the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) \nin relation to the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_recommendation": {"name": "cab_recommendation", "description": "The recommendation or decision made by the Change Advisory Board (CAB) regarding the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_cab_required": {"name": "is_cab_required", "description": "Indicates whether the Change Advisory Board (CAB) approval is required for the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requestor_email": {"name": "change_requestor_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requestor_manager_value": {"name": "change_requestor_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requestor_department_value": {"name": "change_requestor_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requestor_name": {"name": "change_requestor_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requestor_roles": {"name": "change_requestor_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_days_created_to_reviewed": {"name": "change_request_days_created_to_reviewed", "description": "The days lapsed from when the change request was created to when it was reviewed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_days_created_to_start": {"name": "change_request_days_created_to_start", "description": "The days lapsed from when the change request was created to when it was started", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_days_requested_by_to_start": {"name": "change_request_days_requested_by_to_start", "description": "The days lapsed from when the change request was requested to when it was started", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_related_tasks": {"name": "total_related_tasks", "description": "The total number of tasks tied to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table"}, "created_at": 1723671294.814695, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__change_request_enhanced`", "raw_code": "with change_request as (\n\n    select * \n    from {{ ref('stg_servicenow__change_request') }}\n),\n\nchange_task as (\n\n    select\n        change_request_value,\n        source_relation,\n        count(change_task_id) as total_tasks\n    from {{ ref('stg_servicenow__change_task') }}\n    group by 1,2\n),\n\nsys_user as (\n    \n    select *\n    from {{ ref('stg_servicenow__sys_user') }}\n),\n\nchange_request_enhanced as (\n    select\n        change_request.change_request_id,\n        change_request.change_request_category,\n        change_request.change_request_type,\n        change_request.change_request_created_at,\n        change_request.change_request_created_date,\n        change_request.change_request_updated_at,\n        change_request.change_request_updated_date,\n        change_request.change_request_start_date,\n        change_request.change_requested_by_date,\n        change_request.change_requested_by_link,\n        change_request.change_requested_by_value,\n        change_requestor.email as change_requestor_email,\n        change_requestor.manager_value as change_requestor_manager_value,\n        change_requestor.department_value as change_requestor_department_value,\n        change_requestor.sys_user_name as change_requestor_name,\n        change_requestor.sys_user_roles as change_requestor_roles,\n        change_request.change_request_review_date,\n        change_request.change_request_review_status,\n        change_request.review_comments,\n        change_request.change_plan,\n        change_request.backout_plan,\n        change_request.chg_model_link,\n        change_request.chg_model_value,\n        change_request.change_request_close_code,\n        change_request.conflict_last_run,\n        change_request.conflict_status,\n        change_request.change_request_phase,\n        change_request.change_request_phase_state,\n        change_request.change_request_implementation_plan,\n        change_request.change_request_justification,\n        change_request.is_change_request_on_hold,\n        change_request.change_request_on_hold_reason,\n        change_request.on_hold_task,\n        change_request.outside_maintenance_schedule,\n        change_request.is_production_system,\n        change_request.change_request_reason,\n        change_request.change_request_risk,\n        change_request.risk_impact_analysis,\n        change_request.change_request_scope,\n        change_request.change_request_test_plan,\n        change_request.is_change_request_unauthorized,\n        change_request.cab_date,\n        change_request.cab_date_time,\n        change_request.cab_delegate_link,\n        change_request.cab_delegate_value,\n        change_request.cab_recommendation,\n        change_request.is_cab_required,\n        change_request._fivetran_synced,\n        {{ dbt.datediff(\"cast(change_request.change_request_created_date as \" ~ dbt.type_timestamp() ~ \" ) \", \"cast(change_request.change_request_start_date as \" ~ dbt.type_timestamp() ~ \" ) \", 'day') }} as change_request_days_created_to_start,\n        {{ dbt.datediff(\"cast(change_request.change_requested_by_date as \" ~ dbt.type_timestamp() ~ \" ) \" , \"cast(change_request.change_request_start_date as \" ~ dbt.type_timestamp() ~ \" ) \", 'day') }} as change_request_days_requested_by_to_start, \n        {{ dbt.datediff(\"cast(change_request.change_request_created_date as \" ~ dbt.type_timestamp() ~ \" ) \", \"cast(change_request.change_request_review_date as \" ~ dbt.type_timestamp() ~ \" ) \", 'day') }} as change_request_days_created_to_reviewed,\n        change_task.total_tasks as total_related_tasks,\n        change_request.source_relation\n\n    from change_request\n    left join change_task\n        on change_request.change_request_id = change_task.change_request_value\n        and change_request.source_relation = change_task.source_relation\n    left join sys_user change_requestor\n        on change_request.change_requested_by_value = change_requestor.sys_user_id\n        and change_request.source_relation = change_requestor.source_relation\n)\n\nselect *\nfrom change_request_enhanced", "language": "sql", "refs": [{"name": "stg_servicenow__change_request", "package": null, "version": null}, {"name": "stg_servicenow__change_task", "package": null, "version": null}, {"name": "stg_servicenow__sys_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.datediff"], "nodes": ["model.servicenow.stg_servicenow__change_request", "model.servicenow.stg_servicenow__change_task", "model.servicenow.stg_servicenow__sys_user"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__change_request_enhanced.sql", "compiled": true, "compiled_code": "with change_request as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request`\n),\n\nchange_task as (\n\n    select\n        change_request_value,\n        source_relation,\n        count(change_task_id) as total_tasks\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task`\n    group by 1,2\n),\n\nsys_user as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n),\n\nchange_request_enhanced as (\n    select\n        change_request.change_request_id,\n        change_request.change_request_category,\n        change_request.change_request_type,\n        change_request.change_request_created_at,\n        change_request.change_request_created_date,\n        change_request.change_request_updated_at,\n        change_request.change_request_updated_date,\n        change_request.change_request_start_date,\n        change_request.change_requested_by_date,\n        change_request.change_requested_by_link,\n        change_request.change_requested_by_value,\n        change_requestor.email as change_requestor_email,\n        change_requestor.manager_value as change_requestor_manager_value,\n        change_requestor.department_value as change_requestor_department_value,\n        change_requestor.sys_user_name as change_requestor_name,\n        change_requestor.sys_user_roles as change_requestor_roles,\n        change_request.change_request_review_date,\n        change_request.change_request_review_status,\n        change_request.review_comments,\n        change_request.change_plan,\n        change_request.backout_plan,\n        change_request.chg_model_link,\n        change_request.chg_model_value,\n        change_request.change_request_close_code,\n        change_request.conflict_last_run,\n        change_request.conflict_status,\n        change_request.change_request_phase,\n        change_request.change_request_phase_state,\n        change_request.change_request_implementation_plan,\n        change_request.change_request_justification,\n        change_request.is_change_request_on_hold,\n        change_request.change_request_on_hold_reason,\n        change_request.on_hold_task,\n        change_request.outside_maintenance_schedule,\n        change_request.is_production_system,\n        change_request.change_request_reason,\n        change_request.change_request_risk,\n        change_request.risk_impact_analysis,\n        change_request.change_request_scope,\n        change_request.change_request_test_plan,\n        change_request.is_change_request_unauthorized,\n        change_request.cab_date,\n        change_request.cab_date_time,\n        change_request.cab_delegate_link,\n        change_request.cab_delegate_value,\n        change_request.cab_recommendation,\n        change_request.is_cab_required,\n        change_request._fivetran_synced,\n        \n\n    datetime_diff(\n        cast(cast(change_request.change_request_start_date as timestamp )  as datetime),\n        cast(cast(change_request.change_request_created_date as timestamp )  as datetime),\n        day\n    )\n\n   as change_request_days_created_to_start,\n        \n\n    datetime_diff(\n        cast(cast(change_request.change_request_start_date as timestamp )  as datetime),\n        cast(cast(change_request.change_requested_by_date as timestamp )  as datetime),\n        day\n    )\n\n   as change_request_days_requested_by_to_start, \n        \n\n    datetime_diff(\n        cast(cast(change_request.change_request_review_date as timestamp )  as datetime),\n        cast(cast(change_request.change_request_created_date as timestamp )  as datetime),\n        day\n    )\n\n   as change_request_days_created_to_reviewed,\n        change_task.total_tasks as total_related_tasks,\n        change_request.source_relation\n\n    from change_request\n    left join change_task\n        on change_request.change_request_id = change_task.change_request_value\n        and change_request.source_relation = change_task.source_relation\n    left join sys_user change_requestor\n        on change_request.change_requested_by_value = change_requestor.sys_user_id\n        and change_request.source_relation = change_requestor.source_relation\n)\n\nselect *\nfrom change_request_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.servicenow__user_aggregated": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__user_aggregated", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__user_aggregated.sql", "original_file_path": "models/servicenow__user_aggregated.sql", "unique_id": "model.servicenow.servicenow__user_aggregated", "fqn": ["servicenow", "servicenow__user_aggregated"], "alias": "servicenow__user_aggregated", "checksum": {"name": "sha256", "checksum": "eb409a83bec8f7bc705709207aab1615b5de0a6e2a9345374d6b4112cbea2b1c"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a user with their associated groups and roles. To prevent run failures caused by character limits, if there are more than 1000 distinct associated values, the field will output 'Too many fields to render' .", "columns": {"sys_user_id": {"name": "sys_user_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_ids": {"name": "sys_user_group_ids", "description": "List of associated user group ids.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_ids": {"name": "sys_user_role_ids", "description": "List of associated user roles ids.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_names": {"name": "sys_user_role_names", "description": "Names of associated user roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_roles": {"name": "included_roles", "description": "List of included roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_roles": {"name": "sys_user_group_roles", "description": "List of associated user group roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.8208268, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__user_aggregated`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\nwith sys_user as (\n    \n    select *\n    from {{ ref('stg_servicenow__sys_user') }}\n),\n\nuser_grmember as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_grmember') }}\n),\n\nuser_has_role as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_has_role') }}\n),\n\nuser_role as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_role') }}\n),\n\nuser_group as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_group')}}\n),\n\naggregate_counts as (\n\n    select \n        sys_user.sys_user_id,\n        sys_user.source_relation,\n        count(distinct user_grmember.sys_user_group_id) as count_distinct_sys_user_group_ids,\n        count(distinct user_has_role.sys_user_role_id) as count_distinct_sys_user_role_ids,\n        count(distinct user_role.sys_user_role_name) as count_distinct_sys_user_role_names,\n        count(distinct user_role.includes_roles) as count_distinct_included_roles,\n        count(distinct user_group.sys_user_group_roles) as count_distinct_sys_user_group_roles\n\n    from sys_user\n    left join user_grmember\n        on sys_user.sys_user_id = user_grmember.sys_user_id\n        and sys_user.source_relation = user_grmember.source_relation\n    left join user_group\n        on user_grmember.sys_user_group_id = user_group.sys_user_group_id\n        and user_grmember.source_relation = user_group.source_relation\n    left join user_has_role\n        on sys_user.sys_user_id = user_has_role.sys_user_id\n        and sys_user.source_relation = user_has_role.source_relation\n    left join user_role\n        on user_has_role.sys_user_role_id = user_role.sys_user_role_id\n        and user_has_role.source_relation = user_role.source_relation\n\n    {{ dbt_utils.group_by(2) }}\n),\n\nuser_aggregates as (\n\n    select\n        sys_user.sys_user_id,\n        sys_user.source_relation,\n        case when\n            aggregate_counts.count_distinct_sys_user_group_ids <= 5000 then {{ fivetran_utils.string_agg(\"distinct user_grmember.sys_user_group_id\", \"'\\\\n'\") }}\n            else 'Too many sys user group ids to render' \n        end as sys_user_group_ids,\n        case when\n            aggregate_counts.count_distinct_sys_user_role_ids <= 5000 then {{ fivetran_utils.string_agg(\"distinct user_has_role.sys_user_role_id\", \"'\\\\n'\") }}\n            else 'Too many sys user role ids to render' \n        end as sys_user_role_ids,\n        case when\n            aggregate_counts.count_distinct_sys_user_role_names <= 5000 then {{ fivetran_utils.string_agg(\"distinct user_role.sys_user_role_name\", \"'\\\\n'\") }}\n            else 'Too many sys user role names to render' \n        end as sys_user_role_names,\n        case when\n            aggregate_counts.count_distinct_included_roles <= 5000 then {{ fivetran_utils.string_agg(\"distinct user_role.includes_roles\", \"'\\\\n'\") }}\n            else 'Too many roles to render' \n        end as included_roles,\n        case when\n            aggregate_counts.count_distinct_sys_user_group_roles <= 5000 then {{ fivetran_utils.string_agg(\"distinct user_group.sys_user_group_roles\", \"'\\\\n'\") }}\n            else 'Too many sys user group roles to render' \n        end as sys_user_group_roles\n\n    from sys_user\n    left join aggregate_counts\n        on sys_user.sys_user_id = aggregate_counts.sys_user_id\n        and sys_user.source_relation = aggregate_counts.source_relation\n    left join user_grmember\n        on sys_user.sys_user_id = user_grmember.sys_user_id\n        and sys_user.source_relation = user_grmember.source_relation\n    left join user_group\n        on user_grmember.sys_user_group_id = user_group.sys_user_group_id\n        and user_grmember.source_relation = user_group.source_relation\n    left join user_has_role\n        on sys_user.sys_user_id = user_has_role.sys_user_id\n        and sys_user.source_relation = user_has_role.source_relation\n    left join user_role\n        on user_has_role.sys_user_role_id = user_role.sys_user_role_id\n        and user_has_role.source_relation = user_role.source_relation\n\n    group by sys_user.sys_user_id, sys_user.source_relation, count_distinct_sys_user_group_ids, count_distinct_sys_user_role_ids, count_distinct_sys_user_role_names, count_distinct_included_roles, count_distinct_sys_user_group_roles\n)\n\nselect * \nfrom user_aggregates", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_grmember", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_has_role", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_role", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.fivetran_utils.string_agg"], "nodes": ["model.servicenow.stg_servicenow__sys_user", "model.servicenow.stg_servicenow__sys_user_grmember", "model.servicenow.stg_servicenow__sys_user_has_role", "model.servicenow.stg_servicenow__sys_user_role", "model.servicenow.stg_servicenow__sys_user_group"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__user_aggregated.sql", "compiled": true, "compiled_code": "\n\nwith sys_user as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n),\n\nuser_grmember as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_grmember`\n),\n\nuser_has_role as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_has_role`\n),\n\nuser_role as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_role`\n),\n\nuser_group as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group`\n),\n\naggregate_counts as (\n\n    select \n        sys_user.sys_user_id,\n        sys_user.source_relation,\n        count(distinct user_grmember.sys_user_group_id) as count_distinct_sys_user_group_ids,\n        count(distinct user_has_role.sys_user_role_id) as count_distinct_sys_user_role_ids,\n        count(distinct user_role.sys_user_role_name) as count_distinct_sys_user_role_names,\n        count(distinct user_role.includes_roles) as count_distinct_included_roles,\n        count(distinct user_group.sys_user_group_roles) as count_distinct_sys_user_group_roles\n\n    from sys_user\n    left join user_grmember\n        on sys_user.sys_user_id = user_grmember.sys_user_id\n        and sys_user.source_relation = user_grmember.source_relation\n    left join user_group\n        on user_grmember.sys_user_group_id = user_group.sys_user_group_id\n        and user_grmember.source_relation = user_group.source_relation\n    left join user_has_role\n        on sys_user.sys_user_id = user_has_role.sys_user_id\n        and sys_user.source_relation = user_has_role.source_relation\n    left join user_role\n        on user_has_role.sys_user_role_id = user_role.sys_user_role_id\n        and user_has_role.source_relation = user_role.source_relation\n\n    group by 1,2\n),\n\nuser_aggregates as (\n\n    select\n        sys_user.sys_user_id,\n        sys_user.source_relation,\n        case when\n            aggregate_counts.count_distinct_sys_user_group_ids <= 5000 then \n    string_agg(distinct user_grmember.sys_user_group_id, '\\n')\n\n\n            else 'Too many sys user group ids to render' \n        end as sys_user_group_ids,\n        case when\n            aggregate_counts.count_distinct_sys_user_role_ids <= 5000 then \n    string_agg(distinct user_has_role.sys_user_role_id, '\\n')\n\n\n            else 'Too many sys user role ids to render' \n        end as sys_user_role_ids,\n        case when\n            aggregate_counts.count_distinct_sys_user_role_names <= 5000 then \n    string_agg(distinct user_role.sys_user_role_name, '\\n')\n\n\n            else 'Too many sys user role names to render' \n        end as sys_user_role_names,\n        case when\n            aggregate_counts.count_distinct_included_roles <= 5000 then \n    string_agg(distinct user_role.includes_roles, '\\n')\n\n\n            else 'Too many roles to render' \n        end as included_roles,\n        case when\n            aggregate_counts.count_distinct_sys_user_group_roles <= 5000 then \n    string_agg(distinct user_group.sys_user_group_roles, '\\n')\n\n\n            else 'Too many sys user group roles to render' \n        end as sys_user_group_roles\n\n    from sys_user\n    left join aggregate_counts\n        on sys_user.sys_user_id = aggregate_counts.sys_user_id\n        and sys_user.source_relation = aggregate_counts.source_relation\n    left join user_grmember\n        on sys_user.sys_user_id = user_grmember.sys_user_id\n        and sys_user.source_relation = user_grmember.source_relation\n    left join user_group\n        on user_grmember.sys_user_group_id = user_group.sys_user_group_id\n        and user_grmember.source_relation = user_group.source_relation\n    left join user_has_role\n        on sys_user.sys_user_id = user_has_role.sys_user_id\n        and sys_user.source_relation = user_has_role.source_relation\n    left join user_role\n        on user_has_role.sys_user_role_id = user_role.sys_user_role_id\n        and user_has_role.source_relation = user_role.source_relation\n\n    group by sys_user.sys_user_id, sys_user.source_relation, count_distinct_sys_user_group_ids, count_distinct_sys_user_role_ids, count_distinct_sys_user_role_names, count_distinct_included_roles, count_distinct_sys_user_group_roles\n)\n\nselect * \nfrom user_aggregates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.servicenow__problem_enhanced": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__problem_enhanced", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__problem_enhanced.sql", "original_file_path": "models/servicenow__problem_enhanced.sql", "unique_id": "model.servicenow.servicenow__problem_enhanced", "fqn": ["servicenow", "servicenow__problem_enhanced"], "alias": "servicenow__problem_enhanced", "checksum": {"name": "sha256", "checksum": "d6b543fdf105ebf3cb01b4b691c65096008b32f9edf5a7f4cb95d32c3c4847a0"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a problem with additional information about users who have interacted with it, pertinent task data, and relevant timestamps.", "columns": {"problem_id": {"name": "problem_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_subcategory": {"name": "problem_subcategory", "description": "The specific subcategory or classification of the issue, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_category": {"name": "problem_category", "description": "The category of the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_state": {"name": "problem_state", "description": "The current state or status of the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_created_at": {"name": "problem_created_at", "description": "Date and time when the problem record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_updated_at": {"name": "problem_updated_at", "description": "Date and time when the problem record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_at": {"name": "problem_confirmed_at", "description": "The timestamp indicating when the problem was confirmed or acknowledged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_by_link": {"name": "problem_confirmed_by_link", "description": "A link to the person or entity who confirmed or acknowledged the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_by_value": {"name": "problem_confirmed_by_value", "description": "The name or identifier of the person or entity who confirmed or acknowledged the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_at": {"name": "problem_fix_at", "description": "The timestamp indicating when the problem is scheduled or planned to be fixed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_by_link": {"name": "problem_fix_by_link", "description": "A link to the person or entity responsible for fixing the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_by_value": {"name": "problem_fix_by_value", "description": "The name or identifier of the person or entity responsible for fixing the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolution_code": {"name": "problem_resolution_code", "description": "The code or identifier associated with the resolution of the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolved_at": {"name": "problem_resolved_at", "description": "The timestamp indicating when the problem was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_link": {"name": "resolved_by_link", "description": "A link to the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolved_by_value": {"name": "problem_resolved_by_value", "description": "The name or identifier of the person or entity who resolved the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_first_reported_by_task_link": {"name": "problem_first_reported_by_task_link", "description": "A link to the task or activity that first reported the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_first_reported_by_task_value": {"name": "problem_first_reported_by_task_value", "description": "The name or identifier of the task or activity that first reported the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_at": {"name": "fix_communicated_at", "description": "The timestamp indicating when the fix for the issue was communicated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_by_link": {"name": "fix_communicated_by_link", "description": "A link to the person or entity who communicated the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_by_value": {"name": "fix_communicated_by_value", "description": "The name or identifier of the person or entity who communicated the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_at": {"name": "reopened_at", "description": "The timestamp indicating when the issue was last reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cause_notes": {"name": "cause_notes", "description": "Additional notes or details about the cause of a particular issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duplicate_of_link": {"name": "duplicate_of_link", "description": "A link to the related issue that is identified as a duplicate of the current one.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duplicate_of_value": {"name": "duplicate_of_value", "description": "The name or identifier of the related issue that is identified as a duplicate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_notes": {"name": "problem_fix_notes", "description": "Additional notes or details related to the fix for the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_known_error": {"name": "is_known_error", "description": "Indicates whether the issue is a known error with a documented resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_major_problem": {"name": "is_major_problem", "description": "Indicates whether the issue is categorized as a major problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_related_incidents": {"name": "problem_related_incidents", "description": "Number of incidents that are related to the current problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_outcome": {"name": "review_outcome", "description": "The outcome or result of the review process for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_link": {"name": "rfc_link", "description": "A link to the Request for Change (RFC) associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_value": {"name": "rfc_value", "description": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround": {"name": "workaround", "description": "A description of a temporary or alternative solution that can be applied to address the issue before a permanent fix \nis implemented.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_applied": {"name": "workaround_applied", "description": "Indicates whether a workaround has been applied to address the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_at": {"name": "workaround_communicated_at", "description": "The timestamp indicating when the workaround for the issue was communicated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_by_link": {"name": "workaround_communicated_by_link", "description": "A link to the person or entity who communicated the workaround for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_by_value": {"name": "workaround_communicated_by_value", "description": "The name or identifier of the person or entity who communicated the workaround for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_minutes_created_to_fix": {"name": "problem_minutes_created_to_fix", "description": "The minutes lapsed from when the problem was created to when it was fixed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_minutes_created_to_resolved": {"name": "problem_minutes_created_to_resolved", "description": "The minutes lapsed from when the problem was created to when it was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_related_tasks": {"name": "total_related_tasks", "description": "The total number of tasks tied to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_email": {"name": "problem_confirmer_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_manager_value": {"name": "problem_confirmer_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_department_value": {"name": "problem_confirmer_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_name": {"name": "problem_confirmer_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_roles": {"name": "problem_confirmer_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_email": {"name": "problem_fixer_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_manager_value": {"name": "problem_fixer_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_department_value": {"name": "problem_fixer_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_name": {"name": "problem_fixer_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_roles": {"name": "problem_fixer_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_email": {"name": "problem_resolver_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_manager_value": {"name": "problem_resolver_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_department_value": {"name": "problem_resolver_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_name": {"name": "problem_resolver_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_roles": {"name": "problem_resolver_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_communicator_email": {"name": "problem_fix_communicator_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_communicator_manager_value": {"name": "problem_fix_communicator_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_communicator_department_value": {"name": "problem_fix_communicator_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_communicator_name": {"name": "problem_fix_communicator_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_communicator_roles": {"name": "problem_fix_communicator_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_reopener_email": {"name": "problem_reopener_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_reopener_manager_value": {"name": "problem_reopener_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_reopener_department_value": {"name": "problem_reopener_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_reopener_name": {"name": "problem_reopener_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_reopener_roles": {"name": "problem_reopener_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_workaround_communicator_email": {"name": "problem_workaround_communicator_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_workaround_communicator_manager_value": {"name": "problem_workaround_communicator_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_workaround_communicator_department_value": {"name": "problem_workaround_communicator_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_workaround_communicator_name": {"name": "problem_workaround_communicator_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_workaround_communicator_roles": {"name": "problem_workaround_communicator_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table"}, "created_at": 1723671294.811275, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__problem_enhanced`", "raw_code": "with problem as (\n\n    select *\n    from {{ ref('stg_servicenow__problem') }}\n),\n\nproblem_task as (\n    \n    select\n        problem_value,\n        source_relation,\n        count(problem_task_id) as total_tasks\n    from {{ ref('stg_servicenow__problem_task') }}\n    group by 1,2\n),\n\nsys_user as (\n    \n    select *\n    from {{ ref('stg_servicenow__sys_user') }}\n),\n\nproblem_enhanced as (\n\n    select \n\n        problem.problem_id,\n        problem.problem_subcategory,\n        problem.problem_category,\n        problem.problem_state,\n        problem.problem_created_at,\n        problem.problem_updated_at,\n        problem.problem_confirmed_at,\n        problem.problem_confirmed_by_link,\n        problem.problem_confirmed_by_value,\n        problem_confirmer.email as problem_confirmer_email,\n        problem_confirmer.manager_value as problem_confirmer_manager_value,\n        problem_confirmer.department_value as problem_confirmer_department_value,\n        problem_confirmer.sys_user_name as problem_confirmer_name,\n        problem_confirmer.sys_user_roles as problem_confirmer_roles,\n        problem.problem_fix_at,\n        problem.problem_fix_by_link,\n        problem.problem_fix_by_value,\n        problem_fixer.email as problem_fixer_email,\n        problem_fixer.manager_value as problem_fixer_manager_value,\n        problem_fixer.department_value as problem_fixer_department_value,\n        problem_fixer.sys_user_name as problem_fixer_name,\n        problem_fixer.sys_user_roles as problem_fixer_roles,\n        problem.problem_resolution_code,\n        problem.problem_resolved_at,\n        problem.resolved_by_link,\n        problem.problem_resolved_by_value,\n        problem_resolver.email as problem_resolver_email,\n        problem_resolver.manager_value as problem_resolver_manager_value,\n        problem_resolver.department_value as problem_resolver_department_value,\n        problem_resolver.sys_user_name as problem_resolver_name,\n        problem_resolver.sys_user_roles as problem_resolver_roles,\n        problem.problem_first_reported_by_task_link,\n        problem.problem_first_reported_by_task_value,\n        problem.fix_communicated_at,\n        problem.fix_communicated_by_link,\n        problem.fix_communicated_by_value,\n        problem_fix_communicator.email as problem_fix_communicator_email,\n        problem_fix_communicator.manager_value as problem_fix_communicator_manager_value,\n        problem_fix_communicator.department_value as problem_fix_communicator_department_value,\n        problem_fix_communicator.sys_user_name as problem_fix_communicator_name,\n        problem_fix_communicator.sys_user_roles as problem_fix_communicator_roles,\n        problem.reopen_count,\n        problem.reopened_at,\n        problem.reopened_by_link,\n        problem.reopened_by_value,\n        problem_reopener.email as problem_reopener_email,\n        problem_reopener.manager_value as problem_reopener_manager_value,\n        problem_reopener.department_value as problem_reopener_department_value,\n        problem_reopener.sys_user_name as problem_reopener_name,\n        problem_reopener.sys_user_roles as problem_reopener_roles,\n        problem.cause_notes,\n        problem.duplicate_of_link,\n        problem.duplicate_of_value,\n        problem.problem_fix_notes,\n        problem.is_known_error,\n        problem.is_major_problem,\n        problem.problem_related_incidents,\n        problem.review_outcome,\n        problem.rfc_link,\n        problem.rfc_value,\n        problem.workaround,\n        problem.workaround_applied,\n        problem.workaround_communicated_at,\n        problem.workaround_communicated_by_link,\n        problem.workaround_communicated_by_value,\n        problem_workaround_communicator.email as problem_workaround_communicator_email,\n        problem_workaround_communicator.manager_value as problem_workaround_communicator_manager_value,\n        problem_workaround_communicator.department_value as problem_workaround_communicator_department_value,\n        problem_workaround_communicator.sys_user_name as problem_workaround_communicator_name,\n        problem_workaround_communicator.sys_user_roles as problem_workaround_communicator_roles,\n        {{ dbt.datediff(\"cast(problem.problem_created_at as \" ~\u00a0dbt.type_timestamp() ~  \" ) \", \"cast(problem.problem_fix_at as \" ~ dbt.type_timestamp() ~ \" ) \", 'minute') }} as problem_minutes_created_to_fix,\n        {{ dbt.datediff(\"cast(problem.problem_created_at as \" ~\u00a0dbt.type_timestamp() ~ \" ) \", \"cast(problem.problem_resolved_at as \" ~\u00a0dbt.type_timestamp() ~ \" ) \", 'minute') }} as problem_minutes_created_to_resolved,\n        problem._fivetran_synced,\n        problem_task.total_tasks as total_related_tasks,\n        problem.source_relation\n\n    from problem\n    left join problem_task\n        on problem.problem_id = problem_task.problem_value\n        and problem.source_relation = problem_task.source_relation\n    left join sys_user problem_confirmer\n        on problem.problem_confirmed_by_value = problem_confirmer.sys_user_id\n        and problem.source_relation = problem_confirmer.source_relation\n    left join sys_user problem_fixer\n        on problem.problem_fix_by_value = problem_fixer.sys_user_id\n        and problem.source_relation = problem_fixer.source_relation\n    left join sys_user problem_resolver\n        on problem.problem_resolved_by_value = problem_resolver.sys_user_id\n        and problem.source_relation = problem_resolver.source_relation\n    left join sys_user problem_fix_communicator\n        on problem.fix_communicated_by_value = problem_fix_communicator.sys_user_id\n        and problem.source_relation = problem_fix_communicator.source_relation\n    left join sys_user problem_reopener\n        on problem.reopened_by_value = problem_reopener.sys_user_id\n        and problem.source_relation = problem_reopener.source_relation\n    left join sys_user problem_workaround_communicator\n        on problem.workaround_communicated_by_value = problem_workaround_communicator.sys_user_id\n        and problem.source_relation = problem_workaround_communicator.source_relation\n)\n\nselect *\nfrom problem_enhanced", "language": "sql", "refs": [{"name": "stg_servicenow__problem", "package": null, "version": null}, {"name": "stg_servicenow__problem_task", "package": null, "version": null}, {"name": "stg_servicenow__sys_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.datediff"], "nodes": ["model.servicenow.stg_servicenow__problem", "model.servicenow.stg_servicenow__problem_task", "model.servicenow.stg_servicenow__sys_user"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__problem_enhanced.sql", "compiled": true, "compiled_code": "with problem as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem`\n),\n\nproblem_task as (\n    \n    select\n        problem_value,\n        source_relation,\n        count(problem_task_id) as total_tasks\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task`\n    group by 1,2\n),\n\nsys_user as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n),\n\nproblem_enhanced as (\n\n    select \n\n        problem.problem_id,\n        problem.problem_subcategory,\n        problem.problem_category,\n        problem.problem_state,\n        problem.problem_created_at,\n        problem.problem_updated_at,\n        problem.problem_confirmed_at,\n        problem.problem_confirmed_by_link,\n        problem.problem_confirmed_by_value,\n        problem_confirmer.email as problem_confirmer_email,\n        problem_confirmer.manager_value as problem_confirmer_manager_value,\n        problem_confirmer.department_value as problem_confirmer_department_value,\n        problem_confirmer.sys_user_name as problem_confirmer_name,\n        problem_confirmer.sys_user_roles as problem_confirmer_roles,\n        problem.problem_fix_at,\n        problem.problem_fix_by_link,\n        problem.problem_fix_by_value,\n        problem_fixer.email as problem_fixer_email,\n        problem_fixer.manager_value as problem_fixer_manager_value,\n        problem_fixer.department_value as problem_fixer_department_value,\n        problem_fixer.sys_user_name as problem_fixer_name,\n        problem_fixer.sys_user_roles as problem_fixer_roles,\n        problem.problem_resolution_code,\n        problem.problem_resolved_at,\n        problem.resolved_by_link,\n        problem.problem_resolved_by_value,\n        problem_resolver.email as problem_resolver_email,\n        problem_resolver.manager_value as problem_resolver_manager_value,\n        problem_resolver.department_value as problem_resolver_department_value,\n        problem_resolver.sys_user_name as problem_resolver_name,\n        problem_resolver.sys_user_roles as problem_resolver_roles,\n        problem.problem_first_reported_by_task_link,\n        problem.problem_first_reported_by_task_value,\n        problem.fix_communicated_at,\n        problem.fix_communicated_by_link,\n        problem.fix_communicated_by_value,\n        problem_fix_communicator.email as problem_fix_communicator_email,\n        problem_fix_communicator.manager_value as problem_fix_communicator_manager_value,\n        problem_fix_communicator.department_value as problem_fix_communicator_department_value,\n        problem_fix_communicator.sys_user_name as problem_fix_communicator_name,\n        problem_fix_communicator.sys_user_roles as problem_fix_communicator_roles,\n        problem.reopen_count,\n        problem.reopened_at,\n        problem.reopened_by_link,\n        problem.reopened_by_value,\n        problem_reopener.email as problem_reopener_email,\n        problem_reopener.manager_value as problem_reopener_manager_value,\n        problem_reopener.department_value as problem_reopener_department_value,\n        problem_reopener.sys_user_name as problem_reopener_name,\n        problem_reopener.sys_user_roles as problem_reopener_roles,\n        problem.cause_notes,\n        problem.duplicate_of_link,\n        problem.duplicate_of_value,\n        problem.problem_fix_notes,\n        problem.is_known_error,\n        problem.is_major_problem,\n        problem.problem_related_incidents,\n        problem.review_outcome,\n        problem.rfc_link,\n        problem.rfc_value,\n        problem.workaround,\n        problem.workaround_applied,\n        problem.workaround_communicated_at,\n        problem.workaround_communicated_by_link,\n        problem.workaround_communicated_by_value,\n        problem_workaround_communicator.email as problem_workaround_communicator_email,\n        problem_workaround_communicator.manager_value as problem_workaround_communicator_manager_value,\n        problem_workaround_communicator.department_value as problem_workaround_communicator_department_value,\n        problem_workaround_communicator.sys_user_name as problem_workaround_communicator_name,\n        problem_workaround_communicator.sys_user_roles as problem_workaround_communicator_roles,\n        \n\n    datetime_diff(\n        cast(cast(problem.problem_fix_at as timestamp )  as datetime),\n        cast(cast(problem.problem_created_at as timestamp )  as datetime),\n        minute\n    )\n\n   as problem_minutes_created_to_fix,\n        \n\n    datetime_diff(\n        cast(cast(problem.problem_resolved_at as timestamp )  as datetime),\n        cast(cast(problem.problem_created_at as timestamp )  as datetime),\n        minute\n    )\n\n   as problem_minutes_created_to_resolved,\n        problem._fivetran_synced,\n        problem_task.total_tasks as total_related_tasks,\n        problem.source_relation\n\n    from problem\n    left join problem_task\n        on problem.problem_id = problem_task.problem_value\n        and problem.source_relation = problem_task.source_relation\n    left join sys_user problem_confirmer\n        on problem.problem_confirmed_by_value = problem_confirmer.sys_user_id\n        and problem.source_relation = problem_confirmer.source_relation\n    left join sys_user problem_fixer\n        on problem.problem_fix_by_value = problem_fixer.sys_user_id\n        and problem.source_relation = problem_fixer.source_relation\n    left join sys_user problem_resolver\n        on problem.problem_resolved_by_value = problem_resolver.sys_user_id\n        and problem.source_relation = problem_resolver.source_relation\n    left join sys_user problem_fix_communicator\n        on problem.fix_communicated_by_value = problem_fix_communicator.sys_user_id\n        and problem.source_relation = problem_fix_communicator.source_relation\n    left join sys_user problem_reopener\n        on problem.reopened_by_value = problem_reopener.sys_user_id\n        and problem.source_relation = problem_reopener.source_relation\n    left join sys_user problem_workaround_communicator\n        on problem.workaround_communicated_by_value = problem_workaround_communicator.sys_user_id\n        and problem.source_relation = problem_workaround_communicator.source_relation\n)\n\nselect *\nfrom problem_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.servicenow__activity_summary": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__activity_summary", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__activity_summary.sql", "original_file_path": "models/servicenow__activity_summary.sql", "unique_id": "model.servicenow.servicenow__activity_summary", "fqn": ["servicenow", "servicenow__activity_summary"], "alias": "servicenow__activity_summary", "checksum": {"name": "sha256", "checksum": "eb52e250eb509e3c7aad9f7dc8eb5d4377d6e54eb318fdb4d54efdd3682f4928"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents aggregate task, problem, change, incident, and change request data by varying grains including update date, status, priority, impact, and urgency.", "columns": {"task_updated_date": {"name": "task_updated_date", "description": "The day the task last got updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_state": {"name": "task_state", "description": "Current state or status of the task (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Priority level assigned to the task. The priority field is automatically calculated based on the values of impact and urgency. This determines the sequence in which the record should be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "impact": {"name": "impact", "description": "Assessment of the impact that completing or not completing the task may have. This is the business loss and potential damage (for example, financial, customer, regulation, security, reputation, brand) caused by the incident", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgency": {"name": "urgency", "description": "Level of urgency associated with the record. Speed at which the business expects the record to be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_active_tasks": {"name": "total_active_tasks", "description": "Total number of active tasks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_active_problem_tasks": {"name": "total_active_problem_tasks", "description": "Total number of active problem tasks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_active_change_tasks": {"name": "total_active_change_tasks", "description": "Total number of active change tasks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_associated_problems": {"name": "total_associated_problems", "description": "Total number of problems", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_incidents_caused_by_problems": {"name": "total_incidents_caused_by_problems", "description": "Total number of incidents caused by associated problems", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_change_requests": {"name": "total_change_requests", "description": "Total number of change requests", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_closed_tasks": {"name": "total_closed_tasks", "description": "Total number of closed tasks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_minutes_open_to_close": {"name": "average_minutes_open_to_close", "description": "Average number of minutes between the time that the task was opened to the time that the task was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_tasks_made_slas": {"name": "total_tasks_made_slas", "description": "The count of total tasks where is_made_sla = True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table"}, "created_at": 1723671294.806206, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__activity_summary`", "raw_code": "with ticket_enhanced as (\n\n    select * \n    from {{ ref('servicenow__task_enhanced') }}\n)\n\nselect \n    task_updated_date,\n    task_state,\n    priority,\n    impact,\n    urgency,\n    source_relation,\n    count(distinct case when is_task_active = true then task_id end) as total_active_tasks,\n    count(distinct case when is_problem_task = true and is_task_active = true then task_id end) as total_active_problem_tasks,\n    count(distinct case when is_change_task = true and is_task_active = true then task_id end) as total_active_change_tasks,\n    count(distinct associated_problem_id) as total_associated_problems, \n    sum(problem_related_incidents) as total_incidents_caused_by_problems,\n    count(distinct associated_change_request_id) as total_change_requests,\n    count(distinct case when task_closed_at is not null then task_id end) as total_closed_tasks,\n    avg(task_minutes_open_to_close) as average_minutes_open_to_close,\n    count(case when is_made_sla = true then 1 end) as total_tasks_made_slas\n\nfrom ticket_enhanced\ngroup by 1,2,3,4,5,6", "language": "sql", "refs": [{"name": "servicenow__task_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.servicenow.servicenow__task_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__activity_summary.sql", "compiled": true, "compiled_code": "with ticket_enhanced as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__task_enhanced`\n)\n\nselect \n    task_updated_date,\n    task_state,\n    priority,\n    impact,\n    urgency,\n    source_relation,\n    count(distinct case when is_task_active = true then task_id end) as total_active_tasks,\n    count(distinct case when is_problem_task = true and is_task_active = true then task_id end) as total_active_problem_tasks,\n    count(distinct case when is_change_task = true and is_task_active = true then task_id end) as total_active_change_tasks,\n    count(distinct associated_problem_id) as total_associated_problems, \n    sum(problem_related_incidents) as total_incidents_caused_by_problems,\n    count(distinct associated_change_request_id) as total_change_requests,\n    count(distinct case when task_closed_at is not null then task_id end) as total_closed_tasks,\n    avg(task_minutes_open_to_close) as average_minutes_open_to_close,\n    count(case when is_made_sla = true then 1 end) as total_tasks_made_slas\n\nfrom ticket_enhanced\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__task": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__task", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__task.sql", "original_file_path": "models/staging/stg_servicenow__task.sql", "unique_id": "model.servicenow.stg_servicenow__task", "fqn": ["servicenow", "staging", "stg_servicenow__task"], "alias": "stg_servicenow__task", "checksum": {"name": "sha256", "checksum": "a3f554bbddcb21117379e004e4217a488c289cdf39747886384aaea3786b1154"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all tasks related information. A task represents a unit of work that needs to be accomplished or tracked within the ServiceNow system. It can be related to various processes, such as incident resolution, change management, or other workflows.", "columns": {"task_id": {"name": "task_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_task_active": {"name": "is_task_active", "description": "Flag indicating whether the task is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activity_due": {"name": "activity_due", "description": "The due date or time for completing the activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_assignee_list": {"name": "additional_assignee_list", "description": "List of additional users or assignees associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval": {"name": "approval", "description": "Information related to the approval status and process for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval_history": {"name": "approval_history", "description": "History of approvals associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval_set": {"name": "approval_set", "description": "Set of approvals linked to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assigned_to_link": {"name": "assigned_to_link", "description": "Link to the user or group assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assigned_to_value": {"name": "assigned_to_value", "description": "Value representing the user or group assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_link": {"name": "assignment_group_link", "description": "Link to the assignment group associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_value": {"name": "assignment_group_value", "description": "Value representing the assignment group associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_duration": {"name": "business_duration", "description": "The duration of the task in terms of business hours.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_link": {"name": "business_service_link", "description": "Link to the business service associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_value": {"name": "business_service_value", "description": "Value representing the business service associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_duration": {"name": "calendar_duration", "description": "The duration of the task in terms of calendar time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_notes": {"name": "close_notes", "description": "Additional notes or comments recorded upon task closure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_closed_at": {"name": "task_closed_at", "description": "Date and time when the task was closed or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_by_link": {"name": "closed_by_link", "description": "Link to the user who closed or completed the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_by_value": {"name": "closed_by_value", "description": "Value representing the user who closed or completed the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_link": {"name": "cmdb_ci_link", "description": "Link to the configuration item (CI) associated with the record in the Configuration Management Database (CMDB).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_value": {"name": "cmdb_ci_value", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments": {"name": "comments", "description": "General comments or notes related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments_and_work_notes": {"name": "comments_and_work_notes", "description": "Combined information of comments and work notes recorded during the record's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_type": {"name": "contact_type", "description": "Type of contact associated with the record (e.g., customer, vendor).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_link": {"name": "contract_link", "description": "Link to the contract associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_value": {"name": "contract_value", "description": "Value representing the contract associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "correlation_display": {"name": "correlation_display", "description": "Display information related to correlation of the record with other records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "correlation_id": {"name": "correlation_id", "description": "Identifier used for correlating the record with related records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_plan_link": {"name": "delivery_plan_link", "description": "Link to the delivery plan associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_plan_value": {"name": "delivery_plan_value", "description": "Value representing the delivery plan associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_task_link": {"name": "delivery_task_link", "description": "Link to the delivery task associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_task_value": {"name": "delivery_task_value", "description": "Value representing the delivery task associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_description": {"name": "task_description", "description": "Detailed description or information about the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_due_date_at": {"name": "task_due_date_at", "description": "The date by which the task is expected to be completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "escalation": {"name": "escalation", "description": "Information about any escalation procedures or steps related to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_start": {"name": "expected_start", "description": "The expected start date or time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_follow_up_at": {"name": "task_follow_up_at", "description": "Timestamp of when follow up was applied to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_list": {"name": "group_list", "description": "List of groups associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "impact": {"name": "impact", "description": "Assessment of the impact that completing or not completing the task may have. This is the business loss and potential damage (for example, financial, customer, regulation, security, reputation, brand) caused by the incident", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "knowledge": {"name": "knowledge", "description": "Indication of whether the task is associated with knowledge or documentation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_link": {"name": "location_link", "description": "Link to the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_value": {"name": "location_value", "description": "Value representing the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_made_sla": {"name": "is_made_sla", "description": "Indicates whether the task was completed within the agreed-upon Service Level Agreement (SLA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_number": {"name": "task_number", "description": "Unique identifier or reference number assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_opened_at": {"name": "task_opened_at", "description": "Date and time when the task was initially opened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_by_link": {"name": "opened_by_link", "description": "Link to the user who initially opened the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_by_value": {"name": "opened_by_value", "description": "Value representing the user who initially opened the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_order": {"name": "task_order", "description": "Order or sequence number associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_link": {"name": "parent_link", "description": "Link to the parent task or record associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_value": {"name": "parent_value", "description": "Value representing the parent task or record associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Priority level assigned to the task. The priority field is automatically calculated based on the values of impact and urgency. This determines the sequence in which the record should be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reassignment_count": {"name": "reassignment_count", "description": "Count of how many times the task has been reassigned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rejection_goto_link": {"name": "rejection_goto_link", "description": "Link to the record or step to be followed in case of task rejection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rejection_goto_value": {"name": "rejection_goto_value", "description": "Value representing the record or step to be followed in case of task rejection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route_reason": {"name": "route_reason", "description": "Reason or criteria for routing the task to a particular user or group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_offering_link": {"name": "service_offering_link", "description": "Link to the service offering associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_offering_value": {"name": "service_offering_value", "description": "Value representing the service offering associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Brief or concise summary of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_due": {"name": "sla_due", "description": "Date and time by which the record is expected to meet the Service Level Agreement (SLA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_state": {"name": "task_state", "description": "Current state or status of the task (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_created_at": {"name": "task_created_at", "description": "Date and time when the task record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_updated_at": {"name": "task_updated_at", "description": "Date and time when the task record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_effective_number": {"name": "task_effective_number", "description": "Effective number or identifier associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_request_link": {"name": "universal_request_link", "description": "Link to the universal request associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_request_value": {"name": "universal_request_value", "description": "Value representing the universal request associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upon_approval": {"name": "upon_approval", "description": "Actions or steps to be taken upon the approval of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upon_reject": {"name": "upon_reject", "description": "Actions or steps to be taken upon the rejection of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgency": {"name": "urgency", "description": "Level of urgency associated with the record. Speed at which the business expects the record to be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "watch_list": {"name": "watch_list", "description": "List of users or groups who are monitoring or \"watching\" the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wf_activity_link": {"name": "wf_activity_link", "description": "Link to the workflow activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wf_activity_value": {"name": "wf_activity_value", "description": "Value representing the workflow activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_end": {"name": "work_end", "description": "Date and time when the work on the task is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_notes": {"name": "work_notes", "description": "Notes or comments recorded during the work on the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_notes_list": {"name": "work_notes_list", "description": "List of work notes recorded during the task's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_start": {"name": "work_start", "description": "Date and time when the work on the task is scheduled to start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.925693, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__task_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__task_base')),\n                staging_columns=get_task_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as {{ dbt.type_string() }}) as task_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as task_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as task_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        cast(active as {{ dbt.type_boolean() }}) as is_task_active,\n        activity_due,\n        additional_assignee_list,\n        approval,\n        approval_history,\n        approval_set,\n        assigned_to_link,\n        cast(assigned_to_value as {{ dbt.type_string() }}) as assigned_to_value,\n        assignment_group_link,\n        cast(assignment_group_value as {{ dbt.type_string() }}) as assignment_group_value,\n        business_duration,\n        business_service_link,\n        cast(business_service_value as {{ dbt.type_string() }}) as business_service_value,\n        calendar_duration,\n        close_notes,\n        closed_at as task_closed_at,\n        closed_by_link,\n        cast(closed_by_value as {{ dbt.type_string() }}) as closed_by_value,\n        cmdb_ci_link,\n        cast(cmdb_ci_value as {{ dbt.type_string() }}) as cmdb_ci_value,\n        comments,\n        comments_and_work_notes,\n        company_link,\n        cast(company_value as {{ dbt.type_string() }}) as company_value,\n        contact_type,\n        contract_link,\n        cast(contract_value as {{ dbt.type_string() }}) as contract_value,\n        correlation_display,\n        correlation_id,\n        delivery_plan_link,\n        cast(delivery_plan_value as {{ dbt.type_string() }}) as delivery_plan_value,\n        delivery_task_link,\n        cast(delivery_task_value as {{ dbt.type_string() }}) as delivery_task_value,\n        description as task_description,\n        cast ({{ dbt.date_trunc('day', 'due_date') }} as date)  as task_due_date_at,\n        escalation,\n        expected_start,\n        follow_up as task_follow_up_at,\n        group_list,\n        impact,\n        knowledge,\n        location_link,\n        cast(location_value as {{ dbt.type_string() }}) as location_value,\n        cast(made_sla as {{ dbt.type_boolean() }}) as is_made_sla,\n        number as task_number,\n        opened_at as task_opened_at,\n        opened_by_link,\n        cast(opened_by_value as {{ dbt.type_string() }}) as opened_by_value,\n        task_order, -- Renamed within the get_task_columns() macro.\n        parent_link,\n        cast(parent_value as {{ dbt.type_string() }}) as parent_value,\n        priority,\n        reassignment_count,\n        rejection_goto_link,\n        cast(rejection_goto_value as {{ dbt.type_string() }}) as rejection_goto_value,\n        route_reason,\n        service_offering_link,\n        cast(service_offering_value as {{ dbt.type_string() }}) as service_offering_value,\n        short_description,\n        sla_due,\n        state as task_state,\n        sys_class_name,\n        sys_created_by,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as {{ dbt.type_string() }}) as sys_domain_value,\n        sys_mod_count,\n        sys_updated_by,\n        task_effective_number,\n        universal_request_link,\n        cast(universal_request_value as {{ dbt.type_string() }}) as universal_request_value,\n        upon_approval,\n        upon_reject,\n        urgency,\n        watch_list,\n        wf_activity_link,\n        cast(wf_activity_value as {{ dbt.type_string() }}) as wf_activity_value,\n        work_end,\n        work_notes,\n        work_notes_list,\n        work_start\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__task_base", "package": null, "version": null}, {"name": "stg_servicenow__task_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_task_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.date_trunc"], "nodes": ["model.servicenow.stg_servicenow__task_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__task.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    activity_due\n    \n as \n    \n    activity_due\n    \n, \n    \n    \n    additional_assignee_list\n    \n as \n    \n    additional_assignee_list\n    \n, \n    \n    \n    approval\n    \n as \n    \n    approval\n    \n, \n    \n    \n    approval_history\n    \n as \n    \n    approval_history\n    \n, \n    \n    \n    approval_set\n    \n as \n    \n    approval_set\n    \n, \n    \n    \n    assigned_to_link\n    \n as \n    \n    assigned_to_link\n    \n, \n    \n    \n    assigned_to_value\n    \n as \n    \n    assigned_to_value\n    \n, \n    \n    \n    assignment_group_link\n    \n as \n    \n    assignment_group_link\n    \n, \n    \n    \n    assignment_group_value\n    \n as \n    \n    assignment_group_value\n    \n, \n    \n    \n    business_duration\n    \n as \n    \n    business_duration\n    \n, \n    \n    \n    business_service_link\n    \n as \n    \n    business_service_link\n    \n, \n    \n    \n    business_service_value\n    \n as \n    \n    business_service_value\n    \n, \n    \n    \n    calendar_duration\n    \n as \n    \n    calendar_duration\n    \n, \n    \n    \n    close_notes\n    \n as \n    \n    close_notes\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    closed_by_link\n    \n as \n    \n    closed_by_link\n    \n, \n    \n    \n    closed_by_value\n    \n as \n    \n    closed_by_value\n    \n, \n    \n    \n    cmdb_ci_link\n    \n as \n    \n    cmdb_ci_link\n    \n, \n    \n    \n    cmdb_ci_value\n    \n as \n    \n    cmdb_ci_value\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    comments_and_work_notes\n    \n as \n    \n    comments_and_work_notes\n    \n, \n    \n    \n    company_link\n    \n as \n    \n    company_link\n    \n, \n    \n    \n    company_value\n    \n as \n    \n    company_value\n    \n, \n    \n    \n    contact_type\n    \n as \n    \n    contact_type\n    \n, \n    \n    \n    contract_link\n    \n as \n    \n    contract_link\n    \n, \n    \n    \n    contract_value\n    \n as \n    \n    contract_value\n    \n, \n    \n    \n    correlation_display\n    \n as \n    \n    correlation_display\n    \n, \n    \n    \n    correlation_id\n    \n as \n    \n    correlation_id\n    \n, \n    \n    \n    delivery_plan_link\n    \n as \n    \n    delivery_plan_link\n    \n, \n    \n    \n    delivery_plan_value\n    \n as \n    \n    delivery_plan_value\n    \n, \n    \n    \n    delivery_task_link\n    \n as \n    \n    delivery_task_link\n    \n, \n    \n    \n    delivery_task_value\n    \n as \n    \n    delivery_task_value\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    escalation\n    \n as \n    \n    escalation\n    \n, \n    \n    \n    expected_start\n    \n as \n    \n    expected_start\n    \n, \n    \n    \n    follow_up\n    \n as \n    \n    follow_up\n    \n, \n    \n    \n    group_list\n    \n as \n    \n    group_list\n    \n, \n    \n    \n    impact\n    \n as \n    \n    impact\n    \n, \n    \n    \n    knowledge\n    \n as \n    \n    knowledge\n    \n, \n    \n    \n    location_link\n    \n as \n    \n    location_link\n    \n, \n    \n    \n    location_value\n    \n as \n    \n    location_value\n    \n, \n    \n    \n    made_sla\n    \n as \n    \n    made_sla\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    opened_at\n    \n as \n    \n    opened_at\n    \n, \n    \n    \n    opened_by_link\n    \n as \n    \n    opened_by_link\n    \n, \n    \n    \n    opened_by_value\n    \n as \n    \n    opened_by_value\n    \n, \n    \n    \n        \n            \n            `order`\n            \n        \n    \n as task_order , \n    \n    \n    parent_link\n    \n as \n    \n    parent_link\n    \n, \n    \n    \n    parent_value\n    \n as \n    \n    parent_value\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    reassignment_count\n    \n as \n    \n    reassignment_count\n    \n, \n    \n    \n    rejection_goto_link\n    \n as \n    \n    rejection_goto_link\n    \n, \n    \n    \n    rejection_goto_value\n    \n as \n    \n    rejection_goto_value\n    \n, \n    \n    \n    route_reason\n    \n as \n    \n    route_reason\n    \n, \n    \n    \n    service_offering_link\n    \n as \n    \n    service_offering_link\n    \n, \n    \n    \n    service_offering_value\n    \n as \n    \n    service_offering_value\n    \n, \n    \n    \n    short_description\n    \n as \n    \n    short_description\n    \n, \n    \n    \n    sla_due\n    \n as \n    \n    sla_due\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    sys_class_name\n    \n as \n    \n    sys_class_name\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_domain_link\n    \n as \n    \n    sys_domain_link\n    \n, \n    \n    \n    sys_domain_path\n    \n as \n    \n    sys_domain_path\n    \n, \n    \n    \n    sys_domain_value\n    \n as \n    \n    sys_domain_value\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    task_effective_number\n    \n as \n    \n    task_effective_number\n    \n, \n    \n    \n    universal_request_link\n    \n as \n    \n    universal_request_link\n    \n, \n    \n    \n    universal_request_value\n    \n as \n    \n    universal_request_value\n    \n, \n    \n    \n    upon_approval\n    \n as \n    \n    upon_approval\n    \n, \n    \n    \n    upon_reject\n    \n as \n    \n    upon_reject\n    \n, \n    \n    \n    urgency\n    \n as \n    \n    urgency\n    \n, \n    \n    \n    watch_list\n    \n as \n    \n    watch_list\n    \n, \n    \n    \n    wf_activity_link\n    \n as \n    \n    wf_activity_link\n    \n, \n    \n    \n    wf_activity_value\n    \n as \n    \n    wf_activity_value\n    \n, \n    \n    \n    work_end\n    \n as \n    \n    work_end\n    \n, \n    \n    \n    work_notes\n    \n as \n    \n    work_notes\n    \n, \n    \n    \n    work_notes_list\n    \n as \n    \n    work_notes_list\n    \n, \n    \n    \n    work_start\n    \n as \n    \n    work_start\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as string) as task_id,\n        cast(sys_created_on as timestamp) as task_created_at,\n        cast(sys_updated_on as timestamp) as task_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        cast(active as boolean) as is_task_active,\n        activity_due,\n        additional_assignee_list,\n        approval,\n        approval_history,\n        approval_set,\n        assigned_to_link,\n        cast(assigned_to_value as string) as assigned_to_value,\n        assignment_group_link,\n        cast(assignment_group_value as string) as assignment_group_value,\n        business_duration,\n        business_service_link,\n        cast(business_service_value as string) as business_service_value,\n        calendar_duration,\n        close_notes,\n        closed_at as task_closed_at,\n        closed_by_link,\n        cast(closed_by_value as string) as closed_by_value,\n        cmdb_ci_link,\n        cast(cmdb_ci_value as string) as cmdb_ci_value,\n        comments,\n        comments_and_work_notes,\n        company_link,\n        cast(company_value as string) as company_value,\n        contact_type,\n        contract_link,\n        cast(contract_value as string) as contract_value,\n        correlation_display,\n        correlation_id,\n        delivery_plan_link,\n        cast(delivery_plan_value as string) as delivery_plan_value,\n        delivery_task_link,\n        cast(delivery_task_value as string) as delivery_task_value,\n        description as task_description,\n        cast (timestamp_trunc(\n        cast(due_date as timestamp),\n        day\n    ) as date)  as task_due_date_at,\n        escalation,\n        expected_start,\n        follow_up as task_follow_up_at,\n        group_list,\n        impact,\n        knowledge,\n        location_link,\n        cast(location_value as string) as location_value,\n        cast(made_sla as boolean) as is_made_sla,\n        number as task_number,\n        opened_at as task_opened_at,\n        opened_by_link,\n        cast(opened_by_value as string) as opened_by_value,\n        task_order, -- Renamed within the get_task_columns() macro.\n        parent_link,\n        cast(parent_value as string) as parent_value,\n        priority,\n        reassignment_count,\n        rejection_goto_link,\n        cast(rejection_goto_value as string) as rejection_goto_value,\n        route_reason,\n        service_offering_link,\n        cast(service_offering_value as string) as service_offering_value,\n        short_description,\n        sla_due,\n        state as task_state,\n        sys_class_name,\n        sys_created_by,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as string) as sys_domain_value,\n        sys_mod_count,\n        sys_updated_by,\n        task_effective_number,\n        universal_request_link,\n        cast(universal_request_value as string) as universal_request_value,\n        upon_approval,\n        upon_reject,\n        urgency,\n        watch_list,\n        wf_activity_link,\n        cast(wf_activity_value as string) as wf_activity_value,\n        work_end,\n        work_notes,\n        work_notes_list,\n        work_start\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__cmdb_ci": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__cmdb_ci", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__cmdb_ci.sql", "original_file_path": "models/staging/stg_servicenow__cmdb_ci.sql", "unique_id": "model.servicenow.stg_servicenow__cmdb_ci", "fqn": ["servicenow", "staging", "stg_servicenow__cmdb_ci"], "alias": "stg_servicenow__cmdb_ci", "checksum": {"name": "sha256", "checksum": "ef6b5cce9b5038ea2b4583f224609225fd347c5e8d2f178834b7d29f1bcee6aa"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all records relating to CI(Configuration Item) tables in the CMDB (Configuration Management Database)", "columns": {"cmdb_ci_id": {"name": "cmdb_ci_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attributes": {"name": "attributes", "description": "Data elements which describe the characteristics of CIs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_link": {"name": "business_unit_link", "description": "Link to business unit. Business units usually comprise departments and are associated with a company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_value": {"name": "business_unit_value", "description": "The ID of the business unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_cc": {"name": "cost_cc", "description": "The cost center that the record belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_link": {"name": "managed_by_link", "description": "The link to the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_value": {"name": "managed_by_value", "description": "The ID of the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_link": {"name": "manufacturer_link", "description": "The link to the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_value": {"name": "manufacturer_value", "description": "The ID of the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_link": {"name": "model_id_link", "description": "The link to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_value": {"name": "model_id_value", "description": "The ID to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_number": {"name": "model_number", "description": "The number of the model related to the IC.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_name": {"name": "cmdb_ci_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_link": {"name": "owned_by_link", "description": "The link to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_value": {"name": "owned_by_value", "description": "The ID to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subcategory": {"name": "subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_path": {"name": "sys_class_path", "description": "Where a particular CI class is within the overall hierarchy of classes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_created_at": {"name": "cmdb_ci_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_updated_at": {"name": "cmdb_ci_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_link": {"name": "vendor_link", "description": "A link to the vendor or external entity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_value": {"name": "vendor_value", "description": "The name or identifier of the vendor or external entity linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unverified": {"name": "unverified", "description": "Boolean indicating if the change task is unverified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.9339688, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__cmdb_ci_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__cmdb_ci_base')),\n                staging_columns=get_cmdb_ci_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as cmdb_ci_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as cmdb_ci_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as cmdb_ci_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        attributes,\n        business_unit_link,\n        cast(business_unit_value as {{ dbt.type_string() }}) as business_unit_value,\n        category,\n        company_link,\n        cast(company_value as {{ dbt.type_string() }}) as company_value,\n        cost,\n        cost_cc,\n        cost_center_link,\n        cast(cost_center_value as {{ dbt.type_string() }}) as cost_center_value,\n        managed_by_link,\n        cast(managed_by_value as {{ dbt.type_string() }}) as managed_by_value,\n        manufacturer_link,\n        cast(manufacturer_value as {{ dbt.type_string() }}) as manufacturer_value,\n        model_id_link,\n        cast(model_id_value as {{ dbt.type_string() }}) as model_id_value,\n        model_number,\n        name as cmdb_ci_name,\n        owned_by_link,\n        cast(owned_by_value as {{ dbt.type_string() }}) as owned_by_value,\n        subcategory,\n        sys_class_name,\n        sys_class_path,\n        sys_created_by,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as {{ dbt.type_string() }}) as sys_domain_value,\n        sys_mod_count,\n        sys_updated_by,\n        unverified,\n        vendor_link,\n        cast(vendor_value as {{ dbt.type_string() }}) as vendor_value\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__cmdb_ci_base", "package": null, "version": null}, {"name": "stg_servicenow__cmdb_ci_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_cmdb_ci_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__cmdb_ci_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__cmdb_ci.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    attributes\n    \n as \n    \n    attributes\n    \n, \n    \n    \n    business_unit_link\n    \n as \n    \n    business_unit_link\n    \n, \n    \n    \n    business_unit_value\n    \n as \n    \n    business_unit_value\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    company_link\n    \n as \n    \n    company_link\n    \n, \n    \n    \n    company_value\n    \n as \n    \n    company_value\n    \n, \n    \n    \n    cost\n    \n as \n    \n    cost\n    \n, \n    \n    \n    cost_cc\n    \n as \n    \n    cost_cc\n    \n, \n    \n    \n    cost_center_link\n    \n as \n    \n    cost_center_link\n    \n, \n    \n    \n    cost_center_value\n    \n as \n    \n    cost_center_value\n    \n, \n    \n    \n    managed_by_link\n    \n as \n    \n    managed_by_link\n    \n, \n    \n    \n    managed_by_value\n    \n as \n    \n    managed_by_value\n    \n, \n    \n    \n    manufacturer_link\n    \n as \n    \n    manufacturer_link\n    \n, \n    \n    \n    manufacturer_value\n    \n as \n    \n    manufacturer_value\n    \n, \n    \n    \n    model_id_link\n    \n as \n    \n    model_id_link\n    \n, \n    \n    \n    model_id_value\n    \n as \n    \n    model_id_value\n    \n, \n    \n    \n    model_number\n    \n as \n    \n    model_number\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owned_by_link\n    \n as \n    \n    owned_by_link\n    \n, \n    \n    \n    owned_by_value\n    \n as \n    \n    owned_by_value\n    \n, \n    \n    \n    subcategory\n    \n as \n    \n    subcategory\n    \n, \n    \n    \n    sys_class_name\n    \n as \n    \n    sys_class_name\n    \n, \n    \n    \n    sys_class_path\n    \n as \n    \n    sys_class_path\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_domain_link\n    \n as \n    \n    sys_domain_link\n    \n, \n    \n    \n    sys_domain_path\n    \n as \n    \n    sys_domain_path\n    \n, \n    \n    \n    sys_domain_value\n    \n as \n    \n    sys_domain_value\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    unverified\n    \n as \n    \n    unverified\n    \n, \n    \n    \n    vendor_link\n    \n as \n    \n    vendor_link\n    \n, \n    \n    \n    vendor_value\n    \n as \n    \n    vendor_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as cmdb_ci_id,\n        cast(sys_created_on as timestamp) as cmdb_ci_created_at,\n        cast(sys_updated_on as timestamp) as cmdb_ci_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        attributes,\n        business_unit_link,\n        cast(business_unit_value as string) as business_unit_value,\n        category,\n        company_link,\n        cast(company_value as string) as company_value,\n        cost,\n        cost_cc,\n        cost_center_link,\n        cast(cost_center_value as string) as cost_center_value,\n        managed_by_link,\n        cast(managed_by_value as string) as managed_by_value,\n        manufacturer_link,\n        cast(manufacturer_value as string) as manufacturer_value,\n        model_id_link,\n        cast(model_id_value as string) as model_id_value,\n        model_number,\n        name as cmdb_ci_name,\n        owned_by_link,\n        cast(owned_by_value as string) as owned_by_value,\n        subcategory,\n        sys_class_name,\n        sys_class_path,\n        sys_created_by,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as string) as sys_domain_value,\n        sys_mod_count,\n        sys_updated_by,\n        unverified,\n        vendor_link,\n        cast(vendor_value as string) as vendor_value\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_role": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_role", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__sys_user_role.sql", "original_file_path": "models/staging/stg_servicenow__sys_user_role.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_role", "fqn": ["servicenow", "staging", "stg_servicenow__sys_user_role"], "alias": "stg_servicenow__sys_user_role", "checksum": {"name": "sha256", "checksum": "0ed7bca9a3690d17860f800cb15fd2754f3cafed12a18a1cf624a3c7078055f9"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information about roles that can belong to a user. When a role is added to a user, a new record is created here. A user\u2019s role can be directly granted, inherited from other roles, or inherited from groups.", "columns": {"sys_user_role_id": {"name": "sys_user_role_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_name": {"name": "sys_user_role_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignable_by_link": {"name": "assignable_by_link", "description": "The link to the entity that can assign this role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignable_by_value": {"name": "assignable_by_value", "description": "The value of the entity that can assign this role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "can_delegate": {"name": "can_delegate", "description": "Boolean of whether this role can delegate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_description": {"name": "sys_user_role_description", "description": "Detailed description or information about the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_elevated_privilege": {"name": "is_elevated_privilege", "description": "Boolean of whether this role is an elevated privilege.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_grantable": {"name": "is_grantable", "description": "Boolean of whether this role is grantable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_roles": {"name": "includes_roles", "description": "The roles included in this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requires_subscription": {"name": "requires_subscription", "description": "If this role requires a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scoped_admin": {"name": "scoped_admin", "description": "Boolean of whether the role was scoped administration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "suffix": {"name": "suffix", "description": "Suffix of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_created_at": {"name": "sys_user_role_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_updated_at": {"name": "sys_user_role_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.9374468, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_role`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_role_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__sys_user_role_base')),\n                staging_columns=get_sys_user_role_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as sys_user_role_id,\n        name as sys_user_role_name,\n        description as sys_user_role_description,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as sys_user_role_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as sys_user_role_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        assignable_by_link,\n        assignable_by_value,\n        can_delegate,\n        elevated_privilege as is_elevated_privilege,\n        grantable as is_grantable,\n        includes_roles,\n        requires_subscription,\n        scoped_admin,\n        suffix\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_role_base", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_role_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_sys_user_role_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__sys_user_role_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__sys_user_role.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_role_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    assignable_by_link\n    \n as \n    \n    assignable_by_link\n    \n, \n    \n    \n    assignable_by_value\n    \n as \n    \n    assignable_by_value\n    \n, \n    \n    \n    can_delegate\n    \n as \n    \n    can_delegate\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    elevated_privilege\n    \n as \n    \n    elevated_privilege\n    \n, \n    \n    \n    grantable\n    \n as \n    \n    grantable\n    \n, \n    \n    \n    includes_roles\n    \n as \n    \n    includes_roles\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    requires_subscription\n    \n as \n    \n    requires_subscription\n    \n, \n    \n    \n    scoped_admin\n    \n as \n    \n    scoped_admin\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as sys_user_role_id,\n        name as sys_user_role_name,\n        description as sys_user_role_description,\n        cast(sys_created_on as timestamp) as sys_user_role_created_at,\n        cast(sys_updated_on as timestamp) as sys_user_role_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        assignable_by_link,\n        assignable_by_value,\n        can_delegate,\n        elevated_privilege as is_elevated_privilege,\n        grantable as is_grantable,\n        includes_roles,\n        requires_subscription,\n        scoped_admin,\n        suffix\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_grmember": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_grmember", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__sys_user_grmember.sql", "original_file_path": "models/staging/stg_servicenow__sys_user_grmember.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_grmember", "fqn": ["servicenow", "staging", "stg_servicenow__sys_user_grmember"], "alias": "stg_servicenow__sys_user_grmember", "checksum": {"name": "sha256", "checksum": "e830c1389332145c868b0380f067dedb041e1858004b149ff9b91a64c9cd3a9e"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information about a given user and given group. This relates the sys_user_group table to the sys_user table.", "columns": {"sys_user_grmember_id": {"name": "sys_user_grmember_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_link": {"name": "group_link", "description": "Link to the group in the sys_user_group table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_id": {"name": "sys_user_group_id", "description": "The sys_id associated with the group in the sys_user_group table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_grmember_created_at": {"name": "sys_user_grmember_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_grmember_updated_at": {"name": "sys_user_grmember_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_link": {"name": "user_link", "description": "Link to the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_id": {"name": "sys_user_id", "description": "The sys_id associated with the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.938897, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_grmember`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_grmember_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__sys_user_grmember_base')),\n                staging_columns=get_sys_user_grmember_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as sys_user_grmember_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as sys_user_grmember_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as sys_user_grmember_updated_at,\n        sys_created_by,\n        sys_updated_by,\n        _fivetran_deleted,\n        _fivetran_synced,\n        group_link,\n        cast(group_value as {{dbt.type_string() }}) as sys_user_group_id,\n        sys_mod_count,\n        user_link,\n        cast(user_value as {{dbt.type_string() }}) as sys_user_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_grmember_base", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_grmember_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_sys_user_grmember_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__sys_user_grmember_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__sys_user_grmember.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_grmember_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    group_link\n    \n as \n    \n    group_link\n    \n, \n    \n    \n    group_value\n    \n as \n    \n    group_value\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    user_link\n    \n as \n    \n    user_link\n    \n, \n    \n    \n    user_value\n    \n as \n    \n    user_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as sys_user_grmember_id,\n        cast(sys_created_on as timestamp) as sys_user_grmember_created_at,\n        cast(sys_updated_on as timestamp) as sys_user_grmember_updated_at,\n        sys_created_by,\n        sys_updated_by,\n        _fivetran_deleted,\n        _fivetran_synced,\n        group_link,\n        cast(group_value as string) as sys_user_group_id,\n        sys_mod_count,\n        user_link,\n        cast(user_value as string) as sys_user_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__cmdb_ci_service": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__cmdb_ci_service", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__cmdb_ci_service.sql", "original_file_path": "models/staging/stg_servicenow__cmdb_ci_service.sql", "unique_id": "model.servicenow.stg_servicenow__cmdb_ci_service", "fqn": ["servicenow", "staging", "stg_servicenow__cmdb_ci_service"], "alias": "stg_servicenow__cmdb_ci_service", "checksum": {"name": "sha256", "checksum": "eb590fb7f0a33356d624c9614ea2a000ad095670ff9e936fc624d6a02698a537"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all records related to CMDB CI service areas.", "columns": {"cmdb_ci_service_id": {"name": "cmdb_ci_service_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attributes": {"name": "attributes", "description": "Data elements which describe the characteristics of CIs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_link": {"name": "business_unit_link", "description": "Link to business unit. Business units usually comprise departments and are associated with a company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_value": {"name": "business_unit_value", "description": "The ID of the business unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_cc": {"name": "cost_cc", "description": "The cost center that the record belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_link": {"name": "managed_by_link", "description": "The link to the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_value": {"name": "managed_by_value", "description": "The ID of the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_link": {"name": "manufacturer_link", "description": "The link to the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_value": {"name": "manufacturer_value", "description": "The ID of the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_link": {"name": "model_id_link", "description": "The link to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_value": {"name": "model_id_value", "description": "The ID to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_number": {"name": "model_number", "description": "The number of the model related to the IC.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_service_name": {"name": "cmdb_ci_service_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_link": {"name": "owned_by_link", "description": "The link to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_value": {"name": "owned_by_value", "description": "The ID to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_classification": {"name": "service_classification", "description": "The type of service. Each type contains groups of CI services that share attributes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_level_requirement": {"name": "service_level_requirement", "description": "Requirement specified to maintain service commitments between parties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Brief or concise summary of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_link": {"name": "sla_link", "description": "Link to the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_value": {"name": "sla_value", "description": "Value representing the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_service_state": {"name": "cmdb_ci_service_state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subcategory": {"name": "subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_path": {"name": "sys_class_path", "description": "Where a particular CI class is within the overall hierarchy of classes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_service_created_at": {"name": "cmdb_ci_service_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_service_updated_at": {"name": "cmdb_ci_service_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_link": {"name": "vendor_link", "description": "A link to the vendor or external entity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_value": {"name": "vendor_value", "description": "The name or identifier of the vendor or external entity linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monitor": {"name": "monitor", "description": "Monitor in relation to the cmdb_ci_service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.9352808, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_service`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__cmdb_ci_service_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__cmdb_ci_service_base')),\n                staging_columns=get_cmdb_ci_service_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        source_relation,\n        cast(sys_id as {{ dbt.type_string() }}) as cmdb_ci_service_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as cmdb_ci_service_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as cmdb_ci_service_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        attributes,\n        business_unit_link,\n        cast(business_unit_value as {{ dbt.type_string() }}) as business_unit_value,\n        category,\n        company_link,\n        cast(company_value as {{ dbt.type_string() }}) as company_value,\n        cost,\n        cost_cc,\n        cost_center_link,\n        cast(cost_center_value as {{ dbt.type_string() }}) as cost_center_value,\n        managed_by_link,\n        cast(managed_by_value as {{ dbt.type_string() }}) as managed_by_value,\n        manufacturer_link,\n        cast(manufacturer_value as {{ dbt.type_string() }}) as manufacturer_value,\n        model_id_link,\n        cast(model_id_value as {{ dbt.type_string() }}) as model_id_value,\n        model_number,\n        monitor,\n        name as cmdb_ci_service_name,\n        owned_by_link,\n        cast(owned_by_value as {{ dbt.type_string() }}) as owned_by_value,\n        service_classification,\n        service_level_requirement,\n        short_description,\n        sla_link,\n        cast(sla_value as {{ dbt.type_string() }}) as sla_value,\n        state as cmdb_ci_service_state,\n        subcategory,\n        sys_class_name,\n        sys_class_path,\n        sys_created_by,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as {{ dbt.type_string() }}) as sys_domain_value,\n        sys_mod_count,\n        sys_updated_by,\n        vendor_link,\n        cast(vendor_value as {{ dbt.type_string() }}) as vendor_value\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__cmdb_ci_service_base", "package": null, "version": null}, {"name": "stg_servicenow__cmdb_ci_service_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_cmdb_ci_service_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__cmdb_ci_service_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__cmdb_ci_service.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_service_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    attributes\n    \n as \n    \n    attributes\n    \n, \n    \n    \n    business_unit_link\n    \n as \n    \n    business_unit_link\n    \n, \n    \n    \n    business_unit_value\n    \n as \n    \n    business_unit_value\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    company_link\n    \n as \n    \n    company_link\n    \n, \n    \n    \n    company_value\n    \n as \n    \n    company_value\n    \n, \n    \n    \n    cost\n    \n as \n    \n    cost\n    \n, \n    \n    \n    cost_cc\n    \n as \n    \n    cost_cc\n    \n, \n    \n    \n    cost_center_link\n    \n as \n    \n    cost_center_link\n    \n, \n    \n    \n    cost_center_value\n    \n as \n    \n    cost_center_value\n    \n, \n    \n    \n    managed_by_link\n    \n as \n    \n    managed_by_link\n    \n, \n    \n    \n    managed_by_value\n    \n as \n    \n    managed_by_value\n    \n, \n    \n    \n    manufacturer_link\n    \n as \n    \n    manufacturer_link\n    \n, \n    \n    \n    manufacturer_value\n    \n as \n    \n    manufacturer_value\n    \n, \n    \n    \n    model_id_link\n    \n as \n    \n    model_id_link\n    \n, \n    \n    \n    model_id_value\n    \n as \n    \n    model_id_value\n    \n, \n    \n    \n    model_number\n    \n as \n    \n    model_number\n    \n, \n    \n    \n    monitor\n    \n as \n    \n    monitor\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owned_by_link\n    \n as \n    \n    owned_by_link\n    \n, \n    \n    \n    owned_by_value\n    \n as \n    \n    owned_by_value\n    \n, \n    \n    \n    service_classification\n    \n as \n    \n    service_classification\n    \n, \n    \n    \n    service_level_requirement\n    \n as \n    \n    service_level_requirement\n    \n, \n    \n    \n    service_owner_delegate_link\n    \n as \n    \n    service_owner_delegate_link\n    \n, \n    \n    \n    service_owner_delegate_value\n    \n as \n    \n    service_owner_delegate_value\n    \n, \n    \n    \n    short_description\n    \n as \n    \n    short_description\n    \n, \n    \n    \n    sla_link\n    \n as \n    \n    sla_link\n    \n, \n    \n    \n    sla_value\n    \n as \n    \n    sla_value\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    subcategory\n    \n as \n    \n    subcategory\n    \n, \n    \n    \n    sys_class_name\n    \n as \n    \n    sys_class_name\n    \n, \n    \n    \n    sys_class_path\n    \n as \n    \n    sys_class_path\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_domain_link\n    \n as \n    \n    sys_domain_link\n    \n, \n    \n    \n    sys_domain_path\n    \n as \n    \n    sys_domain_path\n    \n, \n    \n    \n    sys_domain_value\n    \n as \n    \n    sys_domain_value\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    vendor_link\n    \n as \n    \n    vendor_link\n    \n, \n    \n    \n    vendor_value\n    \n as \n    \n    vendor_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        source_relation,\n        cast(sys_id as string) as cmdb_ci_service_id,\n        cast(sys_created_on as timestamp) as cmdb_ci_service_created_at,\n        cast(sys_updated_on as timestamp) as cmdb_ci_service_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        attributes,\n        business_unit_link,\n        cast(business_unit_value as string) as business_unit_value,\n        category,\n        company_link,\n        cast(company_value as string) as company_value,\n        cost,\n        cost_cc,\n        cost_center_link,\n        cast(cost_center_value as string) as cost_center_value,\n        managed_by_link,\n        cast(managed_by_value as string) as managed_by_value,\n        manufacturer_link,\n        cast(manufacturer_value as string) as manufacturer_value,\n        model_id_link,\n        cast(model_id_value as string) as model_id_value,\n        model_number,\n        monitor,\n        name as cmdb_ci_service_name,\n        owned_by_link,\n        cast(owned_by_value as string) as owned_by_value,\n        service_classification,\n        service_level_requirement,\n        short_description,\n        sla_link,\n        cast(sla_value as string) as sla_value,\n        state as cmdb_ci_service_state,\n        subcategory,\n        sys_class_name,\n        sys_class_path,\n        sys_created_by,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as string) as sys_domain_value,\n        sys_mod_count,\n        sys_updated_by,\n        vendor_link,\n        cast(vendor_value as string) as vendor_value\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__change_task": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__change_task", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__change_task.sql", "original_file_path": "models/staging/stg_servicenow__change_task.sql", "unique_id": "model.servicenow.stg_servicenow__change_task", "fqn": ["servicenow", "staging", "stg_servicenow__change_task"], "alias": "stg_servicenow__change_task", "checksum": {"name": "sha256", "checksum": "ee8c20ef1111a64f906fb4301baa4cc1a3ef36f428556bec7ce3c3eb1ee7f6c4"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information related to change tasks.", "columns": {"change_task_id": {"name": "change_task_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_link": {"name": "change_request_link", "description": "A link to the change request record associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_value": {"name": "change_request_value", "description": "The unique identifier or name associated with the change request record linked to the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_type": {"name": "change_task_type", "description": "The type or category of the task associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_close_code": {"name": "change_task_close_code", "description": "The code or identifier associated with the closure or resolution of the change task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_created_from": {"name": "change_task_created_from", "description": "Information about the source or origin of the current record, indicating how it was created or generated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_on_hold": {"name": "is_change_on_hold", "description": "Indicates whether the change task is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_on_hold_reason": {"name": "change_on_hold_reason", "description": "The reason or rationale for placing the associated record on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_planned_end_date": {"name": "change_task_planned_end_date", "description": "The planned or scheduled end date for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_planned_start_date": {"name": "change_task_planned_start_date", "description": "The planned or scheduled start date for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_created_at": {"name": "change_task_created_at", "description": "Date and time when the change task record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_updated_at": {"name": "change_task_updated_at", "description": "Date and time when the change task record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.9307048, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__change_task_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__change_task_base')),\n                staging_columns=get_change_task_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as change_task_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as change_task_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as change_task_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        change_request_link,\n        cast(change_request_value as {{ dbt.type_string() }}) as change_request_value,\n        change_task_type,\n        close_code as change_task_close_code,\n        created_from as change_task_created_from,\n        on_hold as is_change_on_hold,\n        on_hold_reason as change_on_hold_reason,\n        planned_end_date as change_task_planned_end_date,\n        planned_start_date as change_task_planned_start_date\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__change_task_base", "package": null, "version": null}, {"name": "stg_servicenow__change_task_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_change_task_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__change_task_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__change_task.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    change_request_link\n    \n as \n    \n    change_request_link\n    \n, \n    \n    \n    change_request_value\n    \n as \n    \n    change_request_value\n    \n, \n    \n    \n    change_task_type\n    \n as \n    \n    change_task_type\n    \n, \n    \n    \n    close_code\n    \n as \n    \n    close_code\n    \n, \n    \n    \n    created_from\n    \n as \n    \n    created_from\n    \n, \n    \n    \n    on_hold\n    \n as \n    \n    on_hold\n    \n, \n    \n    \n    on_hold_reason\n    \n as \n    \n    on_hold_reason\n    \n, \n    \n    \n    planned_end_date\n    \n as \n    \n    planned_end_date\n    \n, \n    \n    \n    planned_start_date\n    \n as \n    \n    planned_start_date\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as change_task_id,\n        cast(sys_created_on as timestamp) as change_task_created_at,\n        cast(sys_updated_on as timestamp) as change_task_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        change_request_link,\n        cast(change_request_value as string) as change_request_value,\n        change_task_type,\n        close_code as change_task_close_code,\n        created_from as change_task_created_from,\n        on_hold as is_change_on_hold,\n        on_hold_reason as change_on_hold_reason,\n        planned_end_date as change_task_planned_end_date,\n        planned_start_date as change_task_planned_start_date\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_group": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_group", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__sys_user_group.sql", "original_file_path": "models/staging/stg_servicenow__sys_user_group.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_group", "fqn": ["servicenow", "staging", "stg_servicenow__sys_user_group"], "alias": "stg_servicenow__sys_user_group", "checksum": {"name": "sha256", "checksum": "4d354f12db1ecfbf11ec1bcca327258e69a77588fcae70893478f44a6b4a76fa"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information related to user groups.", "columns": {"sys_user_group_id": {"name": "sys_user_group_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Flag indicating whether the record is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_assignee_link": {"name": "default_assignee_link", "description": "Link to the user that is the default assignee for this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_assignee_value": {"name": "default_assignee_value", "description": "ID of the user that is the default assignee for this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_description": {"name": "sys_user_group_description", "description": "Detailed description or information about the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_email": {"name": "sys_user_group_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_manager": {"name": "exclude_manager", "description": "Boolean of whether the group manager receives email notifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "include_members": {"name": "include_members", "description": "Boolean of whether the group members receive individual emails when someone sends an email to the Group Email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_link": {"name": "manager_link", "description": "A link to the user's manager or supervisor in the organizational hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_value": {"name": "manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_name": {"name": "sys_user_group_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_link": {"name": "parent_link", "description": "Link to the other group of which this group is a member. If a group has a parent, the child group inherits the roles of the parent group. The members of the child group are not members of the parent group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_value": {"name": "parent_value", "description": "ID of the other group of which this group is a member. If a group has a parent, the child group inherits the roles of the parent group. The members of the child group are not members of the parent group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_roles": {"name": "sys_user_group_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source or origin of the user's or user group's profile information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_created_at": {"name": "sys_user_group_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_group_updated_at": {"name": "sys_user_group_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type or category regarding the current record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.936362, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_group_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__sys_user_group_base')),\n                staging_columns=get_sys_user_group_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as sys_user_group_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as sys_user_group_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as sys_user_group_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        cost_center_link,\n        cast(cost_center_value as {{ dbt.type_string() }}) as cost_center_value,\n        default_assignee_link,\n        cast(default_assignee_value as {{ dbt.type_string() }}) as default_assignee_value,\n        description as sys_user_group_description,\n        email as sys_user_group_email,\n        exclude_manager,\n        include_members,\n        manager_link,\n        cast(manager_value as {{ dbt.type_string() }}) as manager_value,\n        name as sys_user_group_name,\n        parent_link,\n        cast(parent_value as {{ dbt.type_string() }}) as parent_value,\n        roles as sys_user_group_roles,\n        source,\n        sys_created_by,\n        sys_mod_count,\n        sys_updated_by,\n        type\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_group_base", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_group_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_sys_user_group_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__sys_user_group_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__sys_user_group.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    cost_center_link\n    \n as \n    \n    cost_center_link\n    \n, \n    \n    \n    cost_center_value\n    \n as \n    \n    cost_center_value\n    \n, \n    \n    \n    default_assignee_link\n    \n as \n    \n    default_assignee_link\n    \n, \n    \n    \n    default_assignee_value\n    \n as \n    \n    default_assignee_value\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    exclude_manager\n    \n as \n    \n    exclude_manager\n    \n, \n    \n    \n    include_members\n    \n as \n    \n    include_members\n    \n, \n    \n    \n    manager_link\n    \n as \n    \n    manager_link\n    \n, \n    \n    \n    manager_value\n    \n as \n    \n    manager_value\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_link\n    \n as \n    \n    parent_link\n    \n, \n    \n    \n    parent_value\n    \n as \n    \n    parent_value\n    \n, \n    \n    \n    roles\n    \n as \n    \n    roles\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        source_relation, \n        cast(sys_id as string) as sys_user_group_id,\n        cast(sys_created_on as timestamp) as sys_user_group_created_at,\n        cast(sys_updated_on as timestamp) as sys_user_group_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        cost_center_link,\n        cast(cost_center_value as string) as cost_center_value,\n        default_assignee_link,\n        cast(default_assignee_value as string) as default_assignee_value,\n        description as sys_user_group_description,\n        email as sys_user_group_email,\n        exclude_manager,\n        include_members,\n        manager_link,\n        cast(manager_value as string) as manager_value,\n        name as sys_user_group_name,\n        parent_link,\n        cast(parent_value as string) as parent_value,\n        roles as sys_user_group_roles,\n        source,\n        sys_created_by,\n        sys_mod_count,\n        sys_updated_by,\n        type\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_has_role": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_has_role", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__sys_user_has_role.sql", "original_file_path": "models/staging/stg_servicenow__sys_user_has_role.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_has_role", "fqn": ["servicenow", "staging", "stg_servicenow__sys_user_has_role"], "alias": "stg_servicenow__sys_user_has_role", "checksum": {"name": "sha256", "checksum": "f1d12cdbf3c12ef5ec39a7c494c6dfd6158968cbddb9535a6821a645b0bb8dcd"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information about each unique user and role combination. When a role is added to a user, a new record is created here. This relates the sys_user table with the sys_user_role table.", "columns": {"sys_user_has_role_id": {"name": "sys_user_has_role_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "granted_by_link": {"name": "granted_by_link", "description": "The link to the entity that granted this.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "granted_by_value": {"name": "granted_by_value", "description": "The value of the entity that granted this.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_instance_link": {"name": "included_in_role_instance_link", "description": "The link to the role instance included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_instance_value": {"name": "included_in_role_instance_value", "description": "The value of the role instance included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_link": {"name": "included_in_role_link", "description": "The link to the role included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_value": {"name": "included_in_role_value", "description": "The value of the role included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inh_count": {"name": "inh_count", "description": "Count of inherited roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inh_map": {"name": "inh_map", "description": "Mapping of inherited roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inherited": {"name": "inherited", "description": "Boolean of whether the role is inherited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "role_link": {"name": "role_link", "description": "Link to the role in the sys_user_role table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_role_id": {"name": "sys_user_role_id", "description": "The sys_id associated with the role in the sys_user_role table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_has_role_state": {"name": "sys_user_has_role_state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_has_role_created_at": {"name": "sys_user_has_role_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_has_role_updated_at": {"name": "sys_user_has_role_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_link": {"name": "user_link", "description": "Link to the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_id": {"name": "sys_user_id", "description": "The sys_id associated with the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.938258, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_has_role`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_has_role_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__sys_user_has_role_base')),\n                staging_columns=get_sys_user_has_role_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as sys_user_has_role_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as sys_user_has_role_created_at,\n        sys_created_by,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as sys_user_has_role_updated_at,\n        sys_updated_by,\n        user_link,\n        cast(user_value as {{ dbt.type_string() }}) as sys_user_id, \n        role_link,\n        cast(role_value as {{ dbt.type_string() }}) as sys_user_role_id,\n        _fivetran_deleted,\n        _fivetran_synced,\n        granted_by_link,\n        granted_by_value,\n        included_in_role_instance_link,\n        included_in_role_instance_value,\n        included_in_role_link,\n        included_in_role_value,\n        inh_count,\n        inh_map,\n        inherited,\n        state as sys_user_has_role_state,\n        sys_mod_count\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_has_role_base", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_has_role_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_sys_user_has_role_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__sys_user_has_role_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__sys_user_has_role.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_has_role_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    granted_by_link\n    \n as \n    \n    granted_by_link\n    \n, \n    \n    \n    granted_by_value\n    \n as \n    \n    granted_by_value\n    \n, \n    \n    \n    included_in_role_instance_link\n    \n as \n    \n    included_in_role_instance_link\n    \n, \n    \n    \n    included_in_role_instance_value\n    \n as \n    \n    included_in_role_instance_value\n    \n, \n    \n    \n    included_in_role_link\n    \n as \n    \n    included_in_role_link\n    \n, \n    \n    \n    included_in_role_value\n    \n as \n    \n    included_in_role_value\n    \n, \n    \n    \n    inh_count\n    \n as \n    \n    inh_count\n    \n, \n    \n    \n    inh_map\n    \n as \n    \n    inh_map\n    \n, \n    \n    \n    inherited\n    \n as \n    \n    inherited\n    \n, \n    \n    \n    role_link\n    \n as \n    \n    role_link\n    \n, \n    \n    \n    role_value\n    \n as \n    \n    role_value\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    user_link\n    \n as \n    \n    user_link\n    \n, \n    \n    \n    user_value\n    \n as \n    \n    user_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as sys_user_has_role_id,\n        cast(sys_created_on as timestamp) as sys_user_has_role_created_at,\n        sys_created_by,\n        cast(sys_updated_on as timestamp) as sys_user_has_role_updated_at,\n        sys_updated_by,\n        user_link,\n        cast(user_value as string) as sys_user_id, \n        role_link,\n        cast(role_value as string) as sys_user_role_id,\n        _fivetran_deleted,\n        _fivetran_synced,\n        granted_by_link,\n        granted_by_value,\n        included_in_role_instance_link,\n        included_in_role_instance_value,\n        included_in_role_link,\n        included_in_role_value,\n        inh_count,\n        inh_map,\n        inherited,\n        state as sys_user_has_role_state,\n        sys_mod_count\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__incident": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__incident", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__incident.sql", "original_file_path": "models/staging/stg_servicenow__incident.sql", "unique_id": "model.servicenow.stg_servicenow__incident", "fqn": ["servicenow", "staging", "stg_servicenow__incident"], "alias": "stg_servicenow__incident", "checksum": {"name": "sha256", "checksum": "133f4c56648b92eac640dc9079e252040d45cedad8ad42f68e36355eedad9e1a"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information related to incidents.", "columns": {"incident_id": {"name": "incident_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_impact": {"name": "business_impact", "description": "Information about the impact of the issue on business operations or services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_stc": {"name": "business_stc", "description": "The business service that is impacted by the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_stc": {"name": "calendar_stc", "description": "The calendar or schedule associated with the business service impacted by the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_id_link": {"name": "caller_id_link", "description": "A link to the person or entity identified as the caller or reporter of the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_id_value": {"name": "caller_id_value", "description": "The name or identifier of the person or entity identified as the caller or reporter of the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_category": {"name": "incident_category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_cause": {"name": "incident_cause", "description": "A description or explanation of the root cause of the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_link": {"name": "caused_by_link", "description": "A link to the record or entity that caused or triggered the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_value": {"name": "caused_by_value", "description": "The name or identifier of the record or entity that caused or triggered the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_incidents": {"name": "child_incidents", "description": "The number of incidents that are identified as child incidents linked to the current incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_code": {"name": "close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hold_reason": {"name": "hold_reason", "description": "The reason or rationale for placing the issue or incident on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_state": {"name": "incident_state", "description": "The current state or status of the incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notify": {"name": "notify", "description": "Indicates whether notifications or alerts have been configured for the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin_id_link": {"name": "origin_id_link", "description": "A link to the original or source record from which the current record originated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin_id_value": {"name": "origin_id_value", "description": "The unique identifier or name associated with the original or source record linked to the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_incident_link": {"name": "parent_incident_link", "description": "A link to the parent incident record, indicating the incident from which the current incident is derived or related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_incident_value": {"name": "parent_incident_value", "description": "The unique identifier or name associated with the parent incident record linked to the current incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_id_link": {"name": "problem_id_link", "description": "A link to the problem record associated with the current issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_id_value": {"name": "problem_id_value", "description": "The unique identifier or name associated with the problem record linked to the current issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_reopened_time": {"name": "incident_reopened_time", "description": "The timestamp indicating when the issue or incident was reopened after being previously resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_resolved_at": {"name": "incident_resolved_at", "description": "The timestamp indicating when the issue was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_link": {"name": "resolved_by_link", "description": "A link to the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_value": {"name": "resolved_by_value", "description": "The name or identifier of the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_link": {"name": "rfc_link", "description": "A link to the Request for Change (RFC) associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_value": {"name": "rfc_value", "description": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_severity": {"name": "incident_severity", "description": "The level of impact or seriousness assigned to the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_subcategory": {"name": "incident_subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_created_at": {"name": "incident_created_at", "description": "Date and time when the incident record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_updated_at": {"name": "incident_updated_at", "description": "Date and time when the incident record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.930047, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__incident`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__incident_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__incident_base')),\n                staging_columns=get_incident_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as incident_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as incident_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as incident_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        business_impact,\n        business_stc,\n        calendar_stc,\n        caller_id_link,\n        cast(caller_id_value as {{ dbt.type_string() }}) as caller_id_value,\n        category as incident_category,\n        cause as incident_cause,\n        caused_by_link,\n        cast(caused_by_value as {{ dbt.type_string() }}) as caused_by_value,\n        child_incidents,\n        close_code,\n        hold_reason,\n        incident_state,\n        notify,\n        origin_id_link,\n        cast(origin_id_value as {{ dbt.type_string() }}) as origin_id_value,\n        parent_incident_link,\n        cast(parent_incident_value as {{ dbt.type_string() }}) as parent_incident_value,\n        problem_id_link,\n        cast(problem_id_value as {{ dbt.type_string() }}) as problem_id_value,\n        reopen_count,\n        reopened_by_link,\n        cast(reopened_by_value as {{ dbt.type_string() }}) as reopened_by_value,\n        reopened_time as incident_reopened_time,\n        cast(resolved_at as {{ dbt.type_timestamp() }}) as incident_resolved_at,\n        resolved_by_link,\n        cast(resolved_by_value as {{ dbt.type_string() }}) as resolved_by_value,\n        rfc_link,\n        cast(rfc_value as {{ dbt.type_string() }}) as rfc_value,\n        severity as incident_severity,\n        subcategory as incident_subcategory\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__incident_base", "package": null, "version": null}, {"name": "stg_servicenow__incident_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_incident_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__incident_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__incident.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__incident_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_impact\n    \n as \n    \n    business_impact\n    \n, \n    \n    \n    business_stc\n    \n as \n    \n    business_stc\n    \n, \n    \n    \n    calendar_stc\n    \n as \n    \n    calendar_stc\n    \n, \n    \n    \n    caller_id_link\n    \n as \n    \n    caller_id_link\n    \n, \n    \n    \n    caller_id_value\n    \n as \n    \n    caller_id_value\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    cause\n    \n as \n    \n    cause\n    \n, \n    \n    \n    caused_by_link\n    \n as \n    \n    caused_by_link\n    \n, \n    \n    \n    caused_by_value\n    \n as \n    \n    caused_by_value\n    \n, \n    \n    \n    child_incidents\n    \n as \n    \n    child_incidents\n    \n, \n    \n    \n    close_code\n    \n as \n    \n    close_code\n    \n, \n    \n    \n    hold_reason\n    \n as \n    \n    hold_reason\n    \n, \n    \n    \n    incident_state\n    \n as \n    \n    incident_state\n    \n, \n    \n    \n    notify\n    \n as \n    \n    notify\n    \n, \n    \n    \n    origin_id_link\n    \n as \n    \n    origin_id_link\n    \n, \n    \n    \n    origin_id_value\n    \n as \n    \n    origin_id_value\n    \n, \n    \n    \n    parent_incident_link\n    \n as \n    \n    parent_incident_link\n    \n, \n    \n    \n    parent_incident_value\n    \n as \n    \n    parent_incident_value\n    \n, \n    \n    \n    problem_id_link\n    \n as \n    \n    problem_id_link\n    \n, \n    \n    \n    problem_id_value\n    \n as \n    \n    problem_id_value\n    \n, \n    \n    \n    reopen_count\n    \n as \n    \n    reopen_count\n    \n, \n    \n    \n    reopened_by_link\n    \n as \n    \n    reopened_by_link\n    \n, \n    \n    \n    reopened_by_value\n    \n as \n    \n    reopened_by_value\n    \n, \n    \n    \n    reopened_time\n    \n as \n    \n    reopened_time\n    \n, \n    \n    \n    resolved_at\n    \n as \n    \n    resolved_at\n    \n, \n    \n    \n    resolved_by_link\n    \n as \n    \n    resolved_by_link\n    \n, \n    \n    \n    resolved_by_value\n    \n as \n    \n    resolved_by_value\n    \n, \n    \n    \n    rfc_link\n    \n as \n    \n    rfc_link\n    \n, \n    \n    \n    rfc_value\n    \n as \n    \n    rfc_value\n    \n, \n    \n    \n    severity\n    \n as \n    \n    severity\n    \n, \n    \n    \n    subcategory\n    \n as \n    \n    subcategory\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as incident_id,\n        cast(sys_created_on as timestamp) as incident_created_at,\n        cast(sys_updated_on as timestamp) as incident_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        business_impact,\n        business_stc,\n        calendar_stc,\n        caller_id_link,\n        cast(caller_id_value as string) as caller_id_value,\n        category as incident_category,\n        cause as incident_cause,\n        caused_by_link,\n        cast(caused_by_value as string) as caused_by_value,\n        child_incidents,\n        close_code,\n        hold_reason,\n        incident_state,\n        notify,\n        origin_id_link,\n        cast(origin_id_value as string) as origin_id_value,\n        parent_incident_link,\n        cast(parent_incident_value as string) as parent_incident_value,\n        problem_id_link,\n        cast(problem_id_value as string) as problem_id_value,\n        reopen_count,\n        reopened_by_link,\n        cast(reopened_by_value as string) as reopened_by_value,\n        reopened_time as incident_reopened_time,\n        cast(resolved_at as timestamp) as incident_resolved_at,\n        resolved_by_link,\n        cast(resolved_by_value as string) as resolved_by_value,\n        rfc_link,\n        cast(rfc_value as string) as rfc_value,\n        severity as incident_severity,\n        subcategory as incident_subcategory\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__task_sla": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__task_sla", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__task_sla.sql", "original_file_path": "models/staging/stg_servicenow__task_sla.sql", "unique_id": "model.servicenow.stg_servicenow__task_sla", "fqn": ["servicenow", "staging", "stg_servicenow__task_sla"], "alias": "stg_servicenow__task_sla", "checksum": {"name": "sha256", "checksum": "6275c8ee9428adb12fb49c580e3cf25a1f4adedbccbecd4ca8edcb4bc83482a5"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all Service Level Agreement (SLA) information related to the task.", "columns": {"task_sla_id": {"name": "task_sla_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Flag indicating whether the record is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_duration": {"name": "business_duration", "description": "The duration of the task in terms of business hours.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_pause_duration": {"name": "business_pause_duration", "description": "Duration of business pause associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_percentage": {"name": "business_percentage", "description": "Percentage of business time completed for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_time_left": {"name": "business_time_left", "description": "Remaining business time for the completion of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "Total duration of the task, including both business and non-business time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The scheduled or expected end time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_breached": {"name": "has_breached", "description": "Indicates whether the task has breached the defined SLA or time limits.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_breach_time": {"name": "original_breach_time", "description": "Original time when the SLA breach for the task was detected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_duration": {"name": "pause_duration", "description": "Duration of the pause associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_time": {"name": "pause_time", "description": "Time when the task was paused or put on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "percentage": {"name": "percentage", "description": "Percentage of total time completed for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "planned_end_time": {"name": "planned_end_time", "description": "The originally planned or expected end time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_link": {"name": "schedule_link", "description": "Link to the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_value": {"name": "schedule_value", "description": "Value representing the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_link": {"name": "sla_link", "description": "Link to the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_value": {"name": "sla_value", "description": "Value representing the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stage": {"name": "stage", "description": "Current stage or phase of the record's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The scheduled or expected start time for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_sla_created_at": {"name": "task_sla_created_at", "description": "Date and time when the task sla record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_sla_updated_at": {"name": "task_sla_updated_at", "description": "Date and time when the task sla record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_link": {"name": "task_link", "description": "Link to the related task record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_value": {"name": "task_value", "description": "Value representing the related task record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_left": {"name": "time_left", "description": "Remaining time for the completion of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.926705, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_sla`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__task_sla_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__task_sla_base')),\n                staging_columns=get_task_sla_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as task_sla_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as task_sla_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as task_sla_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        active,\n        business_duration,\n        business_pause_duration,\n        business_percentage,\n        business_time_left,\n        duration,\n        end_time,\n        has_breached,\n        original_breach_time,\n        pause_duration,\n        pause_time,\n        percentage,\n        planned_end_time,\n        schedule_link,\n        cast(schedule_value as {{ dbt.type_string() }}) as schedule_value,\n        sla_link,\n        cast(sla_value as {{ dbt.type_string() }}) as sla_value,\n        stage,\n        start_time,\n        sys_created_by,\n        sys_mod_count,\n        sys_updated_by,\n        task_link,\n        cast(task_value as {{ dbt.type_string() }}) as task_value,\n        time_left,\n        timezone\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__task_sla_base", "package": null, "version": null}, {"name": "stg_servicenow__task_sla_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_task_sla_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__task_sla_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__task_sla.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_sla_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    business_duration\n    \n as \n    \n    business_duration\n    \n, \n    \n    \n    business_pause_duration\n    \n as \n    \n    business_pause_duration\n    \n, \n    \n    \n    business_percentage\n    \n as \n    \n    business_percentage\n    \n, \n    \n    \n    business_time_left\n    \n as \n    \n    business_time_left\n    \n, \n    \n    \n    duration\n    \n as \n    \n    duration\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    has_breached\n    \n as \n    \n    has_breached\n    \n, \n    \n    \n    original_breach_time\n    \n as \n    \n    original_breach_time\n    \n, \n    \n    \n    pause_duration\n    \n as \n    \n    pause_duration\n    \n, \n    \n    \n    pause_time\n    \n as \n    \n    pause_time\n    \n, \n    \n    \n    percentage\n    \n as \n    \n    percentage\n    \n, \n    \n    \n    planned_end_time\n    \n as \n    \n    planned_end_time\n    \n, \n    \n    \n    schedule_link\n    \n as \n    \n    schedule_link\n    \n, \n    \n    \n    schedule_value\n    \n as \n    \n    schedule_value\n    \n, \n    \n    \n    sla_link\n    \n as \n    \n    sla_link\n    \n, \n    \n    \n    sla_value\n    \n as \n    \n    sla_value\n    \n, \n    \n    \n    stage\n    \n as \n    \n    stage\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    task_link\n    \n as \n    \n    task_link\n    \n, \n    \n    \n    task_value\n    \n as \n    \n    task_value\n    \n, \n    \n    \n    time_left\n    \n as \n    \n    time_left\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as task_sla_id,\n        cast(sys_created_on as timestamp) as task_sla_created_at,\n        cast(sys_updated_on as timestamp) as task_sla_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        active,\n        business_duration,\n        business_pause_duration,\n        business_percentage,\n        business_time_left,\n        duration,\n        end_time,\n        has_breached,\n        original_breach_time,\n        pause_duration,\n        pause_time,\n        percentage,\n        planned_end_time,\n        schedule_link,\n        cast(schedule_value as string) as schedule_value,\n        sla_link,\n        cast(sla_value as string) as sla_value,\n        stage,\n        start_time,\n        sys_created_by,\n        sys_mod_count,\n        sys_updated_by,\n        task_link,\n        cast(task_value as string) as task_value,\n        time_left,\n        timezone\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__core_company": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__core_company", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__core_company.sql", "original_file_path": "models/staging/stg_servicenow__core_company.sql", "unique_id": "model.servicenow.stg_servicenow__core_company", "fqn": ["servicenow", "staging", "stg_servicenow__core_company"], "alias": "stg_servicenow__core_company", "checksum": {"name": "sha256", "checksum": "81048850729ebccbed15efdf990aaa669c644f300502128fad62761d1681d920"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all records relating to companies.", "columns": {"core_company_id": {"name": "core_company_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_city": {"name": "company_city", "description": "City information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_country": {"name": "company_country", "description": "Country information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_customer": {"name": "is_customer", "description": "Boolean of whether the company is a customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_fax_phone": {"name": "company_fax_phone", "description": "Fax phone number of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fiscal_year": {"name": "fiscal_year", "description": "Company's fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Notes about the record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_phone": {"name": "company_phone", "description": "The contact number belonging to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_state": {"name": "company_state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_street": {"name": "company_street", "description": "The street to which the record belongs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_vendor": {"name": "is_vendor", "description": "Boolean of whether the company is a vendor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_type": {"name": "vendor_type", "description": "Vendor types group vendors that offer similar goods and services, and are useful for reporting and comparing vendor performance. Example: Hardware, Services", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_website": {"name": "company_website", "description": "Company website", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_zip": {"name": "company_zip", "description": "The postal code or ZIP code associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.9329221, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__core_company_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__core_company_base')),\n                staging_columns=get_core_company_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as {{ dbt.type_string() }}) as core_company_id,\n        city as company_city,\n        country as company_country,\n        customer as is_customer,\n        fax_phone as company_fax_phone,\n        fiscal_year,\n        name as company_name,\n        notes,\n        phone as company_phone,\n        state as company_state,\n        street as company_street,\n        sys_class_name,\n        sys_created_by,\n        sys_created_on,\n        sys_mod_count,\n        sys_updated_by,\n        sys_updated_on,\n        vendor as is_vendor,\n        vendor_type,\n        website as company_website,\n        zip as company_zip\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__core_company_base", "package": null, "version": null}, {"name": "stg_servicenow__core_company_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_core_company_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.servicenow.stg_servicenow__core_company_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__core_company.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    fax_phone\n    \n as \n    \n    fax_phone\n    \n, \n    \n    \n    fiscal_year\n    \n as \n    \n    fiscal_year\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    street\n    \n as \n    \n    street\n    \n, \n    \n    \n    sys_class_name\n    \n as \n    \n    sys_class_name\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    \n    \n    vendor_type\n    \n as \n    \n    vendor_type\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as string) as core_company_id,\n        city as company_city,\n        country as company_country,\n        customer as is_customer,\n        fax_phone as company_fax_phone,\n        fiscal_year,\n        name as company_name,\n        notes,\n        phone as company_phone,\n        state as company_state,\n        street as company_street,\n        sys_class_name,\n        sys_created_by,\n        sys_created_on,\n        sys_mod_count,\n        sys_updated_by,\n        sys_updated_on,\n        vendor as is_vendor,\n        vendor_type,\n        website as company_website,\n        zip as company_zip\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__sys_user.sql", "original_file_path": "models/staging/stg_servicenow__sys_user.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user", "fqn": ["servicenow", "staging", "stg_servicenow__sys_user"], "alias": "stg_servicenow__sys_user", "checksum": {"name": "sha256", "checksum": "7dcaf0e3194f8f5fd05212ace426598f9d3fafcaba3f23f625feff4c37b739ca"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing information related to the system user associated with the task.", "columns": {"sys_user_id": {"name": "sys_user_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accumulated_roles": {"name": "accumulated_roles", "description": "Roles accumulated or associated with the system user over time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Flag indicating whether the record is currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avatar": {"name": "avatar", "description": "Avatar or profile picture associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "building_link": {"name": "building_link", "description": "Link to the building associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "building_value": {"name": "building_value", "description": "Value representing the building associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_integration": {"name": "calendar_integration", "description": "Information about the integration of the user's calendar with the ServiceNow system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Country information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_format": {"name": "date_format", "description": "The format in which dates are displayed or recorded for the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_perspective_link": {"name": "default_perspective_link", "description": "Link to the default perspective associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_perspective_value": {"name": "default_perspective_value", "description": "Value representing the default perspective associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_link": {"name": "department_link", "description": "Link to the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_value": {"name": "department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edu_status": {"name": "edu_status", "description": "Education status or level associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_number": {"name": "employee_number", "description": "Employee number or identifier associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enable_multifactor_authn": {"name": "enable_multifactor_authn", "description": "Indication of whether multifactor authentication is enabled for the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_attempts": {"name": "failed_attempts", "description": "Number of failed login attempts for the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender information associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hashed_user_id": {"name": "hashed_user_id", "description": "Hashed identifier associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_phone": {"name": "home_phone", "description": "Home phone number associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "internal_integration_user": {"name": "internal_integration_user", "description": "Indication of whether the system user is an internal integration user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "introduction": {"name": "introduction", "description": "Introduction or bio information associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_login_day_date": {"name": "last_login_day_date", "description": "Date and time of the last login.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_login_device": {"name": "last_login_device", "description": "The device used for the user's last login to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_login_at": {"name": "last_login_at", "description": "The specific time when the user last logged in to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The family name or surname of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_password": {"name": "last_password", "description": "The timestamp or information related to the user's last password update.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldap_server_link": {"name": "ldap_server_link", "description": "A link to the LDAP (Lightweight Directory Access Protocol) server associated with the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldap_server_value": {"name": "ldap_server_value", "description": "The value or name of the LDAP server associated with the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_link": {"name": "location_link", "description": "Link to the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_value": {"name": "location_value", "description": "Value representing the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "locked_out": {"name": "locked_out", "description": "Information about whether the user account is currently locked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_link": {"name": "manager_link", "description": "A link to the user's manager or supervisor in the organizational hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_value": {"name": "manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_name": {"name": "middle_name", "description": "The middle name or initial of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mobile_phone": {"name": "mobile_phone", "description": "The contact number for the user's mobile phone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_name": {"name": "sys_user_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notification": {"name": "notification", "description": "Information related to user notifications or alerts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "password_needs_reset": {"name": "password_needs_reset", "description": "Indicates whether the user needs to reset their password.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The contact number belonging to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "photo": {"name": "photo", "description": "A link or reference to the user's profile photo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_language": {"name": "preferred_language", "description": "The language preference set by the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_user_roles": {"name": "sys_user_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_link": {"name": "schedule_link", "description": "Link to the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_value": {"name": "schedule_value", "description": "Value representing the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source or origin of the user's or user group's profile information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_created_at": {"name": "user_created_at", "description": "Date and time when the user record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_updated_at": {"name": "user_updated_at", "description": "Date and time when the user record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_format": {"name": "time_format", "description": "The preferred time format for the user (e.g., 12-hour or 24-hour).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone configured for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "The job title or position of the user within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The username used by the user to log in to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_password": {"name": "user_password", "description": "The user's current password information or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vip": {"name": "vip", "description": "Indicates whether the user has VIP (Very Important Person) status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "web_service_access_only": {"name": "web_service_access_only", "description": "Indicates whether the user has access only through web services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The postal code or ZIP code associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.928035, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__sys_user_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__sys_user_base')),\n                staging_columns=get_sys_user_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as {{ dbt.type_string() }}) as sys_user_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as user_created_at,\n        sys_created_by,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as user_updated_at,\n        sys_updated_by,\n        _fivetran_deleted,\n        _fivetran_synced,\n        accumulated_roles,\n        active as is_active,\n        avatar,\n        building_link,\n        cast(building_value as {{ dbt.type_string() }}) as building_value,\n        calendar_integration,\n        city,\n        company_link,\n        cast(company_value as {{ dbt.type_string() }}) as company_value,\n        cost_center_link,\n        cast(cost_center_value as {{ dbt.type_string() }}) as cost_center_value,\n        country,\n        date_format,\n        default_perspective_link,\n        cast(default_perspective_value as {{ dbt.type_string() }}) as default_perspective_value,\n        department_link,\n        cast(department_value as {{ dbt.type_string() }}) as department_value,\n        edu_status,\n        email,\n        employee_number,\n        enable_multifactor_authn,\n        failed_attempts,\n        first_name,\n        gender,\n        hashed_user_id,\n        home_phone,\n        internal_integration_user,\n        introduction,\n        cast ({{ dbt.date_trunc('day', 'last_login') }} as date)  as last_login_day_date,\n        last_login_device,\n        last_login_time as last_login_at,\n        last_name,\n        last_password,\n        ldap_server_link,\n        cast(ldap_server_value as {{ dbt.type_string() }}) as ldap_server_value,\n        location_link,\n        cast(location_value as {{ dbt.type_string() }}) as location_value,\n        locked_out,\n        manager_link,\n        cast(manager_value as {{ dbt.type_string() }}) as manager_value,\n        middle_name,\n        mobile_phone,\n        name as sys_user_name,\n        notification,\n        password_needs_reset,\n        phone,\n        photo,\n        preferred_language,\n        roles as sys_user_roles,\n        schedule_link,\n        cast(schedule_value as {{ dbt.type_string() }}) as schedule_value,\n        source,\n        state,\n        sys_class_name,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as {{ dbt.type_string() }}) as sys_domain_value,\n        sys_mod_count,\n        time_format,\n        time_zone,\n        title,\n        user_name,\n        user_password,\n        vip,\n        web_service_access_only,\n        zip\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_base", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_sys_user_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.date_trunc"], "nodes": ["model.servicenow.stg_servicenow__sys_user_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__sys_user.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accumulated_roles\n    \n as \n    \n    accumulated_roles\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    avatar\n    \n as \n    \n    avatar\n    \n, \n    \n    \n    building_link\n    \n as \n    \n    building_link\n    \n, \n    \n    \n    building_value\n    \n as \n    \n    building_value\n    \n, \n    \n    \n    calendar_integration\n    \n as \n    \n    calendar_integration\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    company_link\n    \n as \n    \n    company_link\n    \n, \n    \n    \n    company_value\n    \n as \n    \n    company_value\n    \n, \n    \n    \n    cost_center_link\n    \n as \n    \n    cost_center_link\n    \n, \n    \n    \n    cost_center_value\n    \n as \n    \n    cost_center_value\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_format\n    \n as \n    \n    date_format\n    \n, \n    \n    \n    default_perspective_link\n    \n as \n    \n    default_perspective_link\n    \n, \n    \n    \n    default_perspective_value\n    \n as \n    \n    default_perspective_value\n    \n, \n    \n    \n    department_link\n    \n as \n    \n    department_link\n    \n, \n    \n    \n    department_value\n    \n as \n    \n    department_value\n    \n, \n    \n    \n    edu_status\n    \n as \n    \n    edu_status\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    employee_number\n    \n as \n    \n    employee_number\n    \n, \n    \n    \n    enable_multifactor_authn\n    \n as \n    \n    enable_multifactor_authn\n    \n, \n    \n    \n    failed_attempts\n    \n as \n    \n    failed_attempts\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    gender\n    \n as \n    \n    gender\n    \n, \n    \n    \n    hashed_user_id\n    \n as \n    \n    hashed_user_id\n    \n, \n    \n    \n    home_phone\n    \n as \n    \n    home_phone\n    \n, \n    \n    \n    internal_integration_user\n    \n as \n    \n    internal_integration_user\n    \n, \n    \n    \n    introduction\n    \n as \n    \n    introduction\n    \n, \n    \n    \n    last_login\n    \n as \n    \n    last_login\n    \n, \n    \n    \n    last_login_device\n    \n as \n    \n    last_login_device\n    \n, \n    \n    \n    last_login_time\n    \n as \n    \n    last_login_time\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    last_password\n    \n as \n    \n    last_password\n    \n, \n    \n    \n    ldap_server_link\n    \n as \n    \n    ldap_server_link\n    \n, \n    \n    \n    ldap_server_value\n    \n as \n    \n    ldap_server_value\n    \n, \n    \n    \n    location_link\n    \n as \n    \n    location_link\n    \n, \n    \n    \n    location_value\n    \n as \n    \n    location_value\n    \n, \n    \n    \n    locked_out\n    \n as \n    \n    locked_out\n    \n, \n    \n    \n    manager_link\n    \n as \n    \n    manager_link\n    \n, \n    \n    \n    manager_value\n    \n as \n    \n    manager_value\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notification\n    \n as \n    \n    notification\n    \n, \n    \n    \n    password_needs_reset\n    \n as \n    \n    password_needs_reset\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    photo\n    \n as \n    \n    photo\n    \n, \n    \n    \n    preferred_language\n    \n as \n    \n    preferred_language\n    \n, \n    \n    \n    roles\n    \n as \n    \n    roles\n    \n, \n    \n    \n    schedule_link\n    \n as \n    \n    schedule_link\n    \n, \n    \n    \n    schedule_value\n    \n as \n    \n    schedule_value\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    sys_class_name\n    \n as \n    \n    sys_class_name\n    \n, \n    \n    \n    sys_created_by\n    \n as \n    \n    sys_created_by\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_domain_link\n    \n as \n    \n    sys_domain_link\n    \n, \n    \n    \n    sys_domain_path\n    \n as \n    \n    sys_domain_path\n    \n, \n    \n    \n    sys_domain_value\n    \n as \n    \n    sys_domain_value\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_mod_count\n    \n as \n    \n    sys_mod_count\n    \n, \n    \n    \n    sys_updated_by\n    \n as \n    \n    sys_updated_by\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    time_format\n    \n as \n    \n    time_format\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    user_name\n    \n as \n    \n    user_name\n    \n, \n    \n    \n    user_password\n    \n as \n    \n    user_password\n    \n, \n    \n    \n    vip\n    \n as \n    \n    vip\n    \n, \n    \n    \n    web_service_access_only\n    \n as \n    \n    web_service_access_only\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as string) as sys_user_id,\n        cast(sys_created_on as timestamp) as user_created_at,\n        sys_created_by,\n        cast(sys_updated_on as timestamp) as user_updated_at,\n        sys_updated_by,\n        _fivetran_deleted,\n        _fivetran_synced,\n        accumulated_roles,\n        active as is_active,\n        avatar,\n        building_link,\n        cast(building_value as string) as building_value,\n        calendar_integration,\n        city,\n        company_link,\n        cast(company_value as string) as company_value,\n        cost_center_link,\n        cast(cost_center_value as string) as cost_center_value,\n        country,\n        date_format,\n        default_perspective_link,\n        cast(default_perspective_value as string) as default_perspective_value,\n        department_link,\n        cast(department_value as string) as department_value,\n        edu_status,\n        email,\n        employee_number,\n        enable_multifactor_authn,\n        failed_attempts,\n        first_name,\n        gender,\n        hashed_user_id,\n        home_phone,\n        internal_integration_user,\n        introduction,\n        cast (timestamp_trunc(\n        cast(last_login as timestamp),\n        day\n    ) as date)  as last_login_day_date,\n        last_login_device,\n        last_login_time as last_login_at,\n        last_name,\n        last_password,\n        ldap_server_link,\n        cast(ldap_server_value as string) as ldap_server_value,\n        location_link,\n        cast(location_value as string) as location_value,\n        locked_out,\n        manager_link,\n        cast(manager_value as string) as manager_value,\n        middle_name,\n        mobile_phone,\n        name as sys_user_name,\n        notification,\n        password_needs_reset,\n        phone,\n        photo,\n        preferred_language,\n        roles as sys_user_roles,\n        schedule_link,\n        cast(schedule_value as string) as schedule_value,\n        source,\n        state,\n        sys_class_name,\n        sys_domain_link,\n        sys_domain_path,\n        cast(sys_domain_value as string) as sys_domain_value,\n        sys_mod_count,\n        time_format,\n        time_zone,\n        title,\n        user_name,\n        user_password,\n        vip,\n        web_service_access_only,\n        zip\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__change_request": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__change_request", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__change_request.sql", "original_file_path": "models/staging/stg_servicenow__change_request.sql", "unique_id": "model.servicenow.stg_servicenow__change_request", "fqn": ["servicenow", "staging", "stg_servicenow__change_request"], "alias": "stg_servicenow__change_request", "checksum": {"name": "sha256", "checksum": "2e7c1ce222cde6fdce49408df2a349cb0156d7878c144bcf2821ef00fc27a544"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table that contains information related to change requests.", "columns": {"change_request_id": {"name": "change_request_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "backout_plan": {"name": "backout_plan", "description": "Information about the plan or process for backing out or undoing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_date": {"name": "cab_date", "description": "The date of the Change Advisory Board (CAB) meeting associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_date_time": {"name": "cab_date_time", "description": "The date and time of the Change Advisory Board (CAB) meeting associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_delegate_link": {"name": "cab_delegate_link", "description": "A link to the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) in relation \nto the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_delegate_value": {"name": "cab_delegate_value", "description": "The name or identifier of the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) \nin relation to the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_recommendation": {"name": "cab_recommendation", "description": "The recommendation or decision made by the Change Advisory Board (CAB) regarding the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_cab_required": {"name": "is_cab_required", "description": "Indicates whether the Change Advisory Board (CAB) approval is required for the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_category": {"name": "change_request_category", "description": "The category of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_plan": {"name": "change_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chg_model_link": {"name": "chg_model_link", "description": "A link to the change model or template associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chg_model_value": {"name": "chg_model_value", "description": "The name or identifier of the change model or template linked to the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_close_code": {"name": "change_request_close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conflict_last_run": {"name": "conflict_last_run", "description": "The timestamp indicating when the conflict detection was last run for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conflict_status": {"name": "conflict_status", "description": "The status or outcome of the conflict detection process for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_end_date": {"name": "change_request_end_date", "description": "The end date for the implementation or execution associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_implementation_plan": {"name": "change_request_implementation_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_justification": {"name": "change_request_justification", "description": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_request_on_hold": {"name": "is_change_request_on_hold", "description": "Indicates whether the change is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_on_hold_reason": {"name": "change_request_on_hold_reason", "description": "The reason or rationale for placing the change on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold_task": {"name": "on_hold_task", "description": "A link to the task or activity that indicates the current record is on hold, specifying the task associated with the \nhold status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outside_maintenance_schedule": {"name": "outside_maintenance_schedule", "description": "Indicates whether the changes associated with the current record fall outside the regular maintenance schedule or window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_phase": {"name": "change_request_phase", "description": "The phase or stage of the change request or change record within the change management process, indicating its progress or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_phase_state": {"name": "change_request_phase_state", "description": "The current state or status of the phase associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_production_system": {"name": "is_production_system", "description": "Indicates whether the changes associated with the current record are intended for the production environment or system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_reason": {"name": "change_request_reason", "description": "The reason or rationale behind the changes associated with the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_date": {"name": "change_requested_by_date", "description": "The date the change is requested for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_link": {"name": "change_requested_by_link", "description": "A link to the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_value": {"name": "change_requested_by_value", "description": "The name or identifier of the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_comments": {"name": "review_comments", "description": "Comments or feedback provided during the review process for the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_review_date": {"name": "change_request_review_date", "description": "The date when the change request was reviewed or evaluated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_review_status": {"name": "change_request_review_status", "description": "The status or outcome of the review process for the change request associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_risk": {"name": "change_request_risk", "description": "The level of risk associated with the changes, indicating the potential impact or consequences of implementing the modifications outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "risk_impact_analysis": {"name": "risk_impact_analysis", "description": "An analysis or assessment of the impact or consequences of the changes outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_scope": {"name": "change_request_scope", "description": "The scope or extent of the changes outlined in the current record, specifying the areas or components affected by the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_start_date": {"name": "change_request_start_date", "description": "The requested start date for the implementation or execution of the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_created_at": {"name": "change_request_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_created_date": {"name": "change_request_created_date", "description": "Date the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_updated_at": {"name": "change_request_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_updated_date": {"name": "change_request_updated_date", "description": "Date the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_test_plan": {"name": "change_request_test_plan", "description": "Information about the plan or process for testing the changes requested by the change request of this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_type": {"name": "change_request_type", "description": "The type or category of the changes outlined in the current record, indicating the nature or purpose of the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_request_unauthorized": {"name": "is_change_request_unauthorized", "description": "Indicates whether the changes associated with the current record were made without proper authorization or approval.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.931401, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__change_request_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__change_request_base')),\n                staging_columns=get_change_request_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as change_request_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as change_request_created_at,\n        cast ({{ dbt.date_trunc('day', 'sys_created_on') }} as date) as change_request_created_date,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as change_request_updated_at,\n        cast ({{ dbt.date_trunc('day', 'sys_updated_on') }} as date) as change_request_updated_date,\n        _fivetran_deleted,\n        _fivetran_synced,\n        backout_plan,\n        cab_date,\n        cab_date_time,\n        cab_delegate_link,\n        cast(cab_delegate_value as {{ dbt.type_string() }}) as cab_delegate_value,\n        cab_recommendation,\n        cab_required as is_cab_required,\n        category as change_request_category,\n        change_plan,\n        chg_model_link,\n        cast(chg_model_value as {{ dbt.type_string() }}) as chg_model_value,\n        close_code as change_request_close_code,\n        conflict_last_run,\n        conflict_status,\n        end_date as change_request_end_date, -- sometimes the actual change and the change request timelines don't line up, so let's specify this is pertaining to the change request.\n        implementation_plan as change_request_implementation_plan,\n        justification as change_request_justification,\n        on_hold as is_change_request_on_hold,\n        on_hold_reason as change_request_on_hold_reason,\n        on_hold_task,\n        outside_maintenance_schedule,\n        phase as change_request_phase,\n        phase_state as change_request_phase_state,\n        production_system as is_production_system,\n        reason as change_request_reason,\n        requested_by_date as change_requested_by_date,\n        requested_by_link as change_requested_by_link,\n        cast(requested_by_value as {{ dbt.type_string() }}) as change_requested_by_value,\n        review_comments,\n        review_date as change_request_review_date,\n        review_status as change_request_review_status,\n        risk as change_request_risk,\n        risk_impact_analysis,\n        scope as change_request_scope,\n        start_date as change_request_start_date,\n        test_plan as change_request_test_plan,\n        type as change_request_type,\n        unauthorized as is_change_request_unauthorized\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__change_request_base", "package": null, "version": null}, {"name": "stg_servicenow__change_request_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_change_request_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.date_trunc"], "nodes": ["model.servicenow.stg_servicenow__change_request_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__change_request.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    backout_plan\n    \n as \n    \n    backout_plan\n    \n, \n    \n    \n    cab_date\n    \n as \n    \n    cab_date\n    \n, \n    \n    \n    cab_date_time\n    \n as \n    \n    cab_date_time\n    \n, \n    \n    \n    cab_delegate_link\n    \n as \n    \n    cab_delegate_link\n    \n, \n    \n    \n    cab_delegate_value\n    \n as \n    \n    cab_delegate_value\n    \n, \n    \n    \n    cab_recommendation\n    \n as \n    \n    cab_recommendation\n    \n, \n    \n    \n    cab_required\n    \n as \n    \n    cab_required\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    change_plan\n    \n as \n    \n    change_plan\n    \n, \n    \n    \n    chg_model_link\n    \n as \n    \n    chg_model_link\n    \n, \n    \n    \n    chg_model_value\n    \n as \n    \n    chg_model_value\n    \n, \n    \n    \n    close_code\n    \n as \n    \n    close_code\n    \n, \n    \n    \n    conflict_last_run\n    \n as \n    \n    conflict_last_run\n    \n, \n    \n    \n    conflict_status\n    \n as \n    \n    conflict_status\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    implementation_plan\n    \n as \n    \n    implementation_plan\n    \n, \n    \n    \n    justification\n    \n as \n    \n    justification\n    \n, \n    \n    \n    on_hold\n    \n as \n    \n    on_hold\n    \n, \n    \n    \n    on_hold_reason\n    \n as \n    \n    on_hold_reason\n    \n, \n    \n    \n    on_hold_task\n    \n as \n    \n    on_hold_task\n    \n, \n    \n    \n    outside_maintenance_schedule\n    \n as \n    \n    outside_maintenance_schedule\n    \n, \n    \n    \n    phase\n    \n as \n    \n    phase\n    \n, \n    \n    \n    phase_state\n    \n as \n    \n    phase_state\n    \n, \n    \n    \n    production_system\n    \n as \n    \n    production_system\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    requested_by_date\n    \n as \n    \n    requested_by_date\n    \n, \n    \n    \n    requested_by_link\n    \n as \n    \n    requested_by_link\n    \n, \n    \n    \n    requested_by_value\n    \n as \n    \n    requested_by_value\n    \n, \n    \n    \n    review_comments\n    \n as \n    \n    review_comments\n    \n, \n    \n    \n    review_date\n    \n as \n    \n    review_date\n    \n, \n    \n    \n    review_status\n    \n as \n    \n    review_status\n    \n, \n    \n    \n    risk\n    \n as \n    \n    risk\n    \n, \n    \n    \n    risk_impact_analysis\n    \n as \n    \n    risk_impact_analysis\n    \n, \n    \n    \n    scope\n    \n as \n    \n    scope\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    std_change_producer_version_link\n    \n as \n    \n    std_change_producer_version_link\n    \n, \n    \n    \n    std_change_producer_version_value\n    \n as \n    \n    std_change_producer_version_value\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    test_plan\n    \n as \n    \n    test_plan\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unauthorized\n    \n as \n    \n    unauthorized\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as change_request_id,\n        cast(sys_created_on as timestamp) as change_request_created_at,\n        cast (timestamp_trunc(\n        cast(sys_created_on as timestamp),\n        day\n    ) as date) as change_request_created_date,\n        cast(sys_updated_on as timestamp) as change_request_updated_at,\n        cast (timestamp_trunc(\n        cast(sys_updated_on as timestamp),\n        day\n    ) as date) as change_request_updated_date,\n        _fivetran_deleted,\n        _fivetran_synced,\n        backout_plan,\n        cab_date,\n        cab_date_time,\n        cab_delegate_link,\n        cast(cab_delegate_value as string) as cab_delegate_value,\n        cab_recommendation,\n        cab_required as is_cab_required,\n        category as change_request_category,\n        change_plan,\n        chg_model_link,\n        cast(chg_model_value as string) as chg_model_value,\n        close_code as change_request_close_code,\n        conflict_last_run,\n        conflict_status,\n        end_date as change_request_end_date, -- sometimes the actual change and the change request timelines don't line up, so let's specify this is pertaining to the change request.\n        implementation_plan as change_request_implementation_plan,\n        justification as change_request_justification,\n        on_hold as is_change_request_on_hold,\n        on_hold_reason as change_request_on_hold_reason,\n        on_hold_task,\n        outside_maintenance_schedule,\n        phase as change_request_phase,\n        phase_state as change_request_phase_state,\n        production_system as is_production_system,\n        reason as change_request_reason,\n        requested_by_date as change_requested_by_date,\n        requested_by_link as change_requested_by_link,\n        cast(requested_by_value as string) as change_requested_by_value,\n        review_comments,\n        review_date as change_request_review_date,\n        review_status as change_request_review_status,\n        risk as change_request_risk,\n        risk_impact_analysis,\n        scope as change_request_scope,\n        start_date as change_request_start_date,\n        test_plan as change_request_test_plan,\n        type as change_request_type,\n        unauthorized as is_change_request_unauthorized\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__problem_task": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__problem_task", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__problem_task.sql", "original_file_path": "models/staging/stg_servicenow__problem_task.sql", "unique_id": "model.servicenow.stg_servicenow__problem_task", "fqn": ["servicenow", "staging", "stg_servicenow__problem_task"], "alias": "stg_servicenow__problem_task", "checksum": {"name": "sha256", "checksum": "62914a3ee5415fbab5a33d119c293db220a59e397bc2e40dcfb44845bd38f5bb"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all the information related to the problem tasks.", "columns": {"problem_task_id": {"name": "problem_task_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_cause_code": {"name": "problem_task_cause_code", "description": "The code or identifier associated with the cause of the issue or problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_close_code": {"name": "problem_task_close_code", "description": "The code or identifier associated with the closure or resolution of the problem task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_reason": {"name": "other_reason", "description": "Additional information or reasons associated with the issue, especially if it falls outside standard categories.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_link": {"name": "problem_link", "description": "A link to the problem record associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_type": {"name": "problem_task_type", "description": "The type or category of the task associated with the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_value": {"name": "problem_value", "description": "The unique identifier or name associated with the problem linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_at": {"name": "reopened_at", "description": "The timestamp indicating when the issue was last reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_started_at": {"name": "problem_task_started_at", "description": "The timestamp indicating when the issue or incident was initiated or started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_by_link": {"name": "started_by_link", "description": "A link to the person or entity who initiated or started the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_by_value": {"name": "started_by_value", "description": "The name or identifier of the person or entity who initiated or started the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_created_at": {"name": "problem_task_created_at", "description": "Date and time when the problem task record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_updated_at": {"name": "problem_task_updated_at", "description": "Date and time when the problem task record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_link": {"name": "vendor_link", "description": "A link to the vendor or external entity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_value": {"name": "vendor_value", "description": "The name or identifier of the vendor or external entity linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.9294589, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__problem_task_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__problem_task_base')),\n                staging_columns=get_problem_task_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as {{ dbt.type_string() }}) as problem_task_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as problem_task_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as problem_task_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        cause_code as problem_task_cause_code,\n        close_code as problem_task_close_code,\n        other_reason,\n        problem_link,\n        problem_task_type,\n        cast(problem_value as {{ dbt.type_string() }}) as problem_value,\n        reopen_count,\n        reopened_at,\n        reopened_by_link,\n        cast(reopened_by_value as {{ dbt.type_string() }}) as reopened_by_value,\n        started_at as problem_task_started_at,\n        started_by_link,\n        cast(started_by_value as {{ dbt.type_string() }}) as started_by_value,\n        vendor_link,\n        cast(vendor_value as {{ dbt.type_string() }}) as vendor_value \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__problem_task_base", "package": null, "version": null}, {"name": "stg_servicenow__problem_task_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_problem_task_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__problem_task_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__problem_task.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cause_code\n    \n as \n    \n    cause_code\n    \n, \n    \n    \n    close_code\n    \n as \n    \n    close_code\n    \n, \n    \n    \n    other_reason\n    \n as \n    \n    other_reason\n    \n, \n    \n    \n    problem_link\n    \n as \n    \n    problem_link\n    \n, \n    \n    \n    problem_task_type\n    \n as \n    \n    problem_task_type\n    \n, \n    \n    \n    problem_value\n    \n as \n    \n    problem_value\n    \n, \n    \n    \n    reopen_count\n    \n as \n    \n    reopen_count\n    \n, \n    \n    \n    reopened_at\n    \n as \n    \n    reopened_at\n    \n, \n    \n    \n    reopened_by_link\n    \n as \n    \n    reopened_by_link\n    \n, \n    \n    \n    reopened_by_value\n    \n as \n    \n    reopened_by_value\n    \n, \n    \n    \n    started_at\n    \n as \n    \n    started_at\n    \n, \n    \n    \n    started_by_link\n    \n as \n    \n    started_by_link\n    \n, \n    \n    \n    started_by_value\n    \n as \n    \n    started_by_value\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    vendor_link\n    \n as \n    \n    vendor_link\n    \n, \n    \n    \n    vendor_value\n    \n as \n    \n    vendor_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        cast(sys_id as string) as problem_task_id,\n        cast(sys_created_on as timestamp) as problem_task_created_at,\n        cast(sys_updated_on as timestamp) as problem_task_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        cause_code as problem_task_cause_code,\n        close_code as problem_task_close_code,\n        other_reason,\n        problem_link,\n        problem_task_type,\n        cast(problem_value as string) as problem_value,\n        reopen_count,\n        reopened_at,\n        reopened_by_link,\n        cast(reopened_by_value as string) as reopened_by_value,\n        started_at as problem_task_started_at,\n        started_by_link,\n        cast(started_by_value as string) as started_by_value,\n        vendor_link,\n        cast(vendor_value as string) as vendor_value \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__problem": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__problem", "resource_type": "model", "package_name": "servicenow", "path": "staging/stg_servicenow__problem.sql", "original_file_path": "models/staging/stg_servicenow__problem.sql", "unique_id": "model.servicenow.stg_servicenow__problem", "fqn": ["servicenow", "staging", "stg_servicenow__problem"], "alias": "stg_servicenow__problem", "checksum": {"name": "sha256", "checksum": "406031170f0f02fc41d83ea866d463fe4163a0e6a4b29b1db8ccccc8da24f3ff"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Staging table containing all problem information.", "columns": {"problem_id": {"name": "problem_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_category": {"name": "problem_category", "description": "The category of the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cause_notes": {"name": "cause_notes", "description": "Additional notes or details about the cause of a particular issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_at": {"name": "problem_confirmed_at", "description": "The timestamp indicating when the problem was confirmed or acknowledged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_by_link": {"name": "problem_confirmed_by_link", "description": "A link to the person or entity who confirmed or acknowledged the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_by_value": {"name": "problem_confirmed_by_value", "description": "The name or identifier of the person or entity who confirmed or acknowledged the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duplicate_of_link": {"name": "duplicate_of_link", "description": "A link to the related issue that is identified as a duplicate of the current one.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duplicate_of_value": {"name": "duplicate_of_value", "description": "The name or identifier of the related issue that is identified as a duplicate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_first_reported_by_task_link": {"name": "problem_first_reported_by_task_link", "description": "A link to the task or activity that first reported the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_first_reported_by_task_value": {"name": "problem_first_reported_by_task_value", "description": "The name or identifier of the task or activity that first reported the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_at": {"name": "problem_fix_at", "description": "The timestamp indicating when the problem is scheduled or planned to be fixed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_by_link": {"name": "problem_fix_by_link", "description": "A link to the person or entity responsible for fixing the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_by_value": {"name": "problem_fix_by_value", "description": "The name or identifier of the person or entity responsible for fixing the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_at": {"name": "fix_communicated_at", "description": "The timestamp indicating when the fix for the issue was communicated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_by_link": {"name": "fix_communicated_by_link", "description": "A link to the person or entity who communicated the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_by_value": {"name": "fix_communicated_by_value", "description": "The name or identifier of the person or entity who communicated the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_notes": {"name": "problem_fix_notes", "description": "Additional notes or details related to the fix for the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_known_error": {"name": "is_known_error", "description": "Indicates whether the issue is a known error with a documented resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_major_problem": {"name": "is_major_problem", "description": "Indicates whether the issue is categorized as a major problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_state": {"name": "problem_state", "description": "The current state or status of the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_related_incidents": {"name": "problem_related_incidents", "description": "Number of incidents that are related to the current problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_at": {"name": "reopened_at", "description": "The timestamp indicating when the issue was last reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolution_code": {"name": "problem_resolution_code", "description": "The code or identifier associated with the resolution of the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolved_at": {"name": "problem_resolved_at", "description": "The timestamp indicating when the problem was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_link": {"name": "resolved_by_link", "description": "A link to the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolved_by_value": {"name": "problem_resolved_by_value", "description": "The name or identifier of the person or entity who resolved the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_outcome": {"name": "review_outcome", "description": "The outcome or result of the review process for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_link": {"name": "rfc_link", "description": "A link to the Request for Change (RFC) associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_value": {"name": "rfc_value", "description": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_subcategory": {"name": "problem_subcategory", "description": "The specific subcategory or classification of the issue, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_created_at": {"name": "problem_created_at", "description": "Date and time when the problem record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_updated_at": {"name": "problem_updated_at", "description": "Date and time when the problem record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround": {"name": "workaround", "description": "A description of a temporary or alternative solution that can be applied to address the issue before a permanent fix \nis implemented.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_applied": {"name": "workaround_applied", "description": "Indicates whether a workaround has been applied to address the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_at": {"name": "workaround_communicated_at", "description": "The timestamp indicating when the workaround for the issue was communicated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_by_link": {"name": "workaround_communicated_by_link", "description": "A link to the person or entity who communicated the workaround for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_by_value": {"name": "workaround_communicated_by_value", "description": "The name or identifier of the person or entity who communicated the workaround for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/staging/stg_servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.928728, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_servicenow__problem_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_servicenow__problem_base')),\n                staging_columns=get_problem_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='servicenow_union_schemas', \n            union_database_variable='servicenow_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as {{ dbt.type_string() }}) as problem_id,\n        cast(sys_created_on as {{ dbt.type_timestamp() }}) as problem_created_at,\n        cast(sys_updated_on as {{ dbt.type_timestamp() }}) as problem_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        category as problem_category,\n        cause_notes,\n        cast(confirmed_at as {{ dbt.type_timestamp() }}) as problem_confirmed_at,\n        confirmed_by_link as problem_confirmed_by_link,\n        cast(confirmed_by_value as {{ dbt.type_string() }}) as problem_confirmed_by_value,\n        duplicate_of_link,\n        cast(duplicate_of_value as {{ dbt.type_string() }}) as duplicate_of_value,\n        first_reported_by_task_link as problem_first_reported_by_task_link,\n        first_reported_by_task_value as problem_first_reported_by_task_value,\n        cast(fix_at as {{ dbt.type_timestamp() }}) as problem_fix_at,\n        fix_by_link as problem_fix_by_link,\n        cast(fix_by_value as {{ dbt.type_string() }}) as problem_fix_by_value,\n        cast(fix_communicated_at as {{ dbt.type_timestamp() }}) as fix_communicated_at,\n        fix_communicated_by_link,\n        cast(fix_communicated_by_value as {{ dbt.type_string() }}) as fix_communicated_by_value,\n        fix_notes as problem_fix_notes,\n        known_error as is_known_error,\n        major_problem as is_major_problem,\n        problem_state,\n        related_incidents as problem_related_incidents,\n        reopen_count,\n        cast(reopened_at as {{ dbt.type_timestamp() }}) as reopened_at,\n        reopened_by_link,\n        cast(reopened_by_value as {{ dbt.type_string() }}) as reopened_by_value,\n        resolution_code as problem_resolution_code,\n        cast(resolved_at as {{ dbt.type_timestamp() }}) as problem_resolved_at,\n        resolved_by_link,\n        cast(resolved_by_value as {{ dbt.type_string() }}) as problem_resolved_by_value,\n        review_outcome,\n        rfc_link,\n        cast(rfc_value as {{ dbt.type_string() }}) as rfc_value,\n        subcategory as problem_subcategory,\n        workaround,\n        workaround_applied,\n        cast(workaround_communicated_at as {{ dbt.type_timestamp() }}) as workaround_communicated_at,\n        workaround_communicated_by_link,\n        cast(workaround_communicated_by_value as {{ dbt.type_string() }}) as workaround_communicated_by_value \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_servicenow__problem_base", "package": null, "version": null}, {"name": "stg_servicenow__problem_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.servicenow.get_problem_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.servicenow.stg_servicenow__problem_base"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow__problem.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    cause_notes\n    \n as \n    \n    cause_notes\n    \n, \n    \n    \n    confirmed_at\n    \n as \n    \n    confirmed_at\n    \n, \n    \n    \n    confirmed_by_link\n    \n as \n    \n    confirmed_by_link\n    \n, \n    \n    \n    confirmed_by_value\n    \n as \n    \n    confirmed_by_value\n    \n, \n    \n    \n    duplicate_of_link\n    \n as \n    \n    duplicate_of_link\n    \n, \n    \n    \n    duplicate_of_value\n    \n as \n    \n    duplicate_of_value\n    \n, \n    \n    \n    first_reported_by_task_link\n    \n as \n    \n    first_reported_by_task_link\n    \n, \n    \n    \n    first_reported_by_task_value\n    \n as \n    \n    first_reported_by_task_value\n    \n, \n    \n    \n    fix_at\n    \n as \n    \n    fix_at\n    \n, \n    \n    \n    fix_by_link\n    \n as \n    \n    fix_by_link\n    \n, \n    \n    \n    fix_by_value\n    \n as \n    \n    fix_by_value\n    \n, \n    \n    \n    fix_communicated_at\n    \n as \n    \n    fix_communicated_at\n    \n, \n    \n    \n    fix_communicated_by_link\n    \n as \n    \n    fix_communicated_by_link\n    \n, \n    \n    \n    fix_communicated_by_value\n    \n as \n    \n    fix_communicated_by_value\n    \n, \n    \n    \n    fix_notes\n    \n as \n    \n    fix_notes\n    \n, \n    \n    \n    known_error\n    \n as \n    \n    known_error\n    \n, \n    \n    \n    major_problem\n    \n as \n    \n    major_problem\n    \n, \n    \n    \n    problem_state\n    \n as \n    \n    problem_state\n    \n, \n    \n    \n    related_incidents\n    \n as \n    \n    related_incidents\n    \n, \n    \n    \n    reopen_count\n    \n as \n    \n    reopen_count\n    \n, \n    \n    \n    reopened_at\n    \n as \n    \n    reopened_at\n    \n, \n    \n    \n    reopened_by_link\n    \n as \n    \n    reopened_by_link\n    \n, \n    \n    \n    reopened_by_value\n    \n as \n    \n    reopened_by_value\n    \n, \n    \n    \n    resolution_code\n    \n as \n    \n    resolution_code\n    \n, \n    \n    \n    resolved_at\n    \n as \n    \n    resolved_at\n    \n, \n    \n    \n    resolved_by_link\n    \n as \n    \n    resolved_by_link\n    \n, \n    \n    \n    resolved_by_value\n    \n as \n    \n    resolved_by_value\n    \n, \n    \n    \n    review_outcome\n    \n as \n    \n    review_outcome\n    \n, \n    \n    \n    rfc_link\n    \n as \n    \n    rfc_link\n    \n, \n    \n    \n    rfc_value\n    \n as \n    \n    rfc_value\n    \n, \n    \n    \n    subcategory\n    \n as \n    \n    subcategory\n    \n, \n    \n    \n    sys_created_on\n    \n as \n    \n    sys_created_on\n    \n, \n    \n    \n    sys_id\n    \n as \n    \n    sys_id\n    \n, \n    \n    \n    sys_updated_on\n    \n as \n    \n    sys_updated_on\n    \n, \n    \n    \n    workaround\n    \n as \n    \n    workaround\n    \n, \n    \n    \n    workaround_applied\n    \n as \n    \n    workaround_applied\n    \n, \n    \n    \n    workaround_communicated_at\n    \n as \n    \n    workaround_communicated_at\n    \n, \n    \n    \n    workaround_communicated_by_link\n    \n as \n    \n    workaround_communicated_by_link\n    \n, \n    \n    \n    workaround_communicated_by_value\n    \n as \n    \n    workaround_communicated_by_value\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        cast(sys_id as string) as problem_id,\n        cast(sys_created_on as timestamp) as problem_created_at,\n        cast(sys_updated_on as timestamp) as problem_updated_at,\n        _fivetran_deleted,\n        _fivetran_synced,\n        category as problem_category,\n        cause_notes,\n        cast(confirmed_at as timestamp) as problem_confirmed_at,\n        confirmed_by_link as problem_confirmed_by_link,\n        cast(confirmed_by_value as string) as problem_confirmed_by_value,\n        duplicate_of_link,\n        cast(duplicate_of_value as string) as duplicate_of_value,\n        first_reported_by_task_link as problem_first_reported_by_task_link,\n        first_reported_by_task_value as problem_first_reported_by_task_value,\n        cast(fix_at as timestamp) as problem_fix_at,\n        fix_by_link as problem_fix_by_link,\n        cast(fix_by_value as string) as problem_fix_by_value,\n        cast(fix_communicated_at as timestamp) as fix_communicated_at,\n        fix_communicated_by_link,\n        cast(fix_communicated_by_value as string) as fix_communicated_by_value,\n        fix_notes as problem_fix_notes,\n        known_error as is_known_error,\n        major_problem as is_major_problem,\n        problem_state,\n        related_incidents as problem_related_incidents,\n        reopen_count,\n        cast(reopened_at as timestamp) as reopened_at,\n        reopened_by_link,\n        cast(reopened_by_value as string) as reopened_by_value,\n        resolution_code as problem_resolution_code,\n        cast(resolved_at as timestamp) as problem_resolved_at,\n        resolved_by_link,\n        cast(resolved_by_value as string) as problem_resolved_by_value,\n        review_outcome,\n        rfc_link,\n        cast(rfc_value as string) as rfc_value,\n        subcategory as problem_subcategory,\n        workaround,\n        workaround_applied,\n        cast(workaround_communicated_at as timestamp) as workaround_communicated_at,\n        workaround_communicated_by_link,\n        cast(workaround_communicated_by_value as string) as workaround_communicated_by_value \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__task_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__task_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__task_base.sql", "original_file_path": "models/staging/base/stg_servicenow__task_base.sql", "unique_id": "model.servicenow.stg_servicenow__task_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__task_base"], "alias": "stg_servicenow__task_base", "checksum": {"name": "sha256", "checksum": "0cad1dc09fc59c7135204091694f30b217b693fb637510d071625d33d9ff3d3e"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.284868, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='task', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='task',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "task"], ["servicenow", "task"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.task"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__task_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`task`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_role_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_role_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__sys_user_role_base.sql", "original_file_path": "models/staging/base/stg_servicenow__sys_user_role_base.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_role_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__sys_user_role_base"], "alias": "stg_servicenow__sys_user_role_base", "checksum": {"name": "sha256", "checksum": "7a59172a591cfa7f65ee98c41e613e1c2e2e65184d546bca70572461b6378d36"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.297209, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_role_base`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='sys_user_role', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='sys_user_role',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "sys_user_role"], ["servicenow", "sys_user_role"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.sys_user_role"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__sys_user_role_base.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`sys_user_role`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__incident_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__incident_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__incident_base.sql", "original_file_path": "models/staging/base/stg_servicenow__incident_base.sql", "unique_id": "model.servicenow.stg_servicenow__incident_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__incident_base"], "alias": "stg_servicenow__incident_base", "checksum": {"name": "sha256", "checksum": "04b876e9b11899525dc3488a251bc315d59454740a3b652f84d8604da2184151"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.299813, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__incident_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='incident', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='incident',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "incident"], ["servicenow", "incident"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.incident"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__incident_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`incident`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__cmdb_ci_service_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__cmdb_ci_service_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__cmdb_ci_service_base.sql", "original_file_path": "models/staging/base/stg_servicenow__cmdb_ci_service_base.sql", "unique_id": "model.servicenow.stg_servicenow__cmdb_ci_service_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__cmdb_ci_service_base"], "alias": "stg_servicenow__cmdb_ci_service_base", "checksum": {"name": "sha256", "checksum": "1f6d14fdc89271bcd14730d78980201e5b757f7ccb6559d83b343fa311f78df9"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.3022962, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_service_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='cmdb_ci_service', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='cmdb_ci_service',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "cmdb_ci_service"], ["servicenow", "cmdb_ci_service"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.cmdb_ci_service"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__cmdb_ci_service_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`cmdb_ci_service`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__problem_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__problem_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__problem_base.sql", "original_file_path": "models/staging/base/stg_servicenow__problem_base.sql", "unique_id": "model.servicenow.stg_servicenow__problem_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__problem_base"], "alias": "stg_servicenow__problem_base", "checksum": {"name": "sha256", "checksum": "306c4bcde69f312ed509c7760f18f69d4e7315fc60f0523ea888c36921e49459"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.305152, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='problem', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='problem',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "problem"], ["servicenow", "problem"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.problem"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__problem_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`problem`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__cmdb_ci_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__cmdb_ci_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__cmdb_ci_base.sql", "original_file_path": "models/staging/base/stg_servicenow__cmdb_ci_base.sql", "unique_id": "model.servicenow.stg_servicenow__cmdb_ci_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__cmdb_ci_base"], "alias": "stg_servicenow__cmdb_ci_base", "checksum": {"name": "sha256", "checksum": "7f7635b116aa50890cfaad157477ab040436c4041a5a429f112280441749f742"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.307531, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='cmdb_ci', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='cmdb_ci',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "cmdb_ci"], ["servicenow", "cmdb_ci"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.cmdb_ci"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__cmdb_ci_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`cmdb_ci`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_group_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_group_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__sys_user_group_base.sql", "original_file_path": "models/staging/base/stg_servicenow__sys_user_group_base.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_group_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__sys_user_group_base"], "alias": "stg_servicenow__sys_user_group_base", "checksum": {"name": "sha256", "checksum": "3e16e0e6828d0db33e6903ff1a2f7c245b251378aec5d43438ab4024d47a88bc"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.309838, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='sys_user_group', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='sys_user_group',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "sys_user_group"], ["servicenow", "sys_user_group"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.sys_user_group"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__sys_user_group_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`sys_user_group`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_has_role_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_has_role_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__sys_user_has_role_base.sql", "original_file_path": "models/staging/base/stg_servicenow__sys_user_has_role_base.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_has_role_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__sys_user_has_role_base"], "alias": "stg_servicenow__sys_user_has_role_base", "checksum": {"name": "sha256", "checksum": "682a685bf4f1b8723783777e6abf6db2698fd9d31cab9931f62a916833022041"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.312205, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_has_role_base`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='sys_user_has_role', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='sys_user_has_role',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "sys_user_has_role"], ["servicenow", "sys_user_has_role"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.sys_user_has_role"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__sys_user_has_role_base.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`sys_user_has_role`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_grmember_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_grmember_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__sys_user_grmember_base.sql", "original_file_path": "models/staging/base/stg_servicenow__sys_user_grmember_base.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_grmember_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__sys_user_grmember_base"], "alias": "stg_servicenow__sys_user_grmember_base", "checksum": {"name": "sha256", "checksum": "539562fa0e923588605a2df70d4ecad3b58709a5034ff87bb69da30ff8e384e8"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table", "enabled": true}, "created_at": 1723671294.3147562, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_grmember_base`", "raw_code": "{{ config(enabled=var('servicenow__using_roles', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='sys_user_grmember', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='sys_user_grmember',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "sys_user_grmember"], ["servicenow", "sys_user_grmember"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.sys_user_grmember"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__sys_user_grmember_base.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`sys_user_grmember`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__problem_task_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__problem_task_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__problem_task_base.sql", "original_file_path": "models/staging/base/stg_servicenow__problem_task_base.sql", "unique_id": "model.servicenow.stg_servicenow__problem_task_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__problem_task_base"], "alias": "stg_servicenow__problem_task_base", "checksum": {"name": "sha256", "checksum": "09f7c5207c5838fd6f1e064cd7862e97b8363787ad3bcda6a0f47fcc2bb8485b"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.317153, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='problem_task', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='problem_task',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "problem_task"], ["servicenow", "problem_task"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.problem_task"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__problem_task_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`problem_task`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__change_request_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__change_request_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__change_request_base.sql", "original_file_path": "models/staging/base/stg_servicenow__change_request_base.sql", "unique_id": "model.servicenow.stg_servicenow__change_request_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__change_request_base"], "alias": "stg_servicenow__change_request_base", "checksum": {"name": "sha256", "checksum": "5aeede689fdb26bb00060cafa335ed0a2f96735ff2030c4e89dbbc18c06a419b"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.319561, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='change_request', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='change_request',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "change_request"], ["servicenow", "change_request"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.change_request"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__change_request_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`change_request`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__task_sla_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__task_sla_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__task_sla_base.sql", "original_file_path": "models/staging/base/stg_servicenow__task_sla_base.sql", "unique_id": "model.servicenow.stg_servicenow__task_sla_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__task_sla_base"], "alias": "stg_servicenow__task_sla_base", "checksum": {"name": "sha256", "checksum": "505dd0e4fbd5f66bfdd1a982c3bdc3b66eaede5f0855730683734fdeaaf363a1"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.321814, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_sla_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='task_sla', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='task_sla',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "task_sla"], ["servicenow", "task_sla"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.task_sla"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__task_sla_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`task_sla`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__core_company_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__core_company_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__core_company_base.sql", "original_file_path": "models/staging/base/stg_servicenow__core_company_base.sql", "unique_id": "model.servicenow.stg_servicenow__core_company_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__core_company_base"], "alias": "stg_servicenow__core_company_base", "checksum": {"name": "sha256", "checksum": "769500f7d337f2991f51ff8780e05557121876daf9610e6562f28350f615a705"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.324849, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='core_company', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='core_company',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "core_company"], ["servicenow", "core_company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.core_company"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__core_company_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`core_company`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__change_task_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__change_task_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__change_task_base.sql", "original_file_path": "models/staging/base/stg_servicenow__change_task_base.sql", "unique_id": "model.servicenow.stg_servicenow__change_task_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__change_task_base"], "alias": "stg_servicenow__change_task_base", "checksum": {"name": "sha256", "checksum": "91be1a25c14831a17d6db9a00474534df60e447a8d9f76989b6268714f4f5ffc"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.327127, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='change_task', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='change_task',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "change_task"], ["servicenow", "change_task"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.change_task"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__change_task_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`change_task`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.servicenow.stg_servicenow__sys_user_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_servicenow", "name": "stg_servicenow__sys_user_base", "resource_type": "model", "package_name": "servicenow", "path": "staging/base/stg_servicenow__sys_user_base.sql", "original_file_path": "models/staging/base/stg_servicenow__sys_user_base.sql", "unique_id": "model.servicenow.stg_servicenow__sys_user_base", "fqn": ["servicenow", "staging", "base", "stg_servicenow__sys_user_base"], "alias": "stg_servicenow__sys_user_base", "checksum": {"name": "sha256", "checksum": "0663be281ab1122b286a10c1ff38597fd4eee537d10df3e27b7df42207b2825a"}, "config": {"enabled": true, "alias": null, "schema": "stg_servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_servicenow", "materialized": "table"}, "created_at": 1723671294.329495, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='sys_user', \n        database_variable='servicenow_database', \n        schema_variable='servicenow_schema', \n        default_database=target.database,\n        default_schema='servicenow',\n        default_variable='sys_user',\n        union_schema_variable='servicenow_union_schemas',\n        union_database_variable='servicenow_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["servicenow", "sys_user"], ["servicenow", "sys_user"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.servicenow.servicenow.sys_user"]}, "compiled_path": "target/compiled/servicenow/models/staging/base/stg_servicenow__sys_user_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`servicenow`.`sys_user`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation.8ca2665c4e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_updated_date", "task_state", "priority", "impact", "urgency", "source_relation"], "model": "{{ get_where_subquery(ref('servicenow__activity_summary')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_cbdfbd9559b8d3f7fb7b2b3034ae9ec9.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation.8ca2665c4e", "fqn": ["servicenow", "dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation"], "alias": "dbt_utils_unique_combination_o_cbdfbd9559b8d3f7fb7b2b3034ae9ec9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cbdfbd9559b8d3f7fb7b2b3034ae9ec9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cbdfbd9559b8d3f7fb7b2b3034ae9ec9"}, "created_at": 1723671294.856689, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cbdfbd9559b8d3f7fb7b2b3034ae9ec9\") }}", "language": "sql", "refs": [{"name": "servicenow__activity_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__activity_summary"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/dbt_utils_unique_combination_o_cbdfbd9559b8d3f7fb7b2b3034ae9ec9.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        task_updated_date, task_state, priority, impact, urgency, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__activity_summary`\n    group by task_updated_date, task_state, priority, impact, urgency, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.servicenow__activity_summary", "attached_node": "model.servicenow.servicenow__activity_summary"}, "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation.17d8bd3f7e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["problem_id", "source_relation"], "model": "{{ get_where_subquery(ref('servicenow__problem_enhanced')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_698240c6ff6f8793db6581be6e40dcfb.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation.17d8bd3f7e", "fqn": ["servicenow", "dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation"], "alias": "dbt_utils_unique_combination_o_698240c6ff6f8793db6581be6e40dcfb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_698240c6ff6f8793db6581be6e40dcfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_698240c6ff6f8793db6581be6e40dcfb"}, "created_at": 1723671294.862138, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_698240c6ff6f8793db6581be6e40dcfb\") }}", "language": "sql", "refs": [{"name": "servicenow__problem_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__problem_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/dbt_utils_unique_combination_o_698240c6ff6f8793db6581be6e40dcfb.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        problem_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__problem_enhanced`\n    group by problem_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.servicenow__problem_enhanced", "attached_node": "model.servicenow.servicenow__problem_enhanced"}, "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation.69a5aa212b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["change_request_id", "source_relation"], "model": "{{ get_where_subquery(ref('servicenow__change_request_enhanced')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_748ae57fd06d7d1fdbe875d7df9a6e95.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation.69a5aa212b", "fqn": ["servicenow", "dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation"], "alias": "dbt_utils_unique_combination_o_748ae57fd06d7d1fdbe875d7df9a6e95", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_748ae57fd06d7d1fdbe875d7df9a6e95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_748ae57fd06d7d1fdbe875d7df9a6e95"}, "created_at": 1723671294.8644412, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_748ae57fd06d7d1fdbe875d7df9a6e95\") }}", "language": "sql", "refs": [{"name": "servicenow__change_request_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__change_request_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/dbt_utils_unique_combination_o_748ae57fd06d7d1fdbe875d7df9a6e95.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        change_request_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__change_request_enhanced`\n    group by change_request_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.servicenow__change_request_enhanced", "attached_node": "model.servicenow.servicenow__change_request_enhanced"}, "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation.a19e988556": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_id", "source_relation"], "model": "{{ get_where_subquery(ref('servicenow__user_aggregated')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_16773c9e6c330657fdda782d06c59890.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation.a19e988556", "fqn": ["servicenow", "dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation"], "alias": "dbt_utils_unique_combination_o_16773c9e6c330657fdda782d06c59890", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_16773c9e6c330657fdda782d06c59890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_16773c9e6c330657fdda782d06c59890"}, "created_at": 1723671294.867872, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_16773c9e6c330657fdda782d06c59890\") }}", "language": "sql", "refs": [{"name": "servicenow__user_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__user_aggregated"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/dbt_utils_unique_combination_o_16773c9e6c330657fdda782d06c59890.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__user_aggregated`\n    group by sys_user_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.servicenow__user_aggregated", "attached_node": "model.servicenow.servicenow__user_aggregated"}, "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation.115977e822": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_id", "source_relation"], "model": "{{ get_where_subquery(ref('servicenow__user_enhanced')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_b68c02af5cd06c6e53d1cee511573c3e.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation.115977e822", "fqn": ["servicenow", "dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation"], "alias": "dbt_utils_unique_combination_o_b68c02af5cd06c6e53d1cee511573c3e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b68c02af5cd06c6e53d1cee511573c3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b68c02af5cd06c6e53d1cee511573c3e"}, "created_at": 1723671294.869459, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b68c02af5cd06c6e53d1cee511573c3e\") }}", "language": "sql", "refs": [{"name": "servicenow__user_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__user_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/dbt_utils_unique_combination_o_b68c02af5cd06c6e53d1cee511573c3e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__user_enhanced`\n    group by sys_user_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.servicenow__user_enhanced", "attached_node": "model.servicenow.servicenow__user_enhanced"}, "test.servicenow.not_null_stg_servicenow__task_task_id.7a50a91303": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_servicenow__task')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__task_task_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__task_task_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__task_task_id.7a50a91303", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__task_task_id"], "alias": "not_null_stg_servicenow__task_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.939316, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__task"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__task_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.stg_servicenow__task", "attached_node": "model.servicenow.stg_servicenow__task"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation.4b5ec4b727": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__task')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_8167db2a4eccf7739dd11d1e87dcc167.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation.4b5ec4b727", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation"], "alias": "dbt_utils_unique_combination_o_8167db2a4eccf7739dd11d1e87dcc167", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8167db2a4eccf7739dd11d1e87dcc167", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8167db2a4eccf7739dd11d1e87dcc167"}, "created_at": 1723671294.940178, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8167db2a4eccf7739dd11d1e87dcc167\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__task"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_8167db2a4eccf7739dd11d1e87dcc167.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        task_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task`\n    group by task_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__task", "attached_node": "model.servicenow.stg_servicenow__task"}, "test.servicenow.not_null_stg_servicenow__task_sla_task_sla_id.c67b0e6fdf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_sla_id", "model": "{{ get_where_subquery(ref('stg_servicenow__task_sla')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__task_sla_task_sla_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__task_sla_task_sla_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__task_sla_task_sla_id.c67b0e6fdf", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__task_sla_task_sla_id"], "alias": "not_null_stg_servicenow__task_sla_task_sla_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.9421382, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__task_sla", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__task_sla"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__task_sla_task_sla_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_sla_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_sla`\nwhere task_sla_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_sla_id", "file_key_name": "models.stg_servicenow__task_sla", "attached_node": "model.servicenow.stg_servicenow__task_sla"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation.e9939b7a70": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["task_sla_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__task_sla')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_9a6ae426a268d8c3aa1c380edff453d0.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation.e9939b7a70", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation"], "alias": "dbt_utils_unique_combination_o_9a6ae426a268d8c3aa1c380edff453d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9a6ae426a268d8c3aa1c380edff453d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9a6ae426a268d8c3aa1c380edff453d0"}, "created_at": 1723671294.9428952, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9a6ae426a268d8c3aa1c380edff453d0\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__task_sla", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__task_sla"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_9a6ae426a268d8c3aa1c380edff453d0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        task_sla_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task_sla`\n    group by task_sla_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__task_sla", "attached_node": "model.servicenow.stg_servicenow__task_sla"}, "test.servicenow.not_null_stg_servicenow__sys_user_sys_user_id.99385b5bcb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sys_user_id", "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__sys_user_sys_user_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__sys_user_sys_user_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__sys_user_sys_user_id.99385b5bcb", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__sys_user_sys_user_id"], "alias": "not_null_stg_servicenow__sys_user_sys_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.94459, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__sys_user_sys_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sys_user_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\nwhere sys_user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sys_user_id", "file_key_name": "models.stg_servicenow__sys_user", "attached_node": "model.servicenow.stg_servicenow__sys_user"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation.040d637571": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_6095c0f222988eb805a02a79c61c631b.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation.040d637571", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation"], "alias": "dbt_utils_unique_combination_o_6095c0f222988eb805a02a79c61c631b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6095c0f222988eb805a02a79c61c631b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6095c0f222988eb805a02a79c61c631b"}, "created_at": 1723671294.945528, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6095c0f222988eb805a02a79c61c631b\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_6095c0f222988eb805a02a79c61c631b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n    group by sys_user_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__sys_user", "attached_node": "model.servicenow.stg_servicenow__sys_user"}, "test.servicenow.not_null_stg_servicenow__problem_problem_id.2b0f45ffad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "problem_id", "model": "{{ get_where_subquery(ref('stg_servicenow__problem')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__problem_problem_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__problem_problem_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__problem_problem_id.2b0f45ffad", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__problem_problem_id"], "alias": "not_null_stg_servicenow__problem_problem_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.9471822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__problem", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__problem"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__problem_problem_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect problem_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem`\nwhere problem_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "problem_id", "file_key_name": "models.stg_servicenow__problem", "attached_node": "model.servicenow.stg_servicenow__problem"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation.135d98438b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["problem_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__problem')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_82249ad0290a130e288af5a17d1ec87e.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation.135d98438b", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation"], "alias": "dbt_utils_unique_combination_o_82249ad0290a130e288af5a17d1ec87e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_82249ad0290a130e288af5a17d1ec87e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_82249ad0290a130e288af5a17d1ec87e"}, "created_at": 1723671294.9479308, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_82249ad0290a130e288af5a17d1ec87e\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__problem", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__problem"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_82249ad0290a130e288af5a17d1ec87e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        problem_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem`\n    group by problem_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__problem", "attached_node": "model.servicenow.stg_servicenow__problem"}, "test.servicenow.not_null_stg_servicenow__problem_task_problem_task_id.2d07d24f54": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "problem_task_id", "model": "{{ get_where_subquery(ref('stg_servicenow__problem_task')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__problem_task_problem_task_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__problem_task_problem_task_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__problem_task_problem_task_id.2d07d24f54", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__problem_task_problem_task_id"], "alias": "not_null_stg_servicenow__problem_task_problem_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.949902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__problem_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__problem_task"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__problem_task_problem_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect problem_task_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task`\nwhere problem_task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "problem_task_id", "file_key_name": "models.stg_servicenow__problem_task", "attached_node": "model.servicenow.stg_servicenow__problem_task"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation.e59f50cae6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["problem_task_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__problem_task')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_4b0b06f6181eb4745dadebceb15254b9.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation.e59f50cae6", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation"], "alias": "dbt_utils_unique_combination_o_4b0b06f6181eb4745dadebceb15254b9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4b0b06f6181eb4745dadebceb15254b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4b0b06f6181eb4745dadebceb15254b9"}, "created_at": 1723671294.950628, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4b0b06f6181eb4745dadebceb15254b9\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__problem_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__problem_task"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_4b0b06f6181eb4745dadebceb15254b9.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        problem_task_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task`\n    group by problem_task_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__problem_task", "attached_node": "model.servicenow.stg_servicenow__problem_task"}, "test.servicenow.not_null_stg_servicenow__incident_incident_id.b01cee4a78": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "incident_id", "model": "{{ get_where_subquery(ref('stg_servicenow__incident')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__incident_incident_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__incident_incident_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__incident_incident_id.b01cee4a78", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__incident_incident_id"], "alias": "not_null_stg_servicenow__incident_incident_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.952393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__incident", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__incident"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__incident_incident_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect incident_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__incident`\nwhere incident_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "incident_id", "file_key_name": "models.stg_servicenow__incident", "attached_node": "model.servicenow.stg_servicenow__incident"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation.4383616e6a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["incident_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__incident')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_8be0af367faef4490979e29aa876f3c1.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation.4383616e6a", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation"], "alias": "dbt_utils_unique_combination_o_8be0af367faef4490979e29aa876f3c1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8be0af367faef4490979e29aa876f3c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8be0af367faef4490979e29aa876f3c1"}, "created_at": 1723671294.953124, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8be0af367faef4490979e29aa876f3c1\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__incident", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__incident"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_8be0af367faef4490979e29aa876f3c1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        incident_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__incident`\n    group by incident_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__incident", "attached_node": "model.servicenow.stg_servicenow__incident"}, "test.servicenow.not_null_stg_servicenow__change_task_change_task_id.2d5ae34a7b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "change_task_id", "model": "{{ get_where_subquery(ref('stg_servicenow__change_task')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__change_task_change_task_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__change_task_change_task_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__change_task_change_task_id.2d5ae34a7b", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__change_task_change_task_id"], "alias": "not_null_stg_servicenow__change_task_change_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.954666, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__change_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__change_task"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__change_task_change_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect change_task_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task`\nwhere change_task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "change_task_id", "file_key_name": "models.stg_servicenow__change_task", "attached_node": "model.servicenow.stg_servicenow__change_task"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation.11bf5182ff": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["change_task_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__change_task')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_758ec134186d8ce4db1a6153ebd05bdc.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation.11bf5182ff", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation"], "alias": "dbt_utils_unique_combination_o_758ec134186d8ce4db1a6153ebd05bdc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_758ec134186d8ce4db1a6153ebd05bdc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_758ec134186d8ce4db1a6153ebd05bdc"}, "created_at": 1723671294.9555252, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_758ec134186d8ce4db1a6153ebd05bdc\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__change_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__change_task"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_758ec134186d8ce4db1a6153ebd05bdc.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        change_task_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task`\n    group by change_task_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__change_task", "attached_node": "model.servicenow.stg_servicenow__change_task"}, "test.servicenow.not_null_stg_servicenow__change_request_change_request_id.0f2ee81c5f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "change_request_id", "model": "{{ get_where_subquery(ref('stg_servicenow__change_request')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__change_request_change_request_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__change_request_change_request_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__change_request_change_request_id.0f2ee81c5f", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__change_request_change_request_id"], "alias": "not_null_stg_servicenow__change_request_change_request_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.957062, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__change_request", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__change_request"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__change_request_change_request_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect change_request_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request`\nwhere change_request_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "change_request_id", "file_key_name": "models.stg_servicenow__change_request", "attached_node": "model.servicenow.stg_servicenow__change_request"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation.f8d65569ae": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["change_request_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__change_request')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_2bf4c25162ab05fcec1fd4cde281ae0f.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation.f8d65569ae", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation"], "alias": "dbt_utils_unique_combination_o_2bf4c25162ab05fcec1fd4cde281ae0f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2bf4c25162ab05fcec1fd4cde281ae0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2bf4c25162ab05fcec1fd4cde281ae0f"}, "created_at": 1723671294.957946, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2bf4c25162ab05fcec1fd4cde281ae0f\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__change_request", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__change_request"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_2bf4c25162ab05fcec1fd4cde281ae0f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        change_request_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request`\n    group by change_request_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__change_request", "attached_node": "model.servicenow.stg_servicenow__change_request"}, "test.servicenow.not_null_stg_servicenow__core_company_core_company_id.e8ef462897": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "core_company_id", "model": "{{ get_where_subquery(ref('stg_servicenow__core_company')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__core_company_core_company_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__core_company_core_company_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__core_company_core_company_id.e8ef462897", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__core_company_core_company_id"], "alias": "not_null_stg_servicenow__core_company_core_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.9595451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__core_company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__core_company"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__core_company_core_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect core_company_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company`\nwhere core_company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "core_company_id", "file_key_name": "models.stg_servicenow__core_company", "attached_node": "model.servicenow.stg_servicenow__core_company"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation.85b30d325b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["core_company_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__core_company')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_f612d1e13877c6192a8e340f8feda8ae.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation.85b30d325b", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation"], "alias": "dbt_utils_unique_combination_o_f612d1e13877c6192a8e340f8feda8ae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f612d1e13877c6192a8e340f8feda8ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f612d1e13877c6192a8e340f8feda8ae"}, "created_at": 1723671294.9602618, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f612d1e13877c6192a8e340f8feda8ae\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__core_company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__core_company"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_f612d1e13877c6192a8e340f8feda8ae.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        core_company_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company`\n    group by core_company_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__core_company", "attached_node": "model.servicenow.stg_servicenow__core_company"}, "test.servicenow.not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.83f2c6d37c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cmdb_ci_id", "model": "{{ get_where_subquery(ref('stg_servicenow__cmdb_ci')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__cmdb_ci_cmdb_ci_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.83f2c6d37c", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__cmdb_ci_cmdb_ci_id"], "alias": "not_null_stg_servicenow__cmdb_ci_cmdb_ci_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.961965, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__cmdb_ci", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__cmdb_ci"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cmdb_ci_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci`\nwhere cmdb_ci_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cmdb_ci_id", "file_key_name": "models.stg_servicenow__cmdb_ci", "attached_node": "model.servicenow.stg_servicenow__cmdb_ci"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation.4d25f1839d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["cmdb_ci_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__cmdb_ci')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_b3e2b49df95b8af51abe3839b59cbd3a.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation.4d25f1839d", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation"], "alias": "dbt_utils_unique_combination_o_b3e2b49df95b8af51abe3839b59cbd3a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b3e2b49df95b8af51abe3839b59cbd3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b3e2b49df95b8af51abe3839b59cbd3a"}, "created_at": 1723671294.9626722, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b3e2b49df95b8af51abe3839b59cbd3a\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__cmdb_ci", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__cmdb_ci"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_b3e2b49df95b8af51abe3839b59cbd3a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        cmdb_ci_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci`\n    group by cmdb_ci_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__cmdb_ci", "attached_node": "model.servicenow.stg_servicenow__cmdb_ci"}, "test.servicenow.not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.f7770250de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cmdb_ci_service_id", "model": "{{ get_where_subquery(ref('stg_servicenow__cmdb_ci_service')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.f7770250de", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id"], "alias": "not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.964316, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__cmdb_ci_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__cmdb_ci_service"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cmdb_ci_service_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_service`\nwhere cmdb_ci_service_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cmdb_ci_service_id", "file_key_name": "models.stg_servicenow__cmdb_ci_service", "attached_node": "model.servicenow.stg_servicenow__cmdb_ci_service"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation.e596372710": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["cmdb_ci_service_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__cmdb_ci_service')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_c19143a81dd4519e61d067410ae2c4b5.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation.e596372710", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c19143a81dd4519e61d067410ae2c4b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c19143a81dd4519e61d067410ae2c4b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c19143a81dd4519e61d067410ae2c4b5"}, "created_at": 1723671294.96503, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c19143a81dd4519e61d067410ae2c4b5\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__cmdb_ci_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__cmdb_ci_service"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_c19143a81dd4519e61d067410ae2c4b5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        cmdb_ci_service_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_service`\n    group by cmdb_ci_service_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__cmdb_ci_service", "attached_node": "model.servicenow.stg_servicenow__cmdb_ci_service"}, "test.servicenow.not_null_stg_servicenow__sys_user_group_sys_user_group_id.a4600fb5c8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sys_user_group_id", "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_group')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__sys_user_group_sys_user_group_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__sys_user_group_sys_user_group_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__sys_user_group_sys_user_group_id.a4600fb5c8", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__sys_user_group_sys_user_group_id"], "alias": "not_null_stg_servicenow__sys_user_group_sys_user_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.966764, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_group"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__sys_user_group_sys_user_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sys_user_group_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group`\nwhere sys_user_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sys_user_group_id", "file_key_name": "models.stg_servicenow__sys_user_group", "attached_node": "model.servicenow.stg_servicenow__sys_user_group"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation.6fd66f39ed": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_group_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_group')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_afc9ae021fc2631c67d2be6f71fc25ef.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation.6fd66f39ed", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation"], "alias": "dbt_utils_unique_combination_o_afc9ae021fc2631c67d2be6f71fc25ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_afc9ae021fc2631c67d2be6f71fc25ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_afc9ae021fc2631c67d2be6f71fc25ef"}, "created_at": 1723671294.9677708, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_afc9ae021fc2631c67d2be6f71fc25ef\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_group"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_afc9ae021fc2631c67d2be6f71fc25ef.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_group_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group`\n    group by sys_user_group_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__sys_user_group", "attached_node": "model.servicenow.stg_servicenow__sys_user_group"}, "test.servicenow.not_null_stg_servicenow__sys_user_role_sys_user_role_id.7a1587bcfd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sys_user_role_id", "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_role')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__sys_user_role_sys_user_role_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__sys_user_role_sys_user_role_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__sys_user_role_sys_user_role_id.7a1587bcfd", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__sys_user_role_sys_user_role_id"], "alias": "not_null_stg_servicenow__sys_user_role_sys_user_role_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.969669, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_role"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__sys_user_role_sys_user_role_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sys_user_role_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_role`\nwhere sys_user_role_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sys_user_role_id", "file_key_name": "models.stg_servicenow__sys_user_role", "attached_node": "model.servicenow.stg_servicenow__sys_user_role"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation.7f807d9e69": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_role_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_role')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_9cd35743846a3fa22876ed554c0b7423.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation.7f807d9e69", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation"], "alias": "dbt_utils_unique_combination_o_9cd35743846a3fa22876ed554c0b7423", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9cd35743846a3fa22876ed554c0b7423", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9cd35743846a3fa22876ed554c0b7423"}, "created_at": 1723671294.970399, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9cd35743846a3fa22876ed554c0b7423\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_role"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_9cd35743846a3fa22876ed554c0b7423.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_role_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_role`\n    group by sys_user_role_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__sys_user_role", "attached_node": "model.servicenow.stg_servicenow__sys_user_role"}, "test.servicenow.not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.c17ac67033": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sys_user_has_role_id", "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_has_role')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.c17ac67033", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id"], "alias": "not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.972192, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_has_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_has_role"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sys_user_has_role_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_has_role`\nwhere sys_user_has_role_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sys_user_has_role_id", "file_key_name": "models.stg_servicenow__sys_user_has_role", "attached_node": "model.servicenow.stg_servicenow__sys_user_has_role"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation.9010f1a7f8": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_has_role_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_has_role')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_fa3a53bf6d1146d927594aa6d72ef617.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation.9010f1a7f8", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation"], "alias": "dbt_utils_unique_combination_o_fa3a53bf6d1146d927594aa6d72ef617", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fa3a53bf6d1146d927594aa6d72ef617", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fa3a53bf6d1146d927594aa6d72ef617"}, "created_at": 1723671294.9729059, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fa3a53bf6d1146d927594aa6d72ef617\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_has_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_has_role"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_fa3a53bf6d1146d927594aa6d72ef617.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_has_role_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_has_role`\n    group by sys_user_has_role_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__sys_user_has_role", "attached_node": "model.servicenow.stg_servicenow__sys_user_has_role"}, "test.servicenow.not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.137c7e7cfc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sys_user_grmember_id", "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_grmember')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.137c7e7cfc", "fqn": ["servicenow", "staging", "not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id"], "alias": "not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671294.974658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_grmember", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_grmember"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sys_user_grmember_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_grmember`\nwhere sys_user_grmember_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sys_user_grmember_id", "file_key_name": "models.stg_servicenow__sys_user_grmember", "attached_node": "model.servicenow.stg_servicenow__sys_user_grmember"}, "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation.38800293d6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sys_user_grmember_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_servicenow__sys_user_grmember')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_132a96b43e1dd1a66d4841847d8b550e.sql", "original_file_path": "models/staging/stg_servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation.38800293d6", "fqn": ["servicenow", "staging", "dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation"], "alias": "dbt_utils_unique_combination_o_132a96b43e1dd1a66d4841847d8b550e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_132a96b43e1dd1a66d4841847d8b550e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_132a96b43e1dd1a66d4841847d8b550e"}, "created_at": 1723671294.9753878, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_132a96b43e1dd1a66d4841847d8b550e\") }}", "language": "sql", "refs": [{"name": "stg_servicenow__sys_user_grmember", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.stg_servicenow__sys_user_grmember"]}, "compiled_path": "target/compiled/servicenow/models/staging/stg_servicenow.yml/dbt_utils_unique_combination_o_132a96b43e1dd1a66d4841847d8b550e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sys_user_grmember_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_grmember`\n    group by sys_user_grmember_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_servicenow__sys_user_grmember", "attached_node": "model.servicenow.stg_servicenow__sys_user_grmember"}, "model.servicenow.servicenow__incident_enhanced": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__incident_enhanced", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__incident_enhanced.sql", "original_file_path": "models/servicenow__incident_enhanced.sql", "unique_id": "model.servicenow.servicenow__incident_enhanced", "fqn": ["servicenow", "servicenow__incident_enhanced"], "alias": "servicenow__incident_enhanced", "checksum": {"name": "sha256", "checksum": "b8ec0152b30504cc3798ae2b27638da424f1ba263cc192288089ab370323951b"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents an incident with additional information about users who have interacted with it and relevant timestamps.", "columns": {"incident_id": {"name": "incident_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_category": {"name": "incident_category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_subcategory": {"name": "incident_subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_severity": {"name": "incident_severity", "description": "The level of impact or seriousness assigned to the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_state": {"name": "incident_state", "description": "The current state or status of the incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_created_at": {"name": "incident_created_at", "description": "Date and time when the incident record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_updated_at": {"name": "incident_updated_at", "description": "Date and time when the incident record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopener_email": {"name": "reopener_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopener_manager_value": {"name": "reopener_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopener_department_value": {"name": "reopener_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopener_name": {"name": "reopener_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopener_roles": {"name": "reopener_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_reopened_time": {"name": "incident_reopened_time", "description": "The timestamp indicating when the issue or incident was reopened after being previously resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_resolved_at": {"name": "incident_resolved_at", "description": "The timestamp indicating when the issue was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_link": {"name": "resolved_by_link", "description": "A link to the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_value": {"name": "resolved_by_value", "description": "The name or identifier of the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolver_email": {"name": "resolver_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolver_manager_value": {"name": "resolver_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolver_department_value": {"name": "resolver_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolver_name": {"name": "resolver_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolver_roles": {"name": "resolver_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_impact": {"name": "business_impact", "description": "Information about the impact of the issue on business operations or services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_stc": {"name": "business_stc", "description": "The business service that is impacted by the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_stc": {"name": "calendar_stc", "description": "The calendar or schedule associated with the business service impacted by the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_id_link": {"name": "caller_id_link", "description": "A link to the person or entity identified as the caller or reporter of the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_id_value": {"name": "caller_id_value", "description": "The name or identifier of the person or entity identified as the caller or reporter of the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_email": {"name": "caller_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_manager_value": {"name": "caller_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_department_value": {"name": "caller_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_name": {"name": "caller_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_roles": {"name": "caller_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_cause": {"name": "incident_cause", "description": "A description or explanation of the root cause of the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_link": {"name": "caused_by_link", "description": "A link to the record or entity that caused or triggered the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_value": {"name": "caused_by_value", "description": "The name or identifier of the record or entity that caused or triggered the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_incidents": {"name": "child_incidents", "description": "The number of incidents that are identified as child incidents linked to the current incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_code": {"name": "close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hold_reason": {"name": "hold_reason", "description": "The reason or rationale for placing the issue or incident on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notify": {"name": "notify", "description": "Indicates whether notifications or alerts have been configured for the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin_id_link": {"name": "origin_id_link", "description": "A link to the original or source record from which the current record originated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin_id_value": {"name": "origin_id_value", "description": "The unique identifier or name associated with the original or source record linked to the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_incident_link": {"name": "parent_incident_link", "description": "A link to the parent incident record, indicating the incident from which the current incident is derived or related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_incident_value": {"name": "parent_incident_value", "description": "The unique identifier or name associated with the parent incident record linked to the current incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_id_link": {"name": "problem_id_link", "description": "A link to the problem record associated with the current issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_id_value": {"name": "problem_id_value", "description": "The unique identifier or name associated with the problem record linked to the current issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_link": {"name": "rfc_link", "description": "A link to the Request for Change (RFC) associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_value": {"name": "rfc_value", "description": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_minutes_created_to_resolved": {"name": "incident_minutes_created_to_resolved", "description": "Minutes elapsed from when incident was created to resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table"}, "created_at": 1723671334.440887, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__incident_enhanced`", "raw_code": "with incident as (\n\n    select *\n    from {{ ref('stg_servicenow__incident') }}\n),\n\nsys_user as (\n    \n    select *\n    from {{ ref('stg_servicenow__sys_user') }}\n),\n\nincident_enhanced as (\n    select\n        incident.incident_id,\n        incident.incident_category,\n        incident.incident_subcategory,\n        incident.incident_severity,\n        incident.incident_state,\n        incident.incident_created_at,\n        incident.incident_updated_at,\n        incident.reopened_by_link,\n        incident.reopened_by_value,\n        reopener.email as reopener_email,\n        reopener.manager_value as reopener_manager_value,\n        reopener.department_value as reopener_department_value,\n        reopener.sys_user_name as reopener_name,\n        reopener.sys_user_roles as reopener_roles,\n        incident.incident_reopened_time,\n        incident.incident_resolved_at,\n        incident.resolved_by_link,\n        incident.resolved_by_value,\n        resolver.email as resolver_email,\n        resolver.manager_value as resolver_manager_value,\n        resolver.department_value as resolver_department_value,\n        resolver.sys_user_name as resolver_name,\n        resolver.sys_user_roles as resolver_roles,\n        incident.business_impact,\n        incident.business_stc,\n        incident.calendar_stc,\n        incident.caller_id_link,\n        incident.caller_id_value,\n        caller_info.email as caller_email,\n        caller_info.manager_value as caller_manager_value,\n        caller_info.department_value as caller_department_value,\n        caller_info.sys_user_name as caller_name,\n        caller_info.sys_user_roles as caller_roles,\n        incident.incident_cause,\n        incident.caused_by_link,\n        incident.caused_by_value,\n        coalesce(incident.child_incidents,0) as child_incidents,\n        incident.close_code,\n        incident.hold_reason,\n        incident.notify,\n        incident.origin_id_link,\n        incident.origin_id_value,\n        incident.parent_incident_link,\n        incident.parent_incident_value,\n        incident.problem_id_link,\n        incident.problem_id_value,\n        incident.reopen_count,\n        incident.rfc_link,\n        incident.rfc_value,\n        {{ dbt.datediff(\"cast(incident_created_at as \" ~ dbt.type_timestamp() ~ \" ) \", \"cast(incident_resolved_at as \" ~ dbt.type_timestamp() ~ \" ) \", 'minute') }} as incident_minutes_created_to_resolved,\n        incident._fivetran_synced,\n        incident.source_relation\n    from incident\n    left join sys_user reopener\n        on incident.reopened_by_value = reopener.sys_user_id\n        and incident.source_relation = reopener.source_relation\n    left join sys_user resolver\n        on incident.resolved_by_value = resolver.sys_user_id\n        and incident.source_relation = resolver.source_relation\n    left join sys_user caller_info\n        on incident.caller_id_value = caller_info.sys_user_id\n        and incident.source_relation = caller_info.source_relation\n)\n\nselect *\nfrom incident_enhanced", "language": "sql", "refs": [{"name": "stg_servicenow__incident", "package": null, "version": null}, {"name": "stg_servicenow__sys_user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.datediff"], "nodes": ["model.servicenow.stg_servicenow__incident", "model.servicenow.stg_servicenow__sys_user"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__incident_enhanced.sql", "compiled": true, "compiled_code": "with incident as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__incident`\n),\n\nsys_user as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n),\n\nincident_enhanced as (\n    select\n        incident.incident_id,\n        incident.incident_category,\n        incident.incident_subcategory,\n        incident.incident_severity,\n        incident.incident_state,\n        incident.incident_created_at,\n        incident.incident_updated_at,\n        incident.reopened_by_link,\n        incident.reopened_by_value,\n        reopener.email as reopener_email,\n        reopener.manager_value as reopener_manager_value,\n        reopener.department_value as reopener_department_value,\n        reopener.sys_user_name as reopener_name,\n        reopener.sys_user_roles as reopener_roles,\n        incident.incident_reopened_time,\n        incident.incident_resolved_at,\n        incident.resolved_by_link,\n        incident.resolved_by_value,\n        resolver.email as resolver_email,\n        resolver.manager_value as resolver_manager_value,\n        resolver.department_value as resolver_department_value,\n        resolver.sys_user_name as resolver_name,\n        resolver.sys_user_roles as resolver_roles,\n        incident.business_impact,\n        incident.business_stc,\n        incident.calendar_stc,\n        incident.caller_id_link,\n        incident.caller_id_value,\n        caller_info.email as caller_email,\n        caller_info.manager_value as caller_manager_value,\n        caller_info.department_value as caller_department_value,\n        caller_info.sys_user_name as caller_name,\n        caller_info.sys_user_roles as caller_roles,\n        incident.incident_cause,\n        incident.caused_by_link,\n        incident.caused_by_value,\n        coalesce(incident.child_incidents,0) as child_incidents,\n        incident.close_code,\n        incident.hold_reason,\n        incident.notify,\n        incident.origin_id_link,\n        incident.origin_id_value,\n        incident.parent_incident_link,\n        incident.parent_incident_value,\n        incident.problem_id_link,\n        incident.problem_id_value,\n        incident.reopen_count,\n        incident.rfc_link,\n        incident.rfc_value,\n        \n\n    datetime_diff(\n        cast(cast(incident_resolved_at as timestamp )  as datetime),\n        cast(cast(incident_created_at as timestamp )  as datetime),\n        minute\n    )\n\n   as incident_minutes_created_to_resolved,\n        incident._fivetran_synced,\n        incident.source_relation\n    from incident\n    left join sys_user reopener\n        on incident.reopened_by_value = reopener.sys_user_id\n        and incident.source_relation = reopener.source_relation\n    left join sys_user resolver\n        on incident.resolved_by_value = resolver.sys_user_id\n        and incident.source_relation = resolver.source_relation\n    left join sys_user caller_info\n        on incident.caller_id_value = caller_info.sys_user_id\n        and incident.source_relation = caller_info.source_relation\n)\n\nselect *\nfrom incident_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation.210ca84c74": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["incident_id", "source_relation"], "model": "{{ get_where_subquery(ref('servicenow__incident_enhanced')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation", "resource_type": "test", "package_name": "servicenow", "path": "dbt_utils_unique_combination_o_5f3f0f869a04e45ad2e7bb4b93198ede.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation.210ca84c74", "fqn": ["servicenow", "dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation"], "alias": "dbt_utils_unique_combination_o_5f3f0f869a04e45ad2e7bb4b93198ede", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5f3f0f869a04e45ad2e7bb4b93198ede", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5f3f0f869a04e45ad2e7bb4b93198ede"}, "created_at": 1723671334.4690611, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5f3f0f869a04e45ad2e7bb4b93198ede\") }}", "language": "sql", "refs": [{"name": "servicenow__incident_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__incident_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/dbt_utils_unique_combination_o_5f3f0f869a04e45ad2e7bb4b93198ede.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        incident_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__incident_enhanced`\n    group by incident_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.servicenow__incident_enhanced", "attached_node": "model.servicenow.servicenow__incident_enhanced"}, "model.servicenow.servicenow__task_enhanced": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_servicenow", "name": "servicenow__task_enhanced", "resource_type": "model", "package_name": "servicenow", "path": "servicenow__task_enhanced.sql", "original_file_path": "models/servicenow__task_enhanced.sql", "unique_id": "model.servicenow.servicenow__task_enhanced", "fqn": ["servicenow", "servicenow__task_enhanced"], "alias": "servicenow__task_enhanced", "checksum": {"name": "sha256", "checksum": "5a79531ee8fde06ed759fc171753bb67beda76a895452ce94f3a2a9efb1a062c"}, "config": {"enabled": true, "alias": null, "schema": "servicenow", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a task with additional information about its associated problem, incident, or change request. Finally, it contains user information for who opened, started, updated, reported, fixed, closed, requested, reported, or confirmed the task.", "columns": {"task_id": {"name": "task_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_task_active": {"name": "is_task_active", "description": "Flag indicating whether the task is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activity_due": {"name": "activity_due", "description": "The due date or time for completing the activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_assignee_list": {"name": "additional_assignee_list", "description": "List of additional users or assignees associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval": {"name": "approval", "description": "Information related to the approval status and process for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval_history": {"name": "approval_history", "description": "History of approvals associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval_set": {"name": "approval_set", "description": "Set of approvals linked to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assigned_to_link": {"name": "assigned_to_link", "description": "Link to the user or group assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assigned_to_value": {"name": "assigned_to_value", "description": "Value representing the user or group assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_link": {"name": "assignment_group_link", "description": "Link to the assignment group associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_value": {"name": "assignment_group_value", "description": "Value representing the assignment group associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_duration": {"name": "business_duration", "description": "The duration of the task in terms of business hours.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_link": {"name": "business_service_link", "description": "Link to the business service associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_value": {"name": "business_service_value", "description": "Value representing the business service associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_duration": {"name": "calendar_duration", "description": "The duration of the task in terms of calendar time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_notes": {"name": "close_notes", "description": "Additional notes or comments recorded upon task closure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_closed_at": {"name": "task_closed_at", "description": "Date and time when the task was closed or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_minutes_open_to_close": {"name": "task_minutes_open_to_close", "description": "The number of minutes from time that the task was opened to the time that the task was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_by_link": {"name": "closed_by_link", "description": "Link to the user who closed or completed the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_by_value": {"name": "closed_by_value", "description": "Value representing the user who closed or completed the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments": {"name": "comments", "description": "General comments or notes related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments_and_work_notes": {"name": "comments_and_work_notes", "description": "Combined information of comments and work notes recorded during the record's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_type": {"name": "contact_type", "description": "Type of contact associated with the record (e.g., customer, vendor).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_description": {"name": "task_description", "description": "Detailed description or information about the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_due_date_at": {"name": "task_due_date_at", "description": "The date by which the task is expected to be completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_start": {"name": "expected_start", "description": "The expected start date or time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_follow_up_at": {"name": "task_follow_up_at", "description": "Timestamp of when follow up was applied to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_list": {"name": "group_list", "description": "List of groups associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "impact": {"name": "impact", "description": "Assessment of the impact that completing or not completing the task may have. This is the business loss and potential damage (for example, financial, customer, regulation, security, reputation, brand) caused by the incident", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "knowledge": {"name": "knowledge", "description": "Indication of whether the task is associated with knowledge or documentation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_made_sla": {"name": "is_made_sla", "description": "Indicates whether the task was completed within the agreed-upon Service Level Agreement (SLA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_number": {"name": "task_number", "description": "Unique identifier or reference number assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_opened_at": {"name": "task_opened_at", "description": "Date and time when the task was initially opened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_by_link": {"name": "opened_by_link", "description": "Link to the user who initially opened the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_by_value": {"name": "opened_by_value", "description": "Value representing the user who initially opened the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_order": {"name": "task_order", "description": "Order or sequence number associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_link": {"name": "parent_link", "description": "Link to the parent task or record associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_value": {"name": "parent_value", "description": "Value representing the parent task or record associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Priority level assigned to the task. The priority field is automatically calculated based on the values of impact and urgency. This determines the sequence in which the record should be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reassignment_count": {"name": "reassignment_count", "description": "Count of how many times the task has been reassigned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route_reason": {"name": "route_reason", "description": "Reason or criteria for routing the task to a particular user or group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Brief or concise summary of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_due": {"name": "sla_due", "description": "Date and time by which the record is expected to meet the Service Level Agreement (SLA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_state": {"name": "task_state", "description": "Current state or status of the task (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_created_at": {"name": "task_created_at", "description": "Date and time when the task record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_updated_at": {"name": "task_updated_at", "description": "Date and time when the task record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_updated_date": {"name": "task_updated_date", "description": "The day the task last got updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_effective_number": {"name": "task_effective_number", "description": "Effective number or identifier associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upon_approval": {"name": "upon_approval", "description": "Actions or steps to be taken upon the approval of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upon_reject": {"name": "upon_reject", "description": "Actions or steps to be taken upon the rejection of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgency": {"name": "urgency", "description": "Level of urgency associated with the record. Speed at which the business expects the record to be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "watch_list": {"name": "watch_list", "description": "List of users or groups who are monitoring or \"watching\" the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_end": {"name": "work_end", "description": "Date and time when the work on the task is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_notes": {"name": "work_notes", "description": "Notes or comments recorded during the work on the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_notes_list": {"name": "work_notes_list", "description": "List of work notes recorded during the task's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_start": {"name": "work_start", "description": "Date and time when the work on the task is scheduled to start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_category": {"name": "problem_category", "description": "The category of the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cause_notes": {"name": "cause_notes", "description": "Additional notes or details about the cause of a particular issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_at": {"name": "problem_confirmed_at", "description": "The timestamp indicating when the problem was confirmed or acknowledged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmed_by_value": {"name": "problem_confirmed_by_value", "description": "The name or identifier of the person or entity who confirmed or acknowledged the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_first_reported_by_task_link": {"name": "problem_first_reported_by_task_link", "description": "A link to the task or activity that first reported the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_first_reported_by_task_value": {"name": "problem_first_reported_by_task_value", "description": "Value representing the related task record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_at": {"name": "problem_fix_at", "description": "The timestamp indicating when the problem is scheduled or planned to be fixed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_by_value": {"name": "problem_fix_by_value", "description": "The name or identifier of the person or entity responsible for fixing the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fix_notes": {"name": "problem_fix_notes", "description": "Additional notes or details related to the fix for the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_major_problem": {"name": "is_major_problem", "description": "Indicates whether the issue is categorized as a major problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_state": {"name": "problem_state", "description": "The current state or status of the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_related_incidents": {"name": "problem_related_incidents", "description": "Number of incidents that are related to the current problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolution_code": {"name": "problem_resolution_code", "description": "The code or identifier associated with the resolution of the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolved_at": {"name": "problem_resolved_at", "description": "The timestamp indicating when the problem was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolved_by_value": {"name": "problem_resolved_by_value", "description": "The name or identifier of the person or entity who resolved the problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_subcategory": {"name": "problem_subcategory", "description": "The specific subcategory or classification of the issue, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_created_at": {"name": "problem_created_at", "description": "Date and time when the problem record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_updated_at": {"name": "problem_updated_at", "description": "Date and time when the problem record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_applied": {"name": "workaround_applied", "description": "Indicates whether a workaround has been applied to address the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_cause_code": {"name": "problem_task_cause_code", "description": "The code or identifier associated with the cause of the issue or problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_close_code": {"name": "problem_task_close_code", "description": "The code or identifier associated with the closure or resolution of the problem task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_type": {"name": "problem_task_type", "description": "The type or category of the task associated with the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_started_at": {"name": "problem_task_started_at", "description": "The timestamp indicating when the issue or incident was initiated or started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_by_value": {"name": "started_by_value", "description": "The name or identifier of the person or entity who initiated or started the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_type": {"name": "change_task_type", "description": "The type or category of the task associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_close_code": {"name": "change_task_close_code", "description": "The code or identifier associated with the closure or resolution of the change task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_created_from": {"name": "change_task_created_from", "description": "Information about the source or origin of the current record, indicating how it was created or generated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_on_hold": {"name": "is_change_on_hold", "description": "Indicates whether the change task is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_on_hold_reason": {"name": "change_on_hold_reason", "description": "The reason or rationale for placing the associated record on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_planned_end_date": {"name": "change_task_planned_end_date", "description": "The planned or scheduled end date for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_planned_start_date": {"name": "change_task_planned_start_date", "description": "The planned or scheduled start date for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_category": {"name": "change_request_category", "description": "The category of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_plan": {"name": "change_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_close_code": {"name": "change_request_close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_end_date": {"name": "change_request_end_date", "description": "The end date for the implementation or execution associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_implementation_plan": {"name": "change_request_implementation_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_justification": {"name": "change_request_justification", "description": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_request_on_hold": {"name": "is_change_request_on_hold", "description": "Indicates whether the change is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_on_hold_reason": {"name": "change_request_on_hold_reason", "description": "The reason or rationale for placing the change on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_phase": {"name": "change_request_phase", "description": "The phase or stage of the change request or change record within the change management process, indicating its progress or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_phase_state": {"name": "change_request_phase_state", "description": "The current state or status of the phase associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_reason": {"name": "change_request_reason", "description": "The reason or rationale behind the changes associated with the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_value": {"name": "change_requested_by_value", "description": "The name or identifier of the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requested_by_date": {"name": "change_requested_by_date", "description": "The date the change is requested for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_review_date": {"name": "change_request_review_date", "description": "The date when the change request was reviewed or evaluated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_review_status": {"name": "change_request_review_status", "description": "The status or outcome of the review process for the change request associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_risk": {"name": "change_request_risk", "description": "The level of risk associated with the changes, indicating the potential impact or consequences of implementing the modifications outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_scope": {"name": "change_request_scope", "description": "The scope or extent of the changes outlined in the current record, specifying the areas or components affected by the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_start_date": {"name": "change_request_start_date", "description": "The requested start date for the implementation or execution of the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_created_at": {"name": "change_request_created_at", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_updated_at": {"name": "change_request_updated_at", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_test_plan": {"name": "change_request_test_plan", "description": "Information about the plan or process for testing the changes requested by the change request of this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_type": {"name": "change_request_type", "description": "The type or category of the changes outlined in the current record, indicating the nature or purpose of the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_request_unauthorized": {"name": "is_change_request_unauthorized", "description": "Indicates whether the changes associated with the current record were made without proper authorization or approval.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_problem_task": {"name": "is_problem_task", "description": "A boolean of whether the task is a problem task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_change_task": {"name": "is_change_task", "description": "A boolean of whether the task is a change task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "creator_email": {"name": "creator_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "creator_manager_value": {"name": "creator_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "creator_department_value": {"name": "creator_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "creator_name": {"name": "creator_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "creator_roles": {"name": "creator_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updater_email": {"name": "updater_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updater_manager_value": {"name": "updater_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updater_department_value": {"name": "updater_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updater_name": {"name": "updater_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updater_roles": {"name": "updater_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opener_manager_value": {"name": "opener_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opener_email": {"name": "opener_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opener_department_value": {"name": "opener_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opener_name": {"name": "opener_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opener_roles": {"name": "opener_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignee_manager_value": {"name": "assignee_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignee_department_value": {"name": "assignee_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignee_roles": {"name": "assignee_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closer_email": {"name": "closer_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closer_manager_value": {"name": "closer_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closer_department_value": {"name": "closer_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closer_name": {"name": "closer_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closer_roles": {"name": "closer_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_starter_email": {"name": "problem_task_starter_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_starter_manager_value": {"name": "problem_task_starter_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_starter_department_value": {"name": "problem_task_starter_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_starter_name": {"name": "problem_task_starter_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_starter_roles": {"name": "problem_task_starter_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "associated_problem_id": {"name": "associated_problem_id", "description": "The associated problem with this task; the sys_id from the problem object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_email": {"name": "problem_confirmer_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_manager_value": {"name": "problem_confirmer_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_department_value": {"name": "problem_confirmer_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_name": {"name": "problem_confirmer_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_confirmer_roles": {"name": "problem_confirmer_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_email": {"name": "problem_fixer_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_manager_value": {"name": "problem_fixer_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_department_value": {"name": "problem_fixer_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_name": {"name": "problem_fixer_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_fixer_roles": {"name": "problem_fixer_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_is_known_error": {"name": "problem_is_known_error", "description": "Indicates whether the issue is a known error with a documented resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_email": {"name": "problem_resolver_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_manager_value": {"name": "problem_resolver_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_department_value": {"name": "problem_resolver_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_name": {"name": "problem_resolver_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_resolver_roles": {"name": "problem_resolver_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requester_email": {"name": "change_requester_email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requester_manager_value": {"name": "change_requester_manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requester_department_value": {"name": "change_requester_department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requester_name": {"name": "change_requester_name", "description": "The system username or identifier for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_requester_roles": {"name": "change_requester_roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "associated_change_request_id": {"name": "associated_change_request_id", "description": "The associated change request with this task; the sys_id from the change request object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_link": {"name": "cmdb_ci_link", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_value": {"name": "cmdb_ci_value", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_name": {"name": "cmdb_ci_name", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_name": {"name": "assignment_group_name", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_name": {"name": "business_service_name", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "servicenow://models/servicenow.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "servicenow", "materialized": "table"}, "created_at": 1723671489.857774, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__task_enhanced`", "raw_code": "with task as (\n\n  select *\n  from {{ ref('stg_servicenow__task') }}\n),\n\nproblem_task as (\n    \n  select *\n  from {{ ref('stg_servicenow__problem_task') }}\n),\n\nproblem as (\n    \n  select *\n  from {{ ref('stg_servicenow__problem') }}\n),\n\nchange_task as (\n    \n  select *\n  from {{ ref('stg_servicenow__change_task') }}\n),\n\nchange_request as (\n    \n  select *\n  from {{ ref('stg_servicenow__change_request') }}\n),\n\nsys_user as (\n    \n  select *\n  from {{ ref('stg_servicenow__sys_user') }}\n),\n\nsys_user_group as (\n    \n  select *\n  from {{ ref('stg_servicenow__sys_user_group') }}\n),\n\ncore_company as (\n    \n  select *\n  from {{ ref('stg_servicenow__core_company') }}\n),\n\ncmdb_ci as (\n\n  select *\n  from {{ ref('stg_servicenow__cmdb_ci') }}\n),\n\ncmdb_ci_service as (\n\n  select *\n  from {{ ref('stg_servicenow__cmdb_ci_service') }}\n),\n\ntask_enhanced as (\n\nselect \n\n  task.task_id,\n  task.is_task_active,\n  task.task_description,\n  task.activity_due,\n  task.priority,\n  task.impact,\n  task.urgency,\n  task.task_state,\n  task.task_number,\n  task.task_order,\n  cast( (case when problem_task.problem_task_id is not null \n    then true \n    else false \n  end) as {{ dbt.type_boolean() }}) as is_problem_task,\n  cast( (case when change_task.change_task_id is not null \n    then true \n    else false \n  end) as {{ dbt.type_boolean() }}) as is_change_task,\n  task.task_created_at,\n  task.sys_created_by,\n  task.cmdb_ci_link,\n  task.cmdb_ci_value,\n  cmdb_ci.cmdb_ci_name,\n  creator.email as creator_email,\n  creator.manager_value as creator_manager_value,\n  creator.department_value as creator_department_value,\n  creator.sys_user_name as creator_name,\n  creator.sys_user_roles as creator_roles,\n  task.task_updated_at,\n  cast ({{ dbt.date_trunc('day', 'task.task_updated_at') }} as date) as task_updated_date,\n  task.sys_updated_by,\n  updater.email as updater_email,\n  updater.manager_value as updater_manager_value,\n  updater.department_value as updater_department_value,\n  updater.sys_user_name as updater_name,\n  updater.sys_user_roles as updater_roles,\n  task.task_opened_at,\n  task.opened_by_link,\n  task.opened_by_value, \n  opener.manager_value as opener_manager_value,\n  opener.email as opener_email,\n  opener.department_value as opener_department_value,\n  opener.sys_user_name as opener_name,\n  opener.sys_user_roles as opener_roles,\n  task.assigned_to_link, \n  task.assigned_to_value,\n  assignee.email as assignee_email,\n  assignee.manager_value as assignee_manager_value,\n  assignee.department_value as assignee_department_value,\n  assignee.sys_user_name as assignee_name,\n  assignee.sys_user_roles as assignee_roles,\n  task.task_closed_at,\n  {{ dbt.datediff(\"cast(task.task_opened_at as \" ~ dbt.type_timestamp() ~ \" ) \", \"cast(task.task_closed_at as \" ~ dbt.type_timestamp() ~ \" ) \", 'minute') }} as task_minutes_open_to_close,\n  task.closed_by_link,\n  task.closed_by_value,\n  closer.email as closer_email,\n  closer.manager_value as closer_manager_value,\n  closer.department_value as closer_department_value,\n  closer.sys_user_name as closer_name,\n  closer.sys_user_roles as closer_roles,\n  task.task_effective_number,\n  task.additional_assignee_list,\n  task.approval,\n  task.approval_history,\n  task.approval_set,\n  task.assignment_group_link,\n  task.assignment_group_value,\n  assignment_group.sys_user_group_name as assignment_group_name,\n  task.business_duration,\n  task.calendar_duration,\n  task.business_service_link,\n  task.business_service_value,\n  business_service.cmdb_ci_service_name as business_service_name,\n  task.close_notes,\n  task.comments,\n  task.comments_and_work_notes,\n  task.company_link,\n  task.company_value, \n  core_company.company_name,\n  task.contact_type, \n  task.task_due_date_at,\n  task.expected_start,\n  task.task_follow_up_at,\n  task.group_list,\n  task.knowledge,\n  task.is_made_sla,\n  task.sla_due,\n  task.parent_link, \n  task.parent_value,\n  task.reassignment_count,\n  task.route_reason,\n  task.short_description,\n  task.sys_class_name,\n  task.sys_domain_link,\n  task.sys_domain_path,\n  task.sys_domain_value,\n  task.upon_approval,\n  task.upon_reject,\n  task.watch_list,\n  task.work_start,\n  task.work_end,\n  task.work_notes,\n  task.work_notes_list,\n  problem_task.problem_task_cause_code,\n  problem_task.problem_task_close_code,\n  problem_task.problem_task_type,\n  problem_task.problem_task_started_at,\n  problem_task.started_by_value,\n  problem_task_starter.email as problem_task_starter_email,\n  problem_task_starter.manager_value as problem_task_starter_manager_value,\n  problem_task_starter.department_value as problem_task_starter_department_value,\n  problem_task_starter.sys_user_name as problem_task_starter_name,\n  problem_task_starter.sys_user_roles as problem_task_starter_roles, \n  problem.problem_id as associated_problem_id,\n  problem.problem_category,\n  problem.cause_notes,\n  problem.problem_confirmed_at,\n  problem.problem_confirmed_by_value,\n  problem_confirmer.email as problem_confirmer_email,\n  problem_confirmer.manager_value as problem_confirmer_manager_value,\n  problem_confirmer.department_value as problem_confirmer_department_value,\n  problem_confirmer.sys_user_name as problem_confirmer_name,\n  problem_confirmer.sys_user_roles as problem_confirmer_roles,\n  problem.problem_first_reported_by_task_link,\n  problem.problem_first_reported_by_task_value,\n  problem.problem_fix_at,\n  problem.problem_fix_by_value,\n  problem_fixer.email as problem_fixer_email,\n  problem_fixer.manager_value as problem_fixer_manager_value,\n  problem_fixer.department_value as problem_fixer_department_value,\n  problem_fixer.sys_user_name as problem_fixer_name,\n  problem_fixer.sys_user_roles as problem_fixer_roles,\n  problem.problem_fix_notes,\n  problem.is_known_error as problem_is_known_error,\n  problem.is_major_problem,\n  problem.problem_state,\n  problem.problem_related_incidents,\n  problem.problem_resolution_code,\n  problem.problem_resolved_at,\n  problem.problem_resolved_by_value,\n  problem.workaround_applied,\n  problem_resolver.email as problem_resolver_email,\n  problem_resolver.manager_value as problem_resolver_manager_value,\n  problem_resolver.department_value as problem_resolver_department_value,\n  problem_resolver.sys_user_name as problem_resolver_name,\n  problem_resolver.sys_user_roles as problem_resolver_roles,\n  problem.problem_subcategory,\n  problem.problem_created_at,\n  problem.problem_updated_at,\n  change_task.change_task_type,\n  change_task.change_task_close_code,\n  change_task.change_task_created_from,\n  change_task.is_change_on_hold,\n  change_task.change_on_hold_reason,\n  change_task.change_task_planned_end_date,\n  change_task.change_task_planned_start_date,\n  change_request.change_request_id as associated_change_request_id,\n  change_request.change_request_created_at,\n  change_request.change_request_updated_at,\n  change_request.change_request_category,\n  change_request.change_plan,\n  change_request.change_request_close_code,\n  change_request.change_request_end_date,\n  change_request.change_request_implementation_plan,\n  change_request.change_request_justification,\n  change_request.is_change_request_on_hold,\n  change_request.change_request_on_hold_reason,\n  change_request.change_request_phase,\n  change_request.change_request_phase_state,\n  change_request.change_request_reason,\n  change_request.change_requested_by_date,\n  change_request.change_requested_by_value,\n  change_requester.email as change_requester_email,\n  change_requester.manager_value as change_requester_manager_value,\n  change_requester.department_value as change_requester_department_value,\n  change_requester.sys_user_name as change_requester_name,\n  change_requester.sys_user_roles as change_requester_roles,\n  change_request.change_request_review_date,\n  change_request.change_request_review_status,\n  change_request.change_request_risk,\n  change_request.change_request_scope,\n  change_request.change_request_start_date,\n  change_request.change_request_test_plan,\n  change_request.change_request_type,\n  change_request.is_change_request_unauthorized,\n  task.source_relation\n\nfrom task\nleft join core_company\n  on task.company_value = core_company.core_company_id\n  and task.source_relation = core_company.source_relation\nleft join problem_task\n  on task.task_id = problem_task.problem_task_id\n  and task.source_relation = problem_task.source_relation\nleft join sys_user problem_task_starter\n  on problem_task.started_by_value = problem_task_starter.sys_user_id\n  and problem_task.source_relation = problem_task_starter.source_relation\nleft join problem\n  on problem_task.problem_value = problem.problem_id\n  and problem_task.source_relation = problem.source_relation\nleft join sys_user problem_confirmer\n  on problem.problem_confirmed_by_value = problem_confirmer.sys_user_id\n  and problem.source_relation = problem_confirmer.source_relation\nleft join sys_user problem_fixer\n  on problem.problem_fix_by_value = problem_fixer.sys_user_id\n  and problem.source_relation = problem_fixer.source_relation\nleft join sys_user problem_resolver\n  on problem.problem_resolved_by_value = problem_resolver.sys_user_id\n  and problem.source_relation = problem_resolver.source_relation\nleft join change_task\n  on task.task_id = change_task.change_task_id\n  and task.source_relation = change_task.source_relation\nleft join change_request\n  on change_task.change_request_value = change_request.change_request_id\n  and change_task.source_relation = change_request.source_relation\nleft join sys_user change_requester\n  on change_request.change_requested_by_value = change_requester.sys_user_id\n  and change_request.source_relation = change_requester.source_relation\nleft join sys_user assignee\n  on task.assigned_to_value = assignee.sys_user_id\n  and task.source_relation = assignee.source_relation\nleft join sys_user closer \n  on task.closed_by_value = closer.sys_user_id\n  and task.source_relation = closer.source_relation\nleft join sys_user opener\n  on task.opened_by_value = opener.sys_user_id\n  and task.source_relation = opener.source_relation\nleft join sys_user creator\n  on task.sys_created_by = creator.sys_user_id\n  and task.source_relation = creator.source_relation\nleft join sys_user updater\n  on task.sys_updated_by = updater.sys_user_id\n  and task.source_relation = updater.source_relation\nleft join sys_user_group assignment_group\n  on task.assignment_group_value = assignment_group.sys_user_group_id\n  and task.source_relation = assignment_group.source_relation\nleft join cmdb_ci\n  on task.cmdb_ci_value = cmdb_ci.cmdb_ci_id\n  and task.source_relation = cmdb_ci.source_relation\nleft join cmdb_ci_service business_service\n  on task.business_service_value = business_service.cmdb_ci_service_id\n  and task.source_relation = business_service.source_relation\n)\n\nselect *\nfrom task_enhanced", "language": "sql", "refs": [{"name": "stg_servicenow__task", "package": null, "version": null}, {"name": "stg_servicenow__problem_task", "package": null, "version": null}, {"name": "stg_servicenow__problem", "package": null, "version": null}, {"name": "stg_servicenow__change_task", "package": null, "version": null}, {"name": "stg_servicenow__change_request", "package": null, "version": null}, {"name": "stg_servicenow__sys_user", "package": null, "version": null}, {"name": "stg_servicenow__sys_user_group", "package": null, "version": null}, {"name": "stg_servicenow__core_company", "package": null, "version": null}, {"name": "stg_servicenow__cmdb_ci", "package": null, "version": null}, {"name": "stg_servicenow__cmdb_ci_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.date_trunc", "macro.dbt.type_timestamp", "macro.dbt.datediff"], "nodes": ["model.servicenow.stg_servicenow__task", "model.servicenow.stg_servicenow__problem_task", "model.servicenow.stg_servicenow__problem", "model.servicenow.stg_servicenow__change_task", "model.servicenow.stg_servicenow__change_request", "model.servicenow.stg_servicenow__sys_user", "model.servicenow.stg_servicenow__sys_user_group", "model.servicenow.stg_servicenow__core_company", "model.servicenow.stg_servicenow__cmdb_ci", "model.servicenow.stg_servicenow__cmdb_ci_service"]}, "compiled_path": "target/compiled/servicenow/models/servicenow__task_enhanced.sql", "compiled": true, "compiled_code": "with task as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__task`\n),\n\nproblem_task as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem_task`\n),\n\nproblem as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__problem`\n),\n\nchange_task as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_task`\n),\n\nchange_request as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__change_request`\n),\n\nsys_user as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user`\n),\n\nsys_user_group as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__sys_user_group`\n),\n\ncore_company as (\n    \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__core_company`\n),\n\ncmdb_ci as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci`\n),\n\ncmdb_ci_service as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_servicenow`.`stg_servicenow__cmdb_ci_service`\n),\n\ntask_enhanced as (\n\nselect \n\n  task.task_id,\n  task.is_task_active,\n  task.task_description,\n  task.activity_due,\n  task.priority,\n  task.impact,\n  task.urgency,\n  task.task_state,\n  task.task_number,\n  task.task_order,\n  cast( (case when problem_task.problem_task_id is not null \n    then true \n    else false \n  end) as boolean) as is_problem_task,\n  cast( (case when change_task.change_task_id is not null \n    then true \n    else false \n  end) as boolean) as is_change_task,\n  task.task_created_at,\n  task.sys_created_by,\n  task.cmdb_ci_link,\n  task.cmdb_ci_value,\n  cmdb_ci.cmdb_ci_name,\n  creator.email as creator_email,\n  creator.manager_value as creator_manager_value,\n  creator.department_value as creator_department_value,\n  creator.sys_user_name as creator_name,\n  creator.sys_user_roles as creator_roles,\n  task.task_updated_at,\n  cast (timestamp_trunc(\n        cast(task.task_updated_at as timestamp),\n        day\n    ) as date) as task_updated_date,\n  task.sys_updated_by,\n  updater.email as updater_email,\n  updater.manager_value as updater_manager_value,\n  updater.department_value as updater_department_value,\n  updater.sys_user_name as updater_name,\n  updater.sys_user_roles as updater_roles,\n  task.task_opened_at,\n  task.opened_by_link,\n  task.opened_by_value, \n  opener.manager_value as opener_manager_value,\n  opener.email as opener_email,\n  opener.department_value as opener_department_value,\n  opener.sys_user_name as opener_name,\n  opener.sys_user_roles as opener_roles,\n  task.assigned_to_link, \n  task.assigned_to_value,\n  assignee.email as assignee_email,\n  assignee.manager_value as assignee_manager_value,\n  assignee.department_value as assignee_department_value,\n  assignee.sys_user_name as assignee_name,\n  assignee.sys_user_roles as assignee_roles,\n  task.task_closed_at,\n  \n\n    datetime_diff(\n        cast(cast(task.task_closed_at as timestamp )  as datetime),\n        cast(cast(task.task_opened_at as timestamp )  as datetime),\n        minute\n    )\n\n   as task_minutes_open_to_close,\n  task.closed_by_link,\n  task.closed_by_value,\n  closer.email as closer_email,\n  closer.manager_value as closer_manager_value,\n  closer.department_value as closer_department_value,\n  closer.sys_user_name as closer_name,\n  closer.sys_user_roles as closer_roles,\n  task.task_effective_number,\n  task.additional_assignee_list,\n  task.approval,\n  task.approval_history,\n  task.approval_set,\n  task.assignment_group_link,\n  task.assignment_group_value,\n  assignment_group.sys_user_group_name as assignment_group_name,\n  task.business_duration,\n  task.calendar_duration,\n  task.business_service_link,\n  task.business_service_value,\n  business_service.cmdb_ci_service_name as business_service_name,\n  task.close_notes,\n  task.comments,\n  task.comments_and_work_notes,\n  task.company_link,\n  task.company_value, \n  core_company.company_name,\n  task.contact_type, \n  task.task_due_date_at,\n  task.expected_start,\n  task.task_follow_up_at,\n  task.group_list,\n  task.knowledge,\n  task.is_made_sla,\n  task.sla_due,\n  task.parent_link, \n  task.parent_value,\n  task.reassignment_count,\n  task.route_reason,\n  task.short_description,\n  task.sys_class_name,\n  task.sys_domain_link,\n  task.sys_domain_path,\n  task.sys_domain_value,\n  task.upon_approval,\n  task.upon_reject,\n  task.watch_list,\n  task.work_start,\n  task.work_end,\n  task.work_notes,\n  task.work_notes_list,\n  problem_task.problem_task_cause_code,\n  problem_task.problem_task_close_code,\n  problem_task.problem_task_type,\n  problem_task.problem_task_started_at,\n  problem_task.started_by_value,\n  problem_task_starter.email as problem_task_starter_email,\n  problem_task_starter.manager_value as problem_task_starter_manager_value,\n  problem_task_starter.department_value as problem_task_starter_department_value,\n  problem_task_starter.sys_user_name as problem_task_starter_name,\n  problem_task_starter.sys_user_roles as problem_task_starter_roles, \n  problem.problem_id as associated_problem_id,\n  problem.problem_category,\n  problem.cause_notes,\n  problem.problem_confirmed_at,\n  problem.problem_confirmed_by_value,\n  problem_confirmer.email as problem_confirmer_email,\n  problem_confirmer.manager_value as problem_confirmer_manager_value,\n  problem_confirmer.department_value as problem_confirmer_department_value,\n  problem_confirmer.sys_user_name as problem_confirmer_name,\n  problem_confirmer.sys_user_roles as problem_confirmer_roles,\n  problem.problem_first_reported_by_task_link,\n  problem.problem_first_reported_by_task_value,\n  problem.problem_fix_at,\n  problem.problem_fix_by_value,\n  problem_fixer.email as problem_fixer_email,\n  problem_fixer.manager_value as problem_fixer_manager_value,\n  problem_fixer.department_value as problem_fixer_department_value,\n  problem_fixer.sys_user_name as problem_fixer_name,\n  problem_fixer.sys_user_roles as problem_fixer_roles,\n  problem.problem_fix_notes,\n  problem.is_known_error as problem_is_known_error,\n  problem.is_major_problem,\n  problem.problem_state,\n  problem.problem_related_incidents,\n  problem.problem_resolution_code,\n  problem.problem_resolved_at,\n  problem.problem_resolved_by_value,\n  problem.workaround_applied,\n  problem_resolver.email as problem_resolver_email,\n  problem_resolver.manager_value as problem_resolver_manager_value,\n  problem_resolver.department_value as problem_resolver_department_value,\n  problem_resolver.sys_user_name as problem_resolver_name,\n  problem_resolver.sys_user_roles as problem_resolver_roles,\n  problem.problem_subcategory,\n  problem.problem_created_at,\n  problem.problem_updated_at,\n  change_task.change_task_type,\n  change_task.change_task_close_code,\n  change_task.change_task_created_from,\n  change_task.is_change_on_hold,\n  change_task.change_on_hold_reason,\n  change_task.change_task_planned_end_date,\n  change_task.change_task_planned_start_date,\n  change_request.change_request_id as associated_change_request_id,\n  change_request.change_request_created_at,\n  change_request.change_request_updated_at,\n  change_request.change_request_category,\n  change_request.change_plan,\n  change_request.change_request_close_code,\n  change_request.change_request_end_date,\n  change_request.change_request_implementation_plan,\n  change_request.change_request_justification,\n  change_request.is_change_request_on_hold,\n  change_request.change_request_on_hold_reason,\n  change_request.change_request_phase,\n  change_request.change_request_phase_state,\n  change_request.change_request_reason,\n  change_request.change_requested_by_date,\n  change_request.change_requested_by_value,\n  change_requester.email as change_requester_email,\n  change_requester.manager_value as change_requester_manager_value,\n  change_requester.department_value as change_requester_department_value,\n  change_requester.sys_user_name as change_requester_name,\n  change_requester.sys_user_roles as change_requester_roles,\n  change_request.change_request_review_date,\n  change_request.change_request_review_status,\n  change_request.change_request_risk,\n  change_request.change_request_scope,\n  change_request.change_request_start_date,\n  change_request.change_request_test_plan,\n  change_request.change_request_type,\n  change_request.is_change_request_unauthorized,\n  task.source_relation\n\nfrom task\nleft join core_company\n  on task.company_value = core_company.core_company_id\n  and task.source_relation = core_company.source_relation\nleft join problem_task\n  on task.task_id = problem_task.problem_task_id\n  and task.source_relation = problem_task.source_relation\nleft join sys_user problem_task_starter\n  on problem_task.started_by_value = problem_task_starter.sys_user_id\n  and problem_task.source_relation = problem_task_starter.source_relation\nleft join problem\n  on problem_task.problem_value = problem.problem_id\n  and problem_task.source_relation = problem.source_relation\nleft join sys_user problem_confirmer\n  on problem.problem_confirmed_by_value = problem_confirmer.sys_user_id\n  and problem.source_relation = problem_confirmer.source_relation\nleft join sys_user problem_fixer\n  on problem.problem_fix_by_value = problem_fixer.sys_user_id\n  and problem.source_relation = problem_fixer.source_relation\nleft join sys_user problem_resolver\n  on problem.problem_resolved_by_value = problem_resolver.sys_user_id\n  and problem.source_relation = problem_resolver.source_relation\nleft join change_task\n  on task.task_id = change_task.change_task_id\n  and task.source_relation = change_task.source_relation\nleft join change_request\n  on change_task.change_request_value = change_request.change_request_id\n  and change_task.source_relation = change_request.source_relation\nleft join sys_user change_requester\n  on change_request.change_requested_by_value = change_requester.sys_user_id\n  and change_request.source_relation = change_requester.source_relation\nleft join sys_user assignee\n  on task.assigned_to_value = assignee.sys_user_id\n  and task.source_relation = assignee.source_relation\nleft join sys_user closer \n  on task.closed_by_value = closer.sys_user_id\n  and task.source_relation = closer.source_relation\nleft join sys_user opener\n  on task.opened_by_value = opener.sys_user_id\n  and task.source_relation = opener.source_relation\nleft join sys_user creator\n  on task.sys_created_by = creator.sys_user_id\n  and task.source_relation = creator.source_relation\nleft join sys_user updater\n  on task.sys_updated_by = updater.sys_user_id\n  and task.source_relation = updater.source_relation\nleft join sys_user_group assignment_group\n  on task.assignment_group_value = assignment_group.sys_user_group_id\n  and task.source_relation = assignment_group.source_relation\nleft join cmdb_ci\n  on task.cmdb_ci_value = cmdb_ci.cmdb_ci_id\n  and task.source_relation = cmdb_ci.source_relation\nleft join cmdb_ci_service business_service\n  on task.business_service_value = business_service.cmdb_ci_service_id\n  and task.source_relation = business_service.source_relation\n)\n\nselect *\nfrom task_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.servicenow.unique_servicenow__task_enhanced_task_id.a974c4dbbc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('servicenow__task_enhanced')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_servicenow__task_enhanced_task_id", "resource_type": "test", "package_name": "servicenow", "path": "unique_servicenow__task_enhanced_task_id.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.unique_servicenow__task_enhanced_task_id.a974c4dbbc", "fqn": ["servicenow", "unique_servicenow__task_enhanced_task_id"], "alias": "unique_servicenow__task_enhanced_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671489.8873081, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "servicenow__task_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__task_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/unique_servicenow__task_enhanced_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__task_enhanced`\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.servicenow__task_enhanced", "attached_node": "model.servicenow.servicenow__task_enhanced"}, "test.servicenow.not_null_servicenow__task_enhanced_task_id.76cea62cda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('servicenow__task_enhanced')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_servicenow__task_enhanced_task_id", "resource_type": "test", "package_name": "servicenow", "path": "not_null_servicenow__task_enhanced_task_id.sql", "original_file_path": "models/servicenow.yml", "unique_id": "test.servicenow.not_null_servicenow__task_enhanced_task_id.76cea62cda", "fqn": ["servicenow", "not_null_servicenow__task_enhanced_task_id"], "alias": "not_null_servicenow__task_enhanced_task_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1723671489.888329, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "servicenow__task_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.servicenow.servicenow__task_enhanced"]}, "compiled_path": "target/compiled/servicenow/models/servicenow.yml/not_null_servicenow__task_enhanced_task_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`zz_dbt_renee_servicenow`.`servicenow__task_enhanced`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "task_id", "file_key_name": "models.servicenow__task_enhanced", "attached_node": "model.servicenow.servicenow__task_enhanced"}}, "sources": {"source.servicenow.servicenow.task": {"database": "dbt-package-testing", "schema": "servicenow", "name": "task", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.task", "fqn": ["servicenow", "staging", "servicenow", "task"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all tasks related information. A task represents a unit of work that needs to be accomplished or tracked within the ServiceNow system. It can be related to various processes, such as incident resolution, change management, or other workflows.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Flag indicating whether the record is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activity_due": {"name": "activity_due", "description": "The due date or time for completing the activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_assignee_list": {"name": "additional_assignee_list", "description": "List of additional users or assignees associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval": {"name": "approval", "description": "Information related to the approval status and process for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval_history": {"name": "approval_history", "description": "History of approvals associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "approval_set": {"name": "approval_set", "description": "Set of approvals linked to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assigned_to_link": {"name": "assigned_to_link", "description": "Link to the user or group assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assigned_to_value": {"name": "assigned_to_value", "description": "Value representing the user or group assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_link": {"name": "assignment_group_link", "description": "Link to the assignment group associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignment_group_value": {"name": "assignment_group_value", "description": "Value representing the assignment group associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_duration": {"name": "business_duration", "description": "The duration of the task in terms of business hours.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_link": {"name": "business_service_link", "description": "Link to the business service associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_service_value": {"name": "business_service_value", "description": "Value representing the business service associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_duration": {"name": "calendar_duration", "description": "The duration of the task in terms of calendar time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_notes": {"name": "close_notes", "description": "Additional notes or comments recorded upon task closure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Date and time when the task was closed or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_by_link": {"name": "closed_by_link", "description": "Link to the user who closed or completed the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_by_value": {"name": "closed_by_value", "description": "Value representing the user who closed or completed the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_link": {"name": "cmdb_ci_link", "description": "Link to the configuration item (CI) associated with the record in the Configuration Management Database (CMDB).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmdb_ci_value": {"name": "cmdb_ci_value", "description": "Value representing the configuration item (CI) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments": {"name": "comments", "description": "General comments or notes related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments_and_work_notes": {"name": "comments_and_work_notes", "description": "Combined information of comments and work notes recorded during the record's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_type": {"name": "contact_type", "description": "Type of contact associated with the record (e.g., customer, vendor).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_link": {"name": "contract_link", "description": "Link to the contract associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_value": {"name": "contract_value", "description": "Value representing the contract associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "correlation_display": {"name": "correlation_display", "description": "Display information related to correlation of the record with other records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "correlation_id": {"name": "correlation_id", "description": "Identifier used for correlating the record with related records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_plan_link": {"name": "delivery_plan_link", "description": "Link to the delivery plan associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_plan_value": {"name": "delivery_plan_value", "description": "Value representing the delivery plan associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_task_link": {"name": "delivery_task_link", "description": "Link to the delivery task associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_task_value": {"name": "delivery_task_value", "description": "Value representing the delivery task associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Detailed description or information about the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date by which the task is expected to be completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "escalation": {"name": "escalation", "description": "Information about any escalation procedures or steps related to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_start": {"name": "expected_start", "description": "The expected start date or time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "follow_up": {"name": "follow_up", "description": "Timestamp of when follow up was applied to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_list": {"name": "group_list", "description": "List of groups associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "impact": {"name": "impact", "description": "Assessment of the impact that completing or not completing the task may have. This is the business loss and potential damage (for example, financial, customer, regulation, security, reputation, brand) caused by the incident", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "knowledge": {"name": "knowledge", "description": "Indication of whether the task is associated with knowledge or documentation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_link": {"name": "location_link", "description": "Link to the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_value": {"name": "location_value", "description": "Value representing the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "made_sla": {"name": "made_sla", "description": "Indicates whether the task was completed within the agreed-upon Service Level Agreement (SLA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "Unique identifier or reference number assigned to the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_at": {"name": "opened_at", "description": "Date and time when the task was initially opened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_by_link": {"name": "opened_by_link", "description": "Link to the user who initially opened the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opened_by_value": {"name": "opened_by_value", "description": "Value representing the user who initially opened the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order": {"name": "order", "description": "Order or sequence number associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_link": {"name": "parent_link", "description": "Link to the parent task or record associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_value": {"name": "parent_value", "description": "Value representing the parent task or record associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Priority level assigned to the task. The priority field is automatically calculated based on the values of impact and urgency. This determines the sequence in which the record should be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reassignment_count": {"name": "reassignment_count", "description": "Count of how many times the task has been reassigned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rejection_goto_link": {"name": "rejection_goto_link", "description": "Link to the record or step to be followed in case of task rejection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rejection_goto_value": {"name": "rejection_goto_value", "description": "Value representing the record or step to be followed in case of task rejection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route_reason": {"name": "route_reason", "description": "Reason or criteria for routing the task to a particular user or group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_offering_link": {"name": "service_offering_link", "description": "Link to the service offering associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_offering_value": {"name": "service_offering_value", "description": "Value representing the service offering associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Brief or concise summary of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_due": {"name": "sla_due", "description": "Date and time by which the record is expected to meet the Service Level Agreement (SLA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_effective_number": {"name": "task_effective_number", "description": "Effective number or identifier associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_request_link": {"name": "universal_request_link", "description": "Link to the universal request associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_request_value": {"name": "universal_request_value", "description": "Value representing the universal request associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upon_approval": {"name": "upon_approval", "description": "Actions or steps to be taken upon the approval of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upon_reject": {"name": "upon_reject", "description": "Actions or steps to be taken upon the rejection of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgency": {"name": "urgency", "description": "Level of urgency associated with the record. Speed at which the business expects the record to be resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "watch_list": {"name": "watch_list", "description": "List of users or groups who are monitoring or \"watching\" the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wf_activity_link": {"name": "wf_activity_link", "description": "Link to the workflow activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wf_activity_value": {"name": "wf_activity_value", "description": "Value representing the workflow activity associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_end": {"name": "work_end", "description": "Date and time when the work on the task is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_notes": {"name": "work_notes", "description": "Notes or comments recorded during the work on the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_notes_list": {"name": "work_notes_list", "description": "List of work notes recorded during the task's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_start": {"name": "work_start", "description": "Date and time when the work on the task is scheduled to start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`task`", "created_at": 1723671294.978209}, "source.servicenow.servicenow.task_sla": {"database": "dbt-package-testing", "schema": "servicenow", "name": "task_sla", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.task_sla", "fqn": ["servicenow", "staging", "servicenow", "task_sla"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "task_sla", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all Service Level Agreement (SLA) information related to the task.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Flag indicating whether the record is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_duration": {"name": "business_duration", "description": "The duration of the task in terms of business hours.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_pause_duration": {"name": "business_pause_duration", "description": "Duration of business pause associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_percentage": {"name": "business_percentage", "description": "Percentage of business time completed for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_time_left": {"name": "business_time_left", "description": "Remaining business time for the completion of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "Total duration of the task, including both business and non-business time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The scheduled or expected end time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_breached": {"name": "has_breached", "description": "Indicates whether the task has breached the defined SLA or time limits.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_breach_time": {"name": "original_breach_time", "description": "Original time when the SLA breach for the task was detected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_duration": {"name": "pause_duration", "description": "Duration of the pause associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_time": {"name": "pause_time", "description": "Time when the task was paused or put on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "percentage": {"name": "percentage", "description": "Percentage of total time completed for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "planned_end_time": {"name": "planned_end_time", "description": "The originally planned or expected end time for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_link": {"name": "schedule_link", "description": "Link to the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_value": {"name": "schedule_value", "description": "Value representing the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_link": {"name": "sla_link", "description": "Link to the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_value": {"name": "sla_value", "description": "Value representing the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stage": {"name": "stage", "description": "Current stage or phase of the record's lifecycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The scheduled or expected start time for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_link": {"name": "task_link", "description": "Link to the related task record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "task_value": {"name": "task_value", "description": "Value representing the related task record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_left": {"name": "time_left", "description": "Remaining time for the completion of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "Timezone information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`task_sla`", "created_at": 1723671294.978324}, "source.servicenow.servicenow.problem": {"database": "dbt-package-testing", "schema": "servicenow", "name": "problem", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.problem", "fqn": ["servicenow", "staging", "servicenow", "problem"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "problem", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all problem information.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cause_notes": {"name": "cause_notes", "description": "Additional notes or details about the cause of a particular issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmed_at": {"name": "confirmed_at", "description": "The timestamp indicating when an issue or incident was confirmed or acknowledged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmed_by_link": {"name": "confirmed_by_link", "description": "A link to the person or entity who confirmed or acknowledged the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmed_by_value": {"name": "confirmed_by_value", "description": "The name or identifier of the person or entity who confirmed or acknowledged the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duplicate_of_link": {"name": "duplicate_of_link", "description": "A link to the related issue that is identified as a duplicate of the current one.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duplicate_of_value": {"name": "duplicate_of_value", "description": "The name or identifier of the related issue that is identified as a duplicate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_reported_by_task_link": {"name": "first_reported_by_task_link", "description": "A link to the task or activity that first reported the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_reported_by_task_value": {"name": "first_reported_by_task_value", "description": "The name or identifier of the task or activity that first reported the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_at": {"name": "fix_at", "description": "The timestamp indicating when the issue is scheduled or planned to be fixed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_by_link": {"name": "fix_by_link", "description": "A link to the person or entity responsible for fixing the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_by_value": {"name": "fix_by_value", "description": "The name or identifier of the person or entity responsible for fixing the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_at": {"name": "fix_communicated_at", "description": "The timestamp indicating when the fix for the issue was communicated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_by_link": {"name": "fix_communicated_by_link", "description": "A link to the person or entity who communicated the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_communicated_by_value": {"name": "fix_communicated_by_value", "description": "The name or identifier of the person or entity who communicated the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fix_notes": {"name": "fix_notes", "description": "Additional notes or details related to the fix for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "known_error": {"name": "known_error", "description": "Indicates whether the issue is a known error with a documented resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_problem": {"name": "major_problem", "description": "Indicates whether the issue is categorized as a major problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_state": {"name": "problem_state", "description": "The current state or status of the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "related_incidents": {"name": "related_incidents", "description": "Information about other incidents that are related to the current issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_at": {"name": "reopened_at", "description": "The timestamp indicating when the issue was last reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolution_code": {"name": "resolution_code", "description": "The code or identifier associated with the resolution of the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "The timestamp indicating when the issue was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_link": {"name": "resolved_by_link", "description": "A link to the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_value": {"name": "resolved_by_value", "description": "The name or identifier of the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_outcome": {"name": "review_outcome", "description": "The outcome or result of the review process for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_link": {"name": "rfc_link", "description": "A link to the Request for Change (RFC) associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_value": {"name": "rfc_value", "description": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subcategory": {"name": "subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround": {"name": "workaround", "description": "A description of a temporary or alternative solution that can be applied to address the issue before a permanent fix \nis implemented.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_applied": {"name": "workaround_applied", "description": "Indicates whether a workaround has been applied to address the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_at": {"name": "workaround_communicated_at", "description": "The timestamp indicating when the workaround for the issue was communicated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_by_link": {"name": "workaround_communicated_by_link", "description": "A link to the person or entity who communicated the workaround for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workaround_communicated_by_value": {"name": "workaround_communicated_by_value", "description": "The name or identifier of the person or entity who communicated the workaround for the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`problem`", "created_at": 1723671294.978417}, "source.servicenow.servicenow.problem_task": {"database": "dbt-package-testing", "schema": "servicenow", "name": "problem_task", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.problem_task", "fqn": ["servicenow", "staging", "servicenow", "problem_task"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "problem_task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all the information related to the problem tasks.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cause_code": {"name": "cause_code", "description": "The code or identifier associated with the cause of the issue or problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_code": {"name": "close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_reason": {"name": "other_reason", "description": "Additional information or reasons associated with the issue, especially if it falls outside standard categories.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_link": {"name": "problem_link", "description": "A link to the problem record associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_task_type": {"name": "problem_task_type", "description": "The type or category of the task associated with the problem or issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_value": {"name": "problem_value", "description": "The unique identifier or name associated with the problem linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_at": {"name": "reopened_at", "description": "The timestamp indicating when the issue was last reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "The timestamp indicating when the issue or incident was initiated or started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_by_link": {"name": "started_by_link", "description": "A link to the person or entity who initiated or started the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_by_value": {"name": "started_by_value", "description": "The name or identifier of the person or entity who initiated or started the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_link": {"name": "vendor_link", "description": "A link to the vendor or external entity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_value": {"name": "vendor_value", "description": "The name or identifier of the vendor or external entity linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`problem_task`", "created_at": 1723671294.978483}, "source.servicenow.servicenow.incident": {"database": "dbt-package-testing", "schema": "servicenow", "name": "incident", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.incident", "fqn": ["servicenow", "staging", "servicenow", "incident"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "incident", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all information related to incidents.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_impact": {"name": "business_impact", "description": "Information about the impact of the issue on business operations or services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_stc": {"name": "business_stc", "description": "The business service that is impacted by the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_stc": {"name": "calendar_stc", "description": "The calendar or schedule associated with the business service impacted by the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_id_link": {"name": "caller_id_link", "description": "A link to the person or entity identified as the caller or reporter of the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caller_id_value": {"name": "caller_id_value", "description": "The name or identifier of the person or entity identified as the caller or reporter of the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cause": {"name": "cause", "description": "A description or explanation of the root cause of the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_link": {"name": "caused_by_link", "description": "A link to the record or entity that caused or triggered the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_value": {"name": "caused_by_value", "description": "The name or identifier of the record or entity that caused or triggered the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_incidents": {"name": "child_incidents", "description": "The number of incidents that are identified as child incidents linked to the current incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_code": {"name": "close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hold_reason": {"name": "hold_reason", "description": "The reason or rationale for placing the issue or incident on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "incident_state": {"name": "incident_state", "description": "The current state or status of the incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notify": {"name": "notify", "description": "Indicates whether notifications or alerts have been configured for the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin_id_link": {"name": "origin_id_link", "description": "A link to the original or source record from which the current record originated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin_id_value": {"name": "origin_id_value", "description": "The unique identifier or name associated with the original or source record linked to the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_incident_link": {"name": "parent_incident_link", "description": "A link to the parent incident record, indicating the incident from which the current incident is derived or related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_incident_value": {"name": "parent_incident_value", "description": "The unique identifier or name associated with the parent incident record linked to the current incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_id_link": {"name": "problem_id_link", "description": "A link to the problem record associated with the current issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "problem_id_value": {"name": "problem_id_value", "description": "The unique identifier or name associated with the problem record linked to the current issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopen_count": {"name": "reopen_count", "description": "The count of how many times the issue has been reopened.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_link": {"name": "reopened_by_link", "description": "A link to the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_by_value": {"name": "reopened_by_value", "description": "The name or identifier of the person or entity who reopened the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reopened_time": {"name": "reopened_time", "description": "The timestamp indicating when the issue or incident was reopened after being previously resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "The timestamp indicating when the issue was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_link": {"name": "resolved_by_link", "description": "A link to the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_by_value": {"name": "resolved_by_value", "description": "The name or identifier of the person or entity who resolved the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_link": {"name": "rfc_link", "description": "A link to the Request for Change (RFC) associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfc_value": {"name": "rfc_value", "description": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "severity": {"name": "severity", "description": "The level of impact or seriousness assigned to the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subcategory": {"name": "subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`incident`", "created_at": 1723671294.978625}, "source.servicenow.servicenow.change_task": {"database": "dbt-package-testing", "schema": "servicenow", "name": "change_task", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.change_task", "fqn": ["servicenow", "staging", "servicenow", "change_task"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "change_task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all information related to change tasks.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_link": {"name": "change_request_link", "description": "A link to the change request record associated with the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_request_value": {"name": "change_request_value", "description": "The unique identifier or name associated with the change request record linked to the issue or incident.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_task_type": {"name": "change_task_type", "description": "The type or category of the task associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_code": {"name": "close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_from": {"name": "created_from", "description": "Information about the source or origin of the current record, indicating how it was created or generated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold": {"name": "on_hold", "description": "Indicates whether the issue or incident is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold_reason": {"name": "on_hold_reason", "description": "The reason or rationale for placing the associated record on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "planned_end_date": {"name": "planned_end_date", "description": "The planned or scheduled end date for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "planned_start_date": {"name": "planned_start_date", "description": "The planned or scheduled start date for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`change_task`", "created_at": 1723671294.9786959}, "source.servicenow.servicenow.change_request": {"database": "dbt-package-testing", "schema": "servicenow", "name": "change_request", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.change_request", "fqn": ["servicenow", "staging", "servicenow", "change_request"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "change_request", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table that contains all information related to change requests.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "backout_plan": {"name": "backout_plan", "description": "Information about the plan or process for backing out or undoing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_date": {"name": "cab_date", "description": "The date of the Change Advisory Board (CAB) meeting associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_date_time": {"name": "cab_date_time", "description": "The date and time of the Change Advisory Board (CAB) meeting associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_delegate_link": {"name": "cab_delegate_link", "description": "A link to the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) in relation \nto the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_delegate_value": {"name": "cab_delegate_value", "description": "The name or identifier of the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) \nin relation to the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_recommendation": {"name": "cab_recommendation", "description": "The recommendation or decision made by the Change Advisory Board (CAB) regarding the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cab_required": {"name": "cab_required", "description": "Indicates whether the Change Advisory Board (CAB) approval is required for the change request.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_plan": {"name": "change_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chg_model_link": {"name": "chg_model_link", "description": "A link to the change model or template associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chg_model_value": {"name": "chg_model_value", "description": "The name or identifier of the change model or template linked to the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "close_code": {"name": "close_code", "description": "The code or identifier associated with the closure or resolution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conflict_last_run": {"name": "conflict_last_run", "description": "The timestamp indicating when the conflict detection was last run for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conflict_status": {"name": "conflict_status", "description": "The status or outcome of the conflict detection process for the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "The end date for the implementation or execution associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "implementation_plan": {"name": "implementation_plan", "description": "Information about the plan or process for implementing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "justification": {"name": "justification", "description": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold": {"name": "on_hold", "description": "Indicates whether the issue or incident is currently on hold or paused.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold_reason": {"name": "on_hold_reason", "description": "The reason or rationale for placing the associated record on hold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_hold_task": {"name": "on_hold_task", "description": "A link to the task or activity that indicates the current record is on hold, specifying the task associated with the \nhold status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outside_maintenance_schedule": {"name": "outside_maintenance_schedule", "description": "Indicates whether the changes associated with the current record fall outside the regular maintenance schedule or window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phase": {"name": "phase", "description": "The phase or stage of the change request or change record within the change management process, indicating its progress or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phase_state": {"name": "phase_state", "description": "The current state or status of the phase associated with the change request or change record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "production_system": {"name": "production_system", "description": "Indicates whether the changes associated with the current record are intended for the production environment or system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason": {"name": "reason", "description": "The reason or rationale behind the changes requested by the current record, providing context or explanation for the modifications made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by_date": {"name": "requested_by_date", "description": "The date the change is requested for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by_link": {"name": "requested_by_link", "description": "A link to the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by_value": {"name": "requested_by_value", "description": "The name or identifier of the person or entity who requested or initiated the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_comments": {"name": "review_comments", "description": "Comments or feedback provided during the review process for the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_date": {"name": "review_date", "description": "The date when the record was reviewed or evaluated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "review_status": {"name": "review_status", "description": "The status or outcome of the review process associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "risk": {"name": "risk", "description": "The level of risk associated with the changes, indicating the potential impact or consequences of implementing the modifications outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "risk_impact_analysis": {"name": "risk_impact_analysis", "description": "An analysis or assessment of the impact or consequences of the changes outlined in the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scope": {"name": "scope", "description": "The scope or extent of the changes outlined in the current record, specifying the areas or components affected by the modifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "std_change_producer_version_link": {"name": "std_change_producer_version_link", "description": "A link to the version of the standard change producer associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "std_change_producer_version_value": {"name": "std_change_producer_version_value", "description": "The name or identifier of the version of the standard change producer linked to the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_plan": {"name": "test_plan", "description": "Information about the plan or process for testing the changes associated with the current record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type or category regarding the current record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unauthorized": {"name": "unauthorized", "description": "Indicates whether the changes associated with the current record were made without proper authorization or approval.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`change_request`", "created_at": 1723671294.9787798}, "source.servicenow.servicenow.core_company": {"database": "dbt-package-testing", "schema": "servicenow", "name": "core_company", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.core_company", "fqn": ["servicenow", "staging", "servicenow", "core_company"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "task", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all company related information.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Country information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer": {"name": "customer", "description": "Boolean of whether the company is a customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fax_phone": {"name": "fax_phone", "description": "Fax phone number of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fiscal_year": {"name": "fiscal_year", "description": "Company's fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Notes about the record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The contact number belonging to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The geographical state to which the record belongs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "street": {"name": "street", "description": "The street to which the record belongs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Boolean of whether the company is a vendor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_type": {"name": "vendor_type", "description": "Vendor types group vendors that offer similar goods and services, and are useful for reporting and comparing vendor performance. Example: Hardware, Services", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "website": {"name": "website", "description": "Company website", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The postal code or ZIP code associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`task`", "created_at": 1723671294.978843}, "source.servicenow.servicenow.cmdb_ci": {"database": "dbt-package-testing", "schema": "servicenow", "name": "cmdb_ci", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.cmdb_ci", "fqn": ["servicenow", "staging", "servicenow", "cmdb_ci"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "cmdb_ci", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The base table for all CI (Configuration Item) tables in the CMDB (Configuration Management Database)", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attributes": {"name": "attributes", "description": "Data elements which describe the characteristics of CIs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_link": {"name": "business_unit_link", "description": "Link to business unit. Business units usually comprise departments and are associated with a company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_value": {"name": "business_unit_value", "description": "The ID of the business unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_cc": {"name": "cost_cc", "description": "The cost center that the record belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_link": {"name": "managed_by_link", "description": "The link to the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_value": {"name": "managed_by_value", "description": "The ID of the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_link": {"name": "manufacturer_link", "description": "The link to the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_value": {"name": "manufacturer_value", "description": "The ID of the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_link": {"name": "model_id_link", "description": "The link to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_value": {"name": "model_id_value", "description": "The ID to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_number": {"name": "model_number", "description": "The number of the model related to the IC.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_link": {"name": "owned_by_link", "description": "The link to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_value": {"name": "owned_by_value", "description": "The ID to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subcategory": {"name": "subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_path": {"name": "sys_class_path", "description": "Where a particular CI class is within the overall hierarchy of classes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_link": {"name": "vendor_link", "description": "A link to the vendor or external entity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_value": {"name": "vendor_value", "description": "The name or identifier of the vendor or external entity linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`cmdb_ci`", "created_at": 1723671294.978919}, "source.servicenow.servicenow.cmdb_ci_service": {"database": "dbt-package-testing", "schema": "servicenow", "name": "cmdb_ci_service", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.cmdb_ci_service", "fqn": ["servicenow", "staging", "servicenow", "cmdb_ci_service"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "cmdb_ci_service", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all information related to application service areas. An application service is work or goods that are supported by an IT infrastructure. For example, delivering email service to an employee can require services such as email servers, web servers, and the work to configure the user's account. An application service management map graphically displays the configuration items (CI) that support an application service and the relationships between the CIs.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attributes": {"name": "attributes", "description": "Data elements which describe the characteristics of CIs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_link": {"name": "business_unit_link", "description": "Link to business unit. Business units usually comprise departments and are associated with a company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_unit_value": {"name": "business_unit_value", "description": "The ID of the business unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost related to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_cc": {"name": "cost_cc", "description": "The cost center that the record belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_link": {"name": "managed_by_link", "description": "The link to the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed_by_value": {"name": "managed_by_value", "description": "The ID of the user profile that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_link": {"name": "manufacturer_link", "description": "The link to the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer_value": {"name": "manufacturer_value", "description": "The ID of the manufacturer that manages this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_link": {"name": "model_id_link", "description": "The link to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_id_value": {"name": "model_id_value", "description": "The ID to the model related to the CI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_number": {"name": "model_number", "description": "The number of the model related to the IC.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_link": {"name": "owned_by_link", "description": "The link to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owned_by_value": {"name": "owned_by_value", "description": "The ID to the owner of the CI related to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_classification": {"name": "service_classification", "description": "The type of service. Each type contains groups of CI services that share attributes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_level_requirement": {"name": "service_level_requirement", "description": "Requirement specified to maintain service commitments between parties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Brief or concise summary of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_link": {"name": "sla_link", "description": "Link to the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sla_value": {"name": "sla_value", "description": "Value representing the Service Level Agreement (SLA) associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subcategory": {"name": "subcategory", "description": "The specific subcategory or classification of the record, providing more detailed information about its nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_path": {"name": "sys_class_path", "description": "Where a particular CI class is within the overall hierarchy of classes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_link": {"name": "vendor_link", "description": "A link to the vendor or external entity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_value": {"name": "vendor_value", "description": "The name or identifier of the vendor or external entity linked to the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`cmdb_ci_service`", "created_at": 1723671294.9789948}, "source.servicenow.servicenow.sys_user": {"database": "dbt-package-testing", "schema": "servicenow", "name": "sys_user", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.sys_user", "fqn": ["servicenow", "staging", "servicenow", "sys_user"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "sys_user", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all information related to the system user associated with the task.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accumulated_roles": {"name": "accumulated_roles", "description": "Roles accumulated or associated with the system user over time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Flag indicating whether the record is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avatar": {"name": "avatar", "description": "Avatar or profile picture associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "building_link": {"name": "building_link", "description": "Link to the building associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "building_value": {"name": "building_value", "description": "Value representing the building associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_integration": {"name": "calendar_integration", "description": "Information about the integration of the user's calendar with the ServiceNow system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_link": {"name": "company_link", "description": "Link to the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_value": {"name": "company_value", "description": "Value representing the company associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Country information associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_format": {"name": "date_format", "description": "The format in which dates are displayed or recorded for the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_perspective_link": {"name": "default_perspective_link", "description": "Link to the default perspective associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_perspective_value": {"name": "default_perspective_value", "description": "Value representing the default perspective associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_link": {"name": "department_link", "description": "Link to the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_value": {"name": "department_value", "description": "Value representing the department associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edu_status": {"name": "edu_status", "description": "Education status or level associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_number": {"name": "employee_number", "description": "Employee number or identifier associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enable_multifactor_authn": {"name": "enable_multifactor_authn", "description": "Indication of whether multifactor authentication is enabled for the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_attempts": {"name": "failed_attempts", "description": "Number of failed login attempts for the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender information associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hashed_user_id": {"name": "hashed_user_id", "description": "Hashed identifier associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_phone": {"name": "home_phone", "description": "Home phone number associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "internal_integration_user": {"name": "internal_integration_user", "description": "Indication of whether the system user is an internal integration user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "introduction": {"name": "introduction", "description": "Introduction or bio information associated with the system user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_login": {"name": "last_login", "description": "Date and time of the last login.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_login_device": {"name": "last_login_device", "description": "The device used for the user's last login to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_login_time": {"name": "last_login_time", "description": "The specific time when the user last logged in to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The family name or surname of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_password": {"name": "last_password", "description": "The timestamp or information related to the user's last password update.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldap_server_link": {"name": "ldap_server_link", "description": "A link to the LDAP (Lightweight Directory Access Protocol) server associated with the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldap_server_value": {"name": "ldap_server_value", "description": "The value or name of the LDAP server associated with the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_link": {"name": "location_link", "description": "Link to the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_value": {"name": "location_value", "description": "Value representing the location associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "locked_out": {"name": "locked_out", "description": "Information about whether the user account is currently locked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_link": {"name": "manager_link", "description": "A link to the user's manager or supervisor in the organizational hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_value": {"name": "manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_name": {"name": "middle_name", "description": "The middle name or initial of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mobile_phone": {"name": "mobile_phone", "description": "The contact number for the user's mobile phone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notification": {"name": "notification", "description": "Information related to user notifications or alerts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "password_needs_reset": {"name": "password_needs_reset", "description": "Indicates whether the user needs to reset their password.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The contact number belonging to this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "photo": {"name": "photo", "description": "A link or reference to the user's profile photo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_language": {"name": "preferred_language", "description": "The language preference set by the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "roles": {"name": "roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_link": {"name": "schedule_link", "description": "Link to the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schedule_value": {"name": "schedule_value", "description": "Value representing the schedule associated with the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source or origin of the user's or user group's profile information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_class_name": {"name": "sys_class_name", "description": "Name of the table in which the record is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_link": {"name": "sys_domain_link", "description": "Link to the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_path": {"name": "sys_domain_path", "description": "Path of the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_domain_value": {"name": "sys_domain_value", "description": "Value representing the system domain associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_format": {"name": "time_format", "description": "The preferred time format for the user (e.g., 12-hour or 24-hour).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The time zone configured for the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "The job title or position of the user within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The username used by the user to log in to the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_password": {"name": "user_password", "description": "The user's current password information or status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vip": {"name": "vip", "description": "Indicates whether the user has VIP (Very Important Person) status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "web_service_access_only": {"name": "web_service_access_only", "description": "Indicates whether the user has access only through web services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The postal code or ZIP code associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`sys_user`", "created_at": 1723671294.979119}, "source.servicenow.servicenow.sys_user_group": {"database": "dbt-package-testing", "schema": "servicenow", "name": "sys_user_group", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.sys_user_group", "fqn": ["servicenow", "staging", "servicenow", "sys_user_group"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "sys_user_group", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all information related to user groups.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Flag indicating whether the record is currently active or completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_link": {"name": "cost_center_link", "description": "Link to the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_center_value": {"name": "cost_center_value", "description": "Value representing the cost center associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_assignee_link": {"name": "default_assignee_link", "description": "Link to the user that is the default assignee for this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_assignee_value": {"name": "default_assignee_value", "description": "ID of the user that is the default assignee for this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Detailed description or information about the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_manager": {"name": "exclude_manager", "description": "Boolean of whether the group manager receives email notifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "include_members": {"name": "include_members", "description": "Boolean of whether the group members receive individual emails when someone sends an email to the Group Email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_link": {"name": "manager_link", "description": "A link to the user's manager or supervisor in the organizational hierarchy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_value": {"name": "manager_value", "description": "The name or identifier of the user's manager or supervisor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_link": {"name": "parent_link", "description": "Link to the other group of which this group is a member. If a group has a parent, the child group inherits the roles of the parent group. The members of the child group are not members of the parent group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_value": {"name": "parent_value", "description": "ID of the other group of which this group is a member. If a group has a parent, the child group inherits the roles of the parent group. The members of the child group are not members of the parent group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "roles": {"name": "roles", "description": "The roles assigned to the user in the system or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source or origin of the user's or user group's profile information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type or category regarding the current record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`servicenow`.`sys_user_group`", "created_at": 1723671294.9791858}, "source.servicenow.servicenow.sys_user_role": {"database": "dbt-package-testing", "schema": "servicenow", "name": "sys_user_role", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.sys_user_role", "fqn": ["servicenow", "staging", "servicenow", "sys_user_role"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "sys_user_role", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all the information about roles that can belong to a user. A user\u2019s role can be directly granted, inherited from other roles, or inherited from groups.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignable_by_link": {"name": "assignable_by_link", "description": "The link to the entity that can assign this role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assignable_by_value": {"name": "assignable_by_value", "description": "The value of the entity that can assign this role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "can_delegate": {"name": "can_delegate", "description": "Boolean of whether this role can delegate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Detailed description or information about the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "elevated_privilege": {"name": "elevated_privilege", "description": "Boolean of whether this role is an elevated privilege.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grantable": {"name": "grantable", "description": "Boolean of whether this role is grantable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_roles": {"name": "includes_roles", "description": "The roles included in this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requires_subscription": {"name": "requires_subscription", "description": "If this role requires a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scoped_admin": {"name": "scoped_admin", "description": "Boolean of whether the role was scoped administration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "suffix": {"name": "suffix", "description": "Suffix of the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`servicenow`.`sys_user_role`", "created_at": 1723671294.979253}, "source.servicenow.servicenow.sys_user_has_role": {"database": "dbt-package-testing", "schema": "servicenow", "name": "sys_user_has_role", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.sys_user_has_role", "fqn": ["servicenow", "staging", "servicenow", "sys_user_has_role"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "sys_user_has_role", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all the information about each unique user and role combination. When a role is added to a user, a new record is created here. This relates the sys_user table with the sys_user_role table.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "granted_by_link": {"name": "granted_by_link", "description": "The link to the entity that granted this.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "granted_by_value": {"name": "granted_by_value", "description": "The value of the entity that granted this.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_instance_link": {"name": "included_in_role_instance_link", "description": "The link to the role instance included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_instance_value": {"name": "included_in_role_instance_value", "description": "The value of the role instance included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_link": {"name": "included_in_role_link", "description": "The link to the role included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_in_role_value": {"name": "included_in_role_value", "description": "The value of the role included in the role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inh_count": {"name": "inh_count", "description": "Count of inherited roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inh_map": {"name": "inh_map", "description": "Mapping of inherited roles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inherited": {"name": "inherited", "description": "Boolean of whether the role is inherited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "role_link": {"name": "role_link", "description": "Link to the role in the sys_user_role table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "role_value": {"name": "role_value", "description": "The sys_id associated with the role in the sys_user_role table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state or status of the record (e.g., in progress, on hold, closed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_link": {"name": "user_link", "description": "Link to the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_value": {"name": "user_value", "description": "The sys_id associated with the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`servicenow`.`sys_user_has_role`", "created_at": 1723671294.97932}, "source.servicenow.servicenow.sys_user_grmember": {"database": "dbt-package-testing", "schema": "servicenow", "name": "sys_user_grmember", "resource_type": "source", "package_name": "servicenow", "path": "models/staging/src_servicenow.yml", "original_file_path": "models/staging/src_servicenow.yml", "unique_id": "source.servicenow.servicenow.sys_user_grmember", "fqn": ["servicenow", "staging", "servicenow", "sys_user_grmember"], "source_name": "servicenow", "source_description": "", "loader": "", "identifier": "sys_user_grmember", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing all the information about a given user and given group. This relates the sys_user_group table to the sys_user table.", "columns": {"sys_id": {"name": "sys_id", "description": "Unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates whether the task record has been marked as deleted by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Indicates whether the task record has been synchronized by the Fivetran connector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_link": {"name": "group_link", "description": "Link to the group in the sys_user_group table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_value": {"name": "group_value", "description": "The sys_id associated with the group in the sys_user_group table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_by": {"name": "sys_created_by", "description": "User who initially created the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_created_on": {"name": "sys_created_on", "description": "Date and time when the record was initially created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_mod_count": {"name": "sys_mod_count", "description": "Number of times the record has been modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_by": {"name": "sys_updated_by", "description": "User who last updated or modified the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sys_updated_on": {"name": "sys_updated_on", "description": "Date and time when the record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_link": {"name": "user_link", "description": "Link to the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_value": {"name": "user_value", "description": "The sys_id associated with the user in the sys_user table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`servicenow`.`sys_user_grmember`", "created_at": 1723671294.979383}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.487724, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.487891, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.488071, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.491055, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.491364, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.4914508, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.491541, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.491627, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.491715, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.491832, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.4920099, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.492112, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.492374, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.492616, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.493027, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.493141, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.4933271, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.493603, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.493716, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.4941719, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.494547, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.495036, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.497707, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"indirect\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.498378, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.499244, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5007281, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.500915, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.501394, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.501813, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.504382, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5046852, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.504797, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5048919, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.505022, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.505111, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.505706, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.506007, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.508194, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.509045, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.509411, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.51007, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.510526, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.51125, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.51228, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5125508, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.512718, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5132391, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.513474, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.513592, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.513878, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5141928, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5143192, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.514896, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.515002, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5155041, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.515646, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.516036, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.516227, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.516636, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.516725, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5169122, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.517022, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5171149, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.518417, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5185761, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.518731, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.51893, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5190551, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.519994, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5220191, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.522089, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.522155, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.52237, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5224462, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.522656, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.523416, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5234969, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.523642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5237691, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5238929, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5239449, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.52402, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.524246, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.524818, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5252008, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5253131, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.525627, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5257869, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.526051, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.526371, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.526478, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5265799, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.526693, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.526797, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.526879, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.527266, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.527382, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.527572, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.527702, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5283892, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5285518, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.528759, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5289311, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5296798, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.529814, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5299149, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.530012, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5301068, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.530453, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.530654, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.530862, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.531165, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.531352, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5337632, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5338712, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.534014, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5344598, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5345669, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.534679, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.535577, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.536396, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5392609, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.539443, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.539552, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5396109, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.539705, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5397801, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.539912, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.540499, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.540618, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.540781, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.541059, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5450308, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.546793, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.547093, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5472991, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.547572, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.547816, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.551069, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5513148, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5514739, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5522811, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.552438, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.552873, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5547788, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.556642, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.557695, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5580559, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.558481, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5586329, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.559081, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.563178, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.564287, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5644522, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.565086, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.565262, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.565683, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.566102, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5667121, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.566865, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.566986, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.567167, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5672839, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.567468, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.567585, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.567753, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.56787, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.567971, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.568151, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5716019, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.575403, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.576253, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5770261, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.577579, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.577754, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5778291, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.578018, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.578103, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.580432, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5828202, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.586285, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.586889, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587049, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587358, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587486, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587573, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5876648, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587739, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587858, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.587937, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.588238, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.588356, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5892549, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.589546, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.589866, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.590282, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5904891, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5907042, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5909781, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.591149, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.591635, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.591875, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.591994, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5921228, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.592253, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.592822, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.593586, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5938408, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.594007, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.594218, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.594358, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.594829, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.595111, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5952482, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.595423, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5956569, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.595838, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.596145, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.596535, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.596761, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.596895, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.59707, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.59714, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5973241, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.597418, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.597625, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.597721, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.597915, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5980108, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5984251, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.598557, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.5987551, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.598857, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.599039, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.599133, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.599869, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.599967, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.600348, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6004639, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.600554, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.601376, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.60171, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6019258, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.602117, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.602185, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.602379, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.602485, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.602682, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.602783, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.603392, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.603507, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.603782, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.604243, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6045609, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.604685, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6048021, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.604994, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.605063, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6056929, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.605803, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.606613, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6067681, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6069272, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.607127, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.607232, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6075132, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.607619, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.607732, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6081128, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6083589, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.608565, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.608725, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.609101, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.610056, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.61042, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.610603, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.611883, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.612638, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.613129, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.613287, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.613452, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6135051, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6141388, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.614583, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.614742, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6149929, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.615262, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.615378, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.615562, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.615654, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6163058, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.616605, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.616744, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.617198, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6173701, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.617441, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6176581, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6177652, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6179168, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.617975, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6181471, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6182358, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.618419, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.61851, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.618925, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.619195, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6194172, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6195252, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6197062, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6197948, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.619961, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.620064, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.620225, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6203258, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6204858, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.620553, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.620736, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.620821, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.620973, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6210408, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.621738, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.621841, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.621942, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.622039, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.622141, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6222441, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.622359, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.622474, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.622574, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6226702, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6227741, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6228638, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.622966, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6230578, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6232362, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.623322, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6234791, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6235461, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6237671, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.623936, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.624031, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6244009, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6245189, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.624667, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6248472, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.624932, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.625176, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.625418, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.625602, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.625688, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.625938, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.62606, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.626163, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.626283, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6266189, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.626716, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.626807, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6268768, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.62698, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6270301, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.627135, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6272378, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6278179, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.627907, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.628007, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6282601, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6283782, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6284642, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6285598, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.628638, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6300008, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6301088, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.630244, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.630495, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.630657, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.630868, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6309838, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.631089, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6312451, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.63159, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.631737, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.631825, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6320949, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6323478, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.63253, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.632729, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6339, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.633976, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634083, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634153, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6343749, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634496, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634562, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634702, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634822, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.634967, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6350899, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.635232, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.635747, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6358662, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.636029, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.636174, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.636883, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6372328, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6373508, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.637441, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.637884, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.638, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.638128, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.63824, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.638412, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.638731, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.640646, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.640814, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.640942, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.641112, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6412292, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.641328, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.641438, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6416068, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6417432, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.641938, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6420522, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.642154, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6422558, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.642355, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.642561, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6426802, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.644161, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6442611, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.644454, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.644587, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.644725, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.644841, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.645561, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.645777, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6458938, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.646111, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.646251, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.646634, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6467998, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6473038, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.64858, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.64869, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.649219, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.649494, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6498718, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.650195, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.650242, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6506, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.650759, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.650947, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.651184, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.651536, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.65209, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.652447, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6528819, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.653104, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.653332, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.654099, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6549098, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6555772, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6563148, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.656787, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.657015, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6575081, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.658066, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.658367, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.658668, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.659082, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.659405, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.660128, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.660405, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.660938, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.661528, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6619809, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.66241, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.662806, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.663051, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.66332, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.663907, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6643531, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.664883, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.665557, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6661608, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.666674, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6672692, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6676, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6678, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6701922, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.671179, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.671357, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6714728, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.671762, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.671943, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.672071, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6722329, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.672338, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.672721, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6732612, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.673721, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.674104, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.674251, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.674488, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6747441, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.675113, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6753228, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.675618, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.676057, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.676578, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6771488, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6774201, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.677556, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6779299, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6783738, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.678903, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6791759, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.679363, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.680189, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.681091, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.681974, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.682988, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.683177, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.683263, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.685364, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.68764, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.687857, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6880262, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.68854, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.688689, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.68882, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.688951, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6890628, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6891751, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.689429, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.689582, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6898282, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6901639, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.690382, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.690612, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.691721, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.691958, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.692416, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6927402, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6934662, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6944141, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.695104, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.695638, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.695939, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.696397, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.696904, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.697272, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.697396, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.69765, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.698019, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.6983218, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.698718, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.699059, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.699154, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.699245, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.699332, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.699661, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.700122, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.700876, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7010481, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7014139, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.701918, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.702173, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.702805, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.702914, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.703016, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.703118, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.703213, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.703323, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7038348, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.704243, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7051468, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.70539, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.705546, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7057002, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7058508, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706021, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706191, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706346, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706561, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7066271, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706691, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706752, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.706985, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.707435, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7081192, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7085152, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.709038, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.709375, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.70946, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7095401, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.709619, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.709715, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.711682, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.711787, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.711892, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.711995, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.713134, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7137651, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7138581, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7140312, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7142122, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.714294, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.714375, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.714456, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.714537, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.71486, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.715223, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7155478, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.715678, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.715822, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.715988, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7166789, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.719216, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.719541, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7197812, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.720778, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7211368, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.721514, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7216132, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.721716, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.721834, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.721932, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7220259, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.722576, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7233222, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.723787, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.723892, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.72399, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.724094, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.724193, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.724313, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7244742, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7245388, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7246048, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.725009, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.725881, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.725991, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7265909, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.728977, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7318661, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.732756, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7329779, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.733073, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7331991, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.733418, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7334888, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.733564, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7336261, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.733689, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.733856, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.733921, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7339861, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.734245, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7344918, "supported_languages": null}, "macro.servicenow.get_change_request_columns": {"name": "get_change_request_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_change_request_columns.sql", "original_file_path": "macros/get_change_request_columns.sql", "unique_id": "macro.servicenow.get_change_request_columns", "macro_sql": "{% macro get_change_request_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"backout_plan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cab_date\", \"datatype\": \"date\"},\n    {\"name\": \"cab_date_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"cab_delegate_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cab_delegate_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cab_recommendation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cab_required\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"change_plan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"chg_model_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"chg_model_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"close_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"conflict_last_run\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"conflict_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"end_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"implementation_plan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"justification\", \"datatype\": dbt.type_string()},\n    {\"name\": \"on_hold\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"on_hold_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"on_hold_task\", \"datatype\": dbt.type_string()},\n    {\"name\": \"outside_maintenance_schedule\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"phase\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phase_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"production_system\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requested_by_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"requested_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requested_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"review_comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"review_date\", \"datatype\": \"date\"},\n    {\"name\": \"review_status\", \"datatype\": dbt.type_int()},\n    {\"name\": \"risk\", \"datatype\": dbt.type_int()},\n    {\"name\": \"risk_impact_analysis\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scope\", \"datatype\": dbt.type_int()},\n    {\"name\": \"start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"std_change_producer_version_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"std_change_producer_version_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"test_plan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unauthorized\", \"datatype\": dbt.type_boolean()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7380009, "supported_languages": null}, "macro.servicenow.get_task_sla_columns": {"name": "get_task_sla_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_task_sla_columns.sql", "original_file_path": "macros/get_task_sla_columns.sql", "unique_id": "macro.servicenow.get_task_sla_columns", "macro_sql": "{% macro get_task_sla_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"business_duration\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"business_pause_duration\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"business_percentage\", \"datatype\": dbt.type_float()},\n    {\"name\": \"business_time_left\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"duration\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"end_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"has_breached\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"original_breach_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"pause_duration\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"pause_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"percentage\", \"datatype\": dbt.type_float()},\n    {\"name\": \"planned_end_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"schedule_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schedule_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sla_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sla_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stage\", \"datatype\": dbt.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"task_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"task_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"time_left\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"timezone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.740248, "supported_languages": null}, "macro.servicenow.get_core_company_columns": {"name": "get_core_company_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_core_company_columns.sql", "original_file_path": "macros/get_core_company_columns.sql", "unique_id": "macro.servicenow.get_core_company_columns", "macro_sql": "{% macro get_core_company_columns() %}\n\n{% set columns = [\n\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"fax_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiscal_year\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"street\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_class_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"vendor_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_int()}\n\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.741854, "supported_languages": null}, "macro.servicenow.get_cmdb_ci_service_columns": {"name": "get_cmdb_ci_service_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_cmdb_ci_service_columns.sql", "original_file_path": "macros/get_cmdb_ci_service_columns.sql", "unique_id": "macro.servicenow.get_cmdb_ci_service_columns", "macro_sql": "{% macro get_cmdb_ci_service_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"attributes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_unit_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_unit_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cost_cc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"managed_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"managed_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturer_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturer_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"model_id_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"model_id_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"model_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"monitor\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owned_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owned_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_classification\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_level_requirement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_owner_delegate_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_owner_delegate_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"short_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sla_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sla_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subcategory\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_class_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_class_path\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_domain_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_path\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.745331, "supported_languages": null}, "macro.servicenow.get_sys_user_columns": {"name": "get_sys_user_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_sys_user_columns.sql", "original_file_path": "macros/get_sys_user_columns.sql", "unique_id": "macro.servicenow.get_sys_user_columns", "macro_sql": "{% macro get_sys_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accumulated_roles\", \"datatype\": dbt.type_string()},\n    {\"name\": \"active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"avatar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"building_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"building_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"calendar_integration\", \"datatype\": dbt.type_int()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_format\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_perspective_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_perspective_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"edu_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"enable_multifactor_authn\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"failed_attempts\", \"datatype\": dbt.type_int()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gender\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hashed_user_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"internal_integration_user\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"introduction\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_login\", \"datatype\": \"date\"},\n    {\"name\": \"last_login_device\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_login_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_password\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ldap_server_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ldap_server_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locked_out\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"manager_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manager_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"middle_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mobile_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notification\", \"datatype\": dbt.type_int()},\n    {\"name\": \"password_needs_reset\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"photo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preferred_language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"roles\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schedule_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schedule_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_class_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_domain_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_path\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"time_format\", \"datatype\": dbt.type_string()},\n    {\"name\": \"time_zone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_password\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vip\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"web_service_access_only\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.75165, "supported_languages": null}, "macro.servicenow.get_cmdb_ci_columns": {"name": "get_cmdb_ci_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_cmdb_ci_columns.sql", "original_file_path": "macros/get_cmdb_ci_columns.sql", "unique_id": "macro.servicenow.get_cmdb_ci_columns", "macro_sql": "{% macro get_cmdb_ci_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"attributes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_unit_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_unit_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cost_cc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"managed_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"managed_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturer_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturer_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"model_id_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"model_id_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"model_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owned_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owned_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subcategory\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_class_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_class_path\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_domain_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_path\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"unverified\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"vendor_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_value\", \"datatype\": dbt.type_string()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7544498, "supported_languages": null}, "macro.servicenow.get_change_task_columns": {"name": "get_change_task_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_change_task_columns.sql", "original_file_path": "macros/get_change_task_columns.sql", "unique_id": "macro.servicenow.get_change_task_columns", "macro_sql": "{% macro get_change_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"change_request_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"change_request_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"change_task_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"close_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_from\", \"datatype\": dbt.type_string()},\n    {\"name\": \"on_hold\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"on_hold_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"planned_end_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"planned_start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.755448, "supported_languages": null}, "macro.servicenow.get_sys_user_group_columns": {"name": "get_sys_user_group_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_sys_user_group_columns.sql", "original_file_path": "macros/get_sys_user_group_columns.sql", "unique_id": "macro.servicenow.get_sys_user_group_columns", "macro_sql": "{% macro get_sys_user_group_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"cost_center_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_center_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_assignee_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_assignee_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exclude_manager\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"include_members\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"manager_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manager_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"roles\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7571998, "supported_languages": null}, "macro.servicenow.get_task_columns": {"name": "get_task_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_task_columns.sql", "original_file_path": "macros/get_task_columns.sql", "unique_id": "macro.servicenow.get_task_columns", "macro_sql": "{% macro get_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"activity_due\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"additional_assignee_list\", \"datatype\": dbt.type_string()},\n    {\"name\": \"approval\", \"datatype\": dbt.type_string()},\n    {\"name\": \"approval_history\", \"datatype\": dbt.type_string()},\n    {\"name\": \"approval_set\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"assigned_to_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"assigned_to_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"assignment_group_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"assignment_group_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_duration\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"business_service_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_service_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"calendar_duration\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"close_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"closed_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cmdb_ci_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cmdb_ci_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments_and_work_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contact_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"correlation_display\", \"datatype\": dbt.type_string()},\n    {\"name\": \"correlation_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_plan_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_plan_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_task_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_task_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"escalation\", \"datatype\": dbt.type_int()},\n    {\"name\": \"expected_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"follow_up\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"group_list\", \"datatype\": dbt.type_string()},\n    {\"name\": \"impact\", \"datatype\": dbt.type_int()},\n    {\"name\": \"knowledge\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"location_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"made_sla\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opened_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"opened_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opened_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order\", \"datatype\": dbt.type_int(), \"quote\": True,  \"alias\": \"task_order\"},\n    {\"name\": \"parent_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"priority\", \"datatype\": dbt.type_int()},\n    {\"name\": \"reassignment_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"rejection_goto_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rejection_goto_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"route_reason\", \"datatype\": dbt.type_int()},\n    {\"name\": \"service_offering_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_offering_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"short_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sla_due\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"state\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_class_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_domain_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_path\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_domain_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"task_effective_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"universal_request_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"universal_request_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"upon_approval\", \"datatype\": dbt.type_string()},\n    {\"name\": \"upon_reject\", \"datatype\": dbt.type_string()},\n    {\"name\": \"urgency\", \"datatype\": dbt.type_int()},\n    {\"name\": \"watch_list\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wf_activity_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wf_activity_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"work_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_notes_list\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_start\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.76529, "supported_languages": null}, "macro.servicenow.get_sys_user_grmember_columns": {"name": "get_sys_user_grmember_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_sys_user_grmember_columns.sql", "original_file_path": "macros/get_sys_user_grmember_columns.sql", "unique_id": "macro.servicenow.get_sys_user_grmember_columns", "macro_sql": "{% macro get_sys_user_grmember_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"group_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"group_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7662342, "supported_languages": null}, "macro.servicenow.get_problem_columns": {"name": "get_problem_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_problem_columns.sql", "original_file_path": "macros/get_problem_columns.sql", "unique_id": "macro.servicenow.get_problem_columns", "macro_sql": "{% macro get_problem_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cause_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"confirmed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"confirmed_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"confirmed_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duplicate_of_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duplicate_of_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_reported_by_task_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_reported_by_task_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fix_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fix_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fix_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fix_communicated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fix_communicated_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fix_communicated_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fix_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"known_error\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"major_problem\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"problem_state\", \"datatype\": dbt.type_int()},\n    {\"name\": \"related_incidents\", \"datatype\": dbt.type_int()},\n    {\"name\": \"reopen_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"reopened_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"reopened_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reopened_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resolution_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resolved_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"resolved_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resolved_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"review_outcome\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfc_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfc_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subcategory\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"workaround\", \"datatype\": dbt.type_string()},\n    {\"name\": \"workaround_applied\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"workaround_communicated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"workaround_communicated_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"workaround_communicated_by_value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7695382, "supported_languages": null}, "macro.servicenow.get_sys_user_has_role_columns": {"name": "get_sys_user_has_role_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_sys_user_has_role_columns.sql", "original_file_path": "macros/get_sys_user_has_role_columns.sql", "unique_id": "macro.servicenow.get_sys_user_has_role_columns", "macro_sql": "{% macro get_sys_user_has_role_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"granted_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"granted_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"included_in_role_instance_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"included_in_role_instance_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"included_in_role_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"included_in_role_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inh_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"inh_map\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inherited\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"role_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"role_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_mod_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sys_updated_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7711082, "supported_languages": null}, "macro.servicenow.get_incident_columns": {"name": "get_incident_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_incident_columns.sql", "original_file_path": "macros/get_incident_columns.sql", "unique_id": "macro.servicenow.get_incident_columns", "macro_sql": "{% macro get_incident_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"business_impact\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_stc\", \"datatype\": dbt.type_int()},\n    {\"name\": \"calendar_stc\", \"datatype\": dbt.type_int()},\n    {\"name\": \"caller_id_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"caller_id_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cause\", \"datatype\": dbt.type_string()},\n    {\"name\": \"caused_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"caused_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"child_incidents\", \"datatype\": dbt.type_int()},\n    {\"name\": \"close_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hold_reason\", \"datatype\": dbt.type_int()},\n    {\"name\": \"incident_state\", \"datatype\": dbt.type_int()},\n    {\"name\": \"notify\", \"datatype\": dbt.type_int()},\n    {\"name\": \"origin_id_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"origin_id_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_incident_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_incident_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"problem_id_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"problem_id_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reopen_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"reopened_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reopened_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reopened_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"resolved_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"resolved_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resolved_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfc_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfc_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"severity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subcategory\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.773799, "supported_languages": null}, "macro.servicenow.get_problem_task_columns": {"name": "get_problem_task_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_problem_task_columns.sql", "original_file_path": "macros/get_problem_task_columns.sql", "unique_id": "macro.servicenow.get_problem_task_columns", "macro_sql": "{% macro get_problem_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"cause_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"close_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"other_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"problem_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"problem_task_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"problem_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reopen_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"reopened_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"reopened_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reopened_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"started_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"started_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"started_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.7752059, "supported_languages": null}, "macro.servicenow.get_sys_user_role_columns": {"name": "get_sys_user_role_columns", "resource_type": "macro", "package_name": "servicenow", "path": "macros/get_sys_user_role_columns.sql", "original_file_path": "macros/get_sys_user_role_columns.sql", "unique_id": "macro.servicenow.get_sys_user_role_columns", "macro_sql": "{% macro get_sys_user_role_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"assignable_by_link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"assignable_by_value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"can_delegate\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"elevated_privilege\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"grantable\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"includes_roles\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requires_subscription\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scoped_admin\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_created_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sys_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sys_updated_on\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723671293.776381, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.servicenow.stg_servicenow__task": {"name": "stg_servicenow__task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__task", "block_contents": "Staging table containing all tasks related information. A task represents a unit of work that needs to be accomplished or tracked within the ServiceNow system. It can be related to various processes, such as incident resolution, change management, or other workflows."}, "doc.servicenow.task": {"name": "task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task", "block_contents": "Table containing all tasks related information. A task represents a unit of work that needs to be accomplished or tracked within the ServiceNow system. It can be related to various processes, such as incident resolution, change management, or other workflows."}, "doc.servicenow.stg_servicenow__problem": {"name": "stg_servicenow__problem", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__problem", "block_contents": "Staging table containing all problem information."}, "doc.servicenow.problem": {"name": "problem", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem", "block_contents": "Table containing all problem information."}, "doc.servicenow.stg_servicenow__task_sla": {"name": "stg_servicenow__task_sla", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__task_sla", "block_contents": "Staging table containing all Service Level Agreement (SLA) information related to the task."}, "doc.servicenow.task_sla": {"name": "task_sla", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_sla", "block_contents": "Table containing all Service Level Agreement (SLA) information related to the task."}, "doc.servicenow.stg_servicenow__sys_user": {"name": "stg_servicenow__sys_user", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__sys_user", "block_contents": "Staging table containing information related to the system user associated with the task."}, "doc.servicenow.sys_user": {"name": "sys_user", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user", "block_contents": "Table containing all information related to the system user associated with the task."}, "doc.servicenow.stg_servicenow__problem_task": {"name": "stg_servicenow__problem_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__problem_task", "block_contents": "Staging table containing all the information related to the problem tasks."}, "doc.servicenow.problem_task": {"name": "problem_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task", "block_contents": "Table containing all the information related to the problem tasks."}, "doc.servicenow.stg_servicenow__incident": {"name": "stg_servicenow__incident", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__incident", "block_contents": "Staging table containing information related to incidents."}, "doc.servicenow.incident": {"name": "incident", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.incident", "block_contents": "Table containing all information related to incidents."}, "doc.servicenow.stg_servicenow__change_task": {"name": "stg_servicenow__change_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__change_task", "block_contents": "Staging table containing information related to change tasks."}, "doc.servicenow.change_task": {"name": "change_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task", "block_contents": "Table containing all information related to change tasks."}, "doc.servicenow.stg_servicenow__change_request": {"name": "stg_servicenow__change_request", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__change_request", "block_contents": "Staging table that contains information related to change requests."}, "doc.servicenow.change_request": {"name": "change_request", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request", "block_contents": "Table that contains all information related to change requests."}, "doc.servicenow._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow._fivetran_deleted", "block_contents": "Indicates whether the task record has been marked as deleted by the Fivetran connector."}, "doc.servicenow._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow._fivetran_synced", "block_contents": "Indicates whether the task record has been synchronized by the Fivetran connector."}, "doc.servicenow.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.source_relation", "block_contents": "Indicates the schema which the field originated. This is especially important when leveraging the union schema feature."}, "doc.servicenow.active": {"name": "active", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.active", "block_contents": "Flag indicating whether the record is currently active or completed."}, "doc.servicenow.is_task_active": {"name": "is_task_active", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_task_active", "block_contents": "Flag indicating whether the task is currently active or completed."}, "doc.servicenow.is_active": {"name": "is_active", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_active", "block_contents": "Flag indicating whether the record is currently active."}, "doc.servicenow.activity_due": {"name": "activity_due", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.activity_due", "block_contents": "The due date or time for completing the activity associated with the task."}, "doc.servicenow.additional_assignee_list": {"name": "additional_assignee_list", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.additional_assignee_list", "block_contents": "List of additional users or assignees associated with the task."}, "doc.servicenow.approval": {"name": "approval", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.approval", "block_contents": "Information related to the approval status and process for the task."}, "doc.servicenow.approval_history": {"name": "approval_history", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.approval_history", "block_contents": "History of approvals associated with the task."}, "doc.servicenow.approval_set": {"name": "approval_set", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.approval_set", "block_contents": "Set of approvals linked to the task."}, "doc.servicenow.assigned_to_link": {"name": "assigned_to_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assigned_to_link", "block_contents": "Link to the user or group assigned to the task."}, "doc.servicenow.assigned_to_value": {"name": "assigned_to_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assigned_to_value", "block_contents": "Value representing the user or group assigned to the task."}, "doc.servicenow.assignment_group_link": {"name": "assignment_group_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assignment_group_link", "block_contents": "Link to the assignment group associated with the task."}, "doc.servicenow.assignment_group_value": {"name": "assignment_group_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assignment_group_value", "block_contents": "Value representing the assignment group associated with the task."}, "doc.servicenow.business_duration": {"name": "business_duration", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_duration", "block_contents": "The duration of the task in terms of business hours."}, "doc.servicenow.business_service_link": {"name": "business_service_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_service_link", "block_contents": "Link to the business service associated with the task."}, "doc.servicenow.business_service_value": {"name": "business_service_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_service_value", "block_contents": "Value representing the business service associated with the task."}, "doc.servicenow.calendar_duration": {"name": "calendar_duration", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.calendar_duration", "block_contents": "The duration of the task in terms of calendar time."}, "doc.servicenow.close_notes": {"name": "close_notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.close_notes", "block_contents": "Additional notes or comments recorded upon task closure."}, "doc.servicenow.closed_at": {"name": "closed_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.closed_at", "block_contents": "Date and time when the task was closed or completed."}, "doc.servicenow.closed_by_link": {"name": "closed_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.closed_by_link", "block_contents": "Link to the user who closed or completed the task."}, "doc.servicenow.closed_by_value": {"name": "closed_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.closed_by_value", "block_contents": "Value representing the user who closed or completed the task."}, "doc.servicenow.cmdb_ci_link": {"name": "cmdb_ci_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cmdb_ci_link", "block_contents": "Link to the configuration item (CI) associated with the record in the Configuration Management Database (CMDB)."}, "doc.servicenow.cmdb_ci_value": {"name": "cmdb_ci_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cmdb_ci_value", "block_contents": "Value representing the configuration item (CI) associated with the record."}, "doc.servicenow.comments": {"name": "comments", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.comments", "block_contents": "General comments or notes related to the record."}, "doc.servicenow.comments_and_work_notes": {"name": "comments_and_work_notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.comments_and_work_notes", "block_contents": "Combined information of comments and work notes recorded during the record's lifecycle."}, "doc.servicenow.company_link": {"name": "company_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.company_link", "block_contents": "Link to the company associated with the record."}, "doc.servicenow.company_value": {"name": "company_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.company_value", "block_contents": "Value representing the company associated with the record."}, "doc.servicenow.contact_type": {"name": "contact_type", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.contact_type", "block_contents": "Type of contact associated with the record (e.g., customer, vendor)."}, "doc.servicenow.contract_link": {"name": "contract_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.contract_link", "block_contents": "Link to the contract associated with the record."}, "doc.servicenow.contract_value": {"name": "contract_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.contract_value", "block_contents": "Value representing the contract associated with the record."}, "doc.servicenow.correlation_display": {"name": "correlation_display", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.correlation_display", "block_contents": "Display information related to correlation of the record with other records."}, "doc.servicenow.correlation_id": {"name": "correlation_id", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.correlation_id", "block_contents": "Identifier used for correlating the record with related records."}, "doc.servicenow.delivery_plan_link": {"name": "delivery_plan_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.delivery_plan_link", "block_contents": "Link to the delivery plan associated with the task."}, "doc.servicenow.delivery_plan_value": {"name": "delivery_plan_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.delivery_plan_value", "block_contents": "Value representing the delivery plan associated with the task."}, "doc.servicenow.delivery_task_link": {"name": "delivery_task_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.delivery_task_link", "block_contents": "Link to the delivery task associated with the task."}, "doc.servicenow.delivery_task_value": {"name": "delivery_task_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.delivery_task_value", "block_contents": "Value representing the delivery task associated with the task."}, "doc.servicenow.description": {"name": "description", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.description", "block_contents": "Detailed description or information about the record."}, "doc.servicenow.task_description": {"name": "task_description", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_description", "block_contents": "Detailed description or information about the task."}, "doc.servicenow.due_date": {"name": "due_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.due_date", "block_contents": "The date by which the task is expected to be completed."}, "doc.servicenow.task_due_date_at": {"name": "task_due_date_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_due_date_at", "block_contents": "The date by which the task is expected to be completed."}, "doc.servicenow.escalation": {"name": "escalation", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.escalation", "block_contents": "Information about any escalation procedures or steps related to the task."}, "doc.servicenow.expected_start": {"name": "expected_start", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.expected_start", "block_contents": "The expected start date or time for the task."}, "doc.servicenow.follow_up": {"name": "follow_up", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.follow_up", "block_contents": "Timestamp of when follow up was applied to the task."}, "doc.servicenow.task_follow_up_at": {"name": "task_follow_up_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_follow_up_at", "block_contents": "Timestamp of when follow up was applied to the task."}, "doc.servicenow.group_list": {"name": "group_list", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.group_list", "block_contents": "List of groups associated with the task."}, "doc.servicenow.impact": {"name": "impact", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.impact", "block_contents": "Assessment of the impact that completing or not completing the task may have. This is the business loss and potential damage (for example, financial, customer, regulation, security, reputation, brand) caused by the incident"}, "doc.servicenow.knowledge": {"name": "knowledge", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.knowledge", "block_contents": "Indication of whether the task is associated with knowledge or documentation."}, "doc.servicenow.location_link": {"name": "location_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.location_link", "block_contents": "Link to the location associated with the task."}, "doc.servicenow.location_value": {"name": "location_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.location_value", "block_contents": "Value representing the location associated with the task."}, "doc.servicenow.made_sla": {"name": "made_sla", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.made_sla", "block_contents": "Indicates whether the task was completed within the agreed-upon Service Level Agreement (SLA)."}, "doc.servicenow.number": {"name": "number", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.number", "block_contents": "Unique identifier or reference number assigned to the task."}, "doc.servicenow.task_number": {"name": "task_number", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_number", "block_contents": "Unique identifier or reference number assigned to the task."}, "doc.servicenow.opened_at": {"name": "opened_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.opened_at", "block_contents": "Date and time when the task was initially opened."}, "doc.servicenow.task_opened_at": {"name": "task_opened_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_opened_at", "block_contents": "Date and time when the task was initially opened."}, "doc.servicenow.opened_by_link": {"name": "opened_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.opened_by_link", "block_contents": "Link to the user who initially opened the task."}, "doc.servicenow.opened_by_value": {"name": "opened_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.opened_by_value", "block_contents": "Value representing the user who initially opened the task."}, "doc.servicenow.order": {"name": "order", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.order", "block_contents": "Order or sequence number associated with the task."}, "doc.servicenow.task_order": {"name": "task_order", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_order", "block_contents": "Order or sequence number associated with the task."}, "doc.servicenow.parent_link": {"name": "parent_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.parent_link", "block_contents": "Link to the parent task or record associated with the task."}, "doc.servicenow.parent_value": {"name": "parent_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.parent_value", "block_contents": "Value representing the parent task or record associated with the task."}, "doc.servicenow.priority": {"name": "priority", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.priority", "block_contents": "Priority level assigned to the task. The priority field is automatically calculated based on the values of impact and urgency. This determines the sequence in which the record should be resolved."}, "doc.servicenow.reassignment_count": {"name": "reassignment_count", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reassignment_count", "block_contents": "Count of how many times the task has been reassigned."}, "doc.servicenow.rejection_goto_link": {"name": "rejection_goto_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.rejection_goto_link", "block_contents": "Link to the record or step to be followed in case of task rejection."}, "doc.servicenow.rejection_goto_value": {"name": "rejection_goto_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.rejection_goto_value", "block_contents": "Value representing the record or step to be followed in case of task rejection."}, "doc.servicenow.route_reason": {"name": "route_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.route_reason", "block_contents": "Reason or criteria for routing the task to a particular user or group."}, "doc.servicenow.service_offering_link": {"name": "service_offering_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.service_offering_link", "block_contents": "Link to the service offering associated with the record."}, "doc.servicenow.service_offering_value": {"name": "service_offering_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.service_offering_value", "block_contents": "Value representing the service offering associated with the record."}, "doc.servicenow.short_description": {"name": "short_description", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.short_description", "block_contents": "Brief or concise summary of the record."}, "doc.servicenow.sla_due": {"name": "sla_due", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sla_due", "block_contents": "Date and time by which the record is expected to meet the Service Level Agreement (SLA)."}, "doc.servicenow.state": {"name": "state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.state", "block_contents": "Current state or status of the record (e.g., in progress, on hold, closed)."}, "doc.servicenow.task_state": {"name": "task_state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_state", "block_contents": "Current state or status of the task (e.g., in progress, on hold, closed)."}, "doc.servicenow.sys_class_name": {"name": "sys_class_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_class_name", "block_contents": "Name of the table in which the record is stored."}, "doc.servicenow.sys_created_by": {"name": "sys_created_by", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_created_by", "block_contents": "User who initially created the record."}, "doc.servicenow.sys_created_on": {"name": "sys_created_on", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_created_on", "block_contents": "Date and time when the record was initially created."}, "doc.servicenow.created_at": {"name": "created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.created_at", "block_contents": "Date and time when the record was initially created."}, "doc.servicenow.created_date": {"name": "created_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.created_date", "block_contents": "Date the record was created."}, "doc.servicenow.updated_at": {"name": "updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.updated_at", "block_contents": "Date and time when the record was last updated."}, "doc.servicenow.updated_date": {"name": "updated_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.updated_date", "block_contents": "Date the record was last updated."}, "doc.servicenow.change_task_created_at": {"name": "change_task_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_created_at", "block_contents": "Date and time when the change task record was initially created."}, "doc.servicenow.change_task_updated_at": {"name": "change_task_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_updated_at", "block_contents": "Date and time when the change task record was last updated."}, "doc.servicenow.incident_created_at": {"name": "incident_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.incident_created_at", "block_contents": "Date and time when the incident record was initially created."}, "doc.servicenow.incident_updated_at": {"name": "incident_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.incident_updated_at", "block_contents": "Date and time when the incident record was last updated."}, "doc.servicenow.problem_created_at": {"name": "problem_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_created_at", "block_contents": "Date and time when the problem record was initially created."}, "doc.servicenow.problem_updated_at": {"name": "problem_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_updated_at", "block_contents": "Date and time when the problem record was last updated."}, "doc.servicenow.problem_task_created_at": {"name": "problem_task_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task_created_at", "block_contents": "Date and time when the problem task record was initially created."}, "doc.servicenow.problem_task_updated_at": {"name": "problem_task_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task_updated_at", "block_contents": "Date and time when the problem task record was last updated."}, "doc.servicenow.user_created_at": {"name": "user_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.user_created_at", "block_contents": "Date and time when the user record was initially created."}, "doc.servicenow.user_updated_at": {"name": "user_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.user_updated_at", "block_contents": "Date and time when the user record was last updated."}, "doc.servicenow.task_created_at": {"name": "task_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_created_at", "block_contents": "Date and time when the task record was initially created."}, "doc.servicenow.task_updated_at": {"name": "task_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_updated_at", "block_contents": "Date and time when the task record was last updated."}, "doc.servicenow.task_sla_created_at": {"name": "task_sla_created_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_sla_created_at", "block_contents": "Date and time when the task sla record was initially created."}, "doc.servicenow.task_sla_updated_at": {"name": "task_sla_updated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_sla_updated_at", "block_contents": "Date and time when the task sla record was last updated."}, "doc.servicenow.sys_domain_link": {"name": "sys_domain_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_domain_link", "block_contents": "Link to the system domain associated with the record."}, "doc.servicenow.sys_domain_path": {"name": "sys_domain_path", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_domain_path", "block_contents": "Path of the system domain associated with the record."}, "doc.servicenow.sys_domain_value": {"name": "sys_domain_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_domain_value", "block_contents": "Value representing the system domain associated with the record."}, "doc.servicenow.sys_id": {"name": "sys_id", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_id", "block_contents": "Unique identifier for the record."}, "doc.servicenow.sys_mod_count": {"name": "sys_mod_count", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_mod_count", "block_contents": "Number of times the record has been modified."}, "doc.servicenow.sys_updated_by": {"name": "sys_updated_by", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_updated_by", "block_contents": "User who last updated or modified the record."}, "doc.servicenow.sys_updated_on": {"name": "sys_updated_on", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_updated_on", "block_contents": "Date and time when the record was last updated."}, "doc.servicenow.task_effective_number": {"name": "task_effective_number", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_effective_number", "block_contents": "Effective number or identifier associated with the task."}, "doc.servicenow.universal_request_link": {"name": "universal_request_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.universal_request_link", "block_contents": "Link to the universal request associated with the task."}, "doc.servicenow.universal_request_value": {"name": "universal_request_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.universal_request_value", "block_contents": "Value representing the universal request associated with the task."}, "doc.servicenow.upon_approval": {"name": "upon_approval", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.upon_approval", "block_contents": "Actions or steps to be taken upon the approval of the task."}, "doc.servicenow.upon_reject": {"name": "upon_reject", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.upon_reject", "block_contents": "Actions or steps to be taken upon the rejection of the task."}, "doc.servicenow.urgency": {"name": "urgency", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.urgency", "block_contents": "Level of urgency associated with the record. Speed at which the business expects the record to be resolved."}, "doc.servicenow.watch_list": {"name": "watch_list", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.watch_list", "block_contents": "List of users or groups who are monitoring or \"watching\" the task."}, "doc.servicenow.wf_activity_link": {"name": "wf_activity_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.wf_activity_link", "block_contents": "Link to the workflow activity associated with the task."}, "doc.servicenow.wf_activity_value": {"name": "wf_activity_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.wf_activity_value", "block_contents": "Value representing the workflow activity associated with the task."}, "doc.servicenow.work_end": {"name": "work_end", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.work_end", "block_contents": "Date and time when the work on the task is scheduled to end."}, "doc.servicenow.work_notes": {"name": "work_notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.work_notes", "block_contents": "Notes or comments recorded during the work on the task."}, "doc.servicenow.work_notes_list": {"name": "work_notes_list", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.work_notes_list", "block_contents": "List of work notes recorded during the task's lifecycle."}, "doc.servicenow.work_start": {"name": "work_start", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.work_start", "block_contents": "Date and time when the work on the task is scheduled to start."}, "doc.servicenow.business_pause_duration": {"name": "business_pause_duration", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_pause_duration", "block_contents": "Duration of business pause associated with the task."}, "doc.servicenow.business_percentage": {"name": "business_percentage", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_percentage", "block_contents": "Percentage of business time completed for the task."}, "doc.servicenow.business_time_left": {"name": "business_time_left", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_time_left", "block_contents": "Remaining business time for the completion of the task."}, "doc.servicenow.duration": {"name": "duration", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.duration", "block_contents": "Total duration of the task, including both business and non-business time."}, "doc.servicenow.end_time": {"name": "end_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.end_time", "block_contents": "The scheduled or expected end time for the task."}, "doc.servicenow.has_breached": {"name": "has_breached", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.has_breached", "block_contents": "Indicates whether the task has breached the defined SLA or time limits."}, "doc.servicenow.original_breach_time": {"name": "original_breach_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.original_breach_time", "block_contents": "Original time when the SLA breach for the task was detected."}, "doc.servicenow.pause_duration": {"name": "pause_duration", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.pause_duration", "block_contents": "Duration of the pause associated with the task."}, "doc.servicenow.pause_time": {"name": "pause_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.pause_time", "block_contents": "Time when the task was paused or put on hold."}, "doc.servicenow.percentage": {"name": "percentage", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.percentage", "block_contents": "Percentage of total time completed for the task."}, "doc.servicenow.planned_end_time": {"name": "planned_end_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.planned_end_time", "block_contents": "The originally planned or expected end time for the task."}, "doc.servicenow.schedule_link": {"name": "schedule_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.schedule_link", "block_contents": "Link to the schedule associated with the task."}, "doc.servicenow.schedule_value": {"name": "schedule_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.schedule_value", "block_contents": "Value representing the schedule associated with the task."}, "doc.servicenow.sla_link": {"name": "sla_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sla_link", "block_contents": "Link to the Service Level Agreement (SLA) associated with the record."}, "doc.servicenow.sla_value": {"name": "sla_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sla_value", "block_contents": "Value representing the Service Level Agreement (SLA) associated with the record."}, "doc.servicenow.stage": {"name": "stage", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stage", "block_contents": "Current stage or phase of the record's lifecycle."}, "doc.servicenow.start_time": {"name": "start_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.start_time", "block_contents": "The scheduled or expected start time for the record."}, "doc.servicenow.task_link": {"name": "task_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_link", "block_contents": "Link to the related task record."}, "doc.servicenow.task_value": {"name": "task_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_value", "block_contents": "Value representing the related task record."}, "doc.servicenow.time_left": {"name": "time_left", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.time_left", "block_contents": "Remaining time for the completion of the task."}, "doc.servicenow.timezone": {"name": "timezone", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.timezone", "block_contents": "Timezone information associated with the record."}, "doc.servicenow.accumulated_roles": {"name": "accumulated_roles", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.accumulated_roles", "block_contents": "Roles accumulated or associated with the system user over time."}, "doc.servicenow.avatar": {"name": "avatar", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.avatar", "block_contents": "Avatar or profile picture associated with the system user."}, "doc.servicenow.building_link": {"name": "building_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.building_link", "block_contents": "Link to the building associated with the system user."}, "doc.servicenow.building_value": {"name": "building_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.building_value", "block_contents": "Value representing the building associated with the system user."}, "doc.servicenow.calendar_integration": {"name": "calendar_integration", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.calendar_integration", "block_contents": "Information about the integration of the user's calendar with the ServiceNow system."}, "doc.servicenow.city": {"name": "city", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.city", "block_contents": "City information associated with the record."}, "doc.servicenow.cost_center_link": {"name": "cost_center_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cost_center_link", "block_contents": "Link to the cost center associated with the record."}, "doc.servicenow.cost_center_value": {"name": "cost_center_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cost_center_value", "block_contents": "Value representing the cost center associated with the record."}, "doc.servicenow.country": {"name": "country", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.country", "block_contents": "Country information associated with the record."}, "doc.servicenow.date_format": {"name": "date_format", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.date_format", "block_contents": "The format in which dates are displayed or recorded for the system user."}, "doc.servicenow.default_perspective_link": {"name": "default_perspective_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.default_perspective_link", "block_contents": "Link to the default perspective associated with the system user."}, "doc.servicenow.default_perspective_value": {"name": "default_perspective_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.default_perspective_value", "block_contents": "Value representing the default perspective associated with the system user."}, "doc.servicenow.department_link": {"name": "department_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.department_link", "block_contents": "Link to the department associated with the system user."}, "doc.servicenow.department_value": {"name": "department_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.department_value", "block_contents": "Value representing the department associated with the system user."}, "doc.servicenow.edu_status": {"name": "edu_status", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.edu_status", "block_contents": "Education status or level associated with the system user."}, "doc.servicenow.email": {"name": "email", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.email", "block_contents": "Email address associated with the record."}, "doc.servicenow.employee_number": {"name": "employee_number", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.employee_number", "block_contents": "Employee number or identifier associated with the system user."}, "doc.servicenow.enable_multifactor_authn": {"name": "enable_multifactor_authn", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.enable_multifactor_authn", "block_contents": "Indication of whether multifactor authentication is enabled for the system user."}, "doc.servicenow.failed_attempts": {"name": "failed_attempts", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.failed_attempts", "block_contents": "Number of failed login attempts for the system user."}, "doc.servicenow.first_name": {"name": "first_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.first_name", "block_contents": "First name of the system user."}, "doc.servicenow.gender": {"name": "gender", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.gender", "block_contents": "Gender information associated with the system user."}, "doc.servicenow.hashed_user_id": {"name": "hashed_user_id", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.hashed_user_id", "block_contents": "Hashed identifier associated with the system user."}, "doc.servicenow.home_phone": {"name": "home_phone", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.home_phone", "block_contents": "Home phone number associated with the system user."}, "doc.servicenow.internal_integration_user": {"name": "internal_integration_user", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.internal_integration_user", "block_contents": "Indication of whether the system user is an internal integration user."}, "doc.servicenow.introduction": {"name": "introduction", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.introduction", "block_contents": "Introduction or bio information associated with the system user."}, "doc.servicenow.last_login": {"name": "last_login", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_login", "block_contents": "Date and time of the last login."}, "doc.servicenow.last_login_day_date": {"name": "last_login_day_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_login_day_date", "block_contents": "Date and time of the last login."}, "doc.servicenow.last_login_device": {"name": "last_login_device", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_login_device", "block_contents": "The device used for the user's last login to the system."}, "doc.servicenow.last_login_time": {"name": "last_login_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_login_time", "block_contents": "The specific time when the user last logged in to the system."}, "doc.servicenow.last_login_at": {"name": "last_login_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_login_at", "block_contents": "The specific time when the user last logged in to the system."}, "doc.servicenow.last_name": {"name": "last_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_name", "block_contents": "The family name or surname of the user."}, "doc.servicenow.last_password": {"name": "last_password", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.last_password", "block_contents": "The timestamp or information related to the user's last password update."}, "doc.servicenow.ldap_server_link": {"name": "ldap_server_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.ldap_server_link", "block_contents": "A link to the LDAP (Lightweight Directory Access Protocol) server associated with the user."}, "doc.servicenow.ldap_server_value": {"name": "ldap_server_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.ldap_server_value", "block_contents": "The value or name of the LDAP server associated with the user."}, "doc.servicenow.locked_out": {"name": "locked_out", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.locked_out", "block_contents": "Information about whether the user account is currently locked."}, "doc.servicenow.manager_link": {"name": "manager_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.manager_link", "block_contents": "A link to the user's manager or supervisor in the organizational hierarchy."}, "doc.servicenow.manager_value": {"name": "manager_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.manager_value", "block_contents": "The name or identifier of the user's manager or supervisor."}, "doc.servicenow.middle_name": {"name": "middle_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.middle_name", "block_contents": "The middle name or initial of the user."}, "doc.servicenow.mobile_phone": {"name": "mobile_phone", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.mobile_phone", "block_contents": "The contact number for the user's mobile phone."}, "doc.servicenow.name": {"name": "name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.name", "block_contents": "The full name of the record."}, "doc.servicenow.sys_user_name": {"name": "sys_user_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_name", "block_contents": "The system username or identifier for the user."}, "doc.servicenow.notification": {"name": "notification", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.notification", "block_contents": "Information related to user notifications or alerts."}, "doc.servicenow.password_needs_reset": {"name": "password_needs_reset", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.password_needs_reset", "block_contents": "Indicates whether the user needs to reset their password."}, "doc.servicenow.phone": {"name": "phone", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.phone", "block_contents": "The contact number belonging to this record."}, "doc.servicenow.photo": {"name": "photo", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.photo", "block_contents": "A link or reference to the user's profile photo."}, "doc.servicenow.preferred_language": {"name": "preferred_language", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.preferred_language", "block_contents": "The language preference set by the user."}, "doc.servicenow.roles": {"name": "roles", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.roles", "block_contents": "The roles assigned to the user in the system or organization."}, "doc.servicenow.source": {"name": "source", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.source", "block_contents": "The source or origin of the user's or user group's profile information."}, "doc.servicenow.time_format": {"name": "time_format", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.time_format", "block_contents": "The preferred time format for the user (e.g., 12-hour or 24-hour)."}, "doc.servicenow.time_zone": {"name": "time_zone", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.time_zone", "block_contents": "The time zone configured for the user."}, "doc.servicenow.title": {"name": "title", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.title", "block_contents": "The job title or position of the user within the organization."}, "doc.servicenow.user_name": {"name": "user_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.user_name", "block_contents": "The username used by the user to log in to the system."}, "doc.servicenow.user_password": {"name": "user_password", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.user_password", "block_contents": "The user's current password information or status."}, "doc.servicenow.vip": {"name": "vip", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.vip", "block_contents": "Indicates whether the user has VIP (Very Important Person) status."}, "doc.servicenow.web_service_access_only": {"name": "web_service_access_only", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.web_service_access_only", "block_contents": "Indicates whether the user has access only through web services."}, "doc.servicenow.zip": {"name": "zip", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.zip", "block_contents": "The postal code or ZIP code associated with the record."}, "doc.servicenow.cause_notes": {"name": "cause_notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cause_notes", "block_contents": "Additional notes or details about the cause of a particular issue or incident."}, "doc.servicenow.confirmed_at": {"name": "confirmed_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.confirmed_at", "block_contents": "The timestamp indicating when an issue or incident was confirmed or acknowledged."}, "doc.servicenow.problem_confirmed_at": {"name": "problem_confirmed_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_confirmed_at", "block_contents": "The timestamp indicating when the problem was confirmed or acknowledged."}, "doc.servicenow.confirmed_by_link": {"name": "confirmed_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.confirmed_by_link", "block_contents": "A link to the person or entity who confirmed or acknowledged the issue."}, "doc.servicenow.problem_confirmed_by_link": {"name": "problem_confirmed_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_confirmed_by_link", "block_contents": "A link to the person or entity who confirmed or acknowledged the problem."}, "doc.servicenow.confirmed_by_value": {"name": "confirmed_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.confirmed_by_value", "block_contents": "The name or identifier of the person or entity who confirmed or acknowledged the issue."}, "doc.servicenow.problem_confirmed_by_value": {"name": "problem_confirmed_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_confirmed_by_value", "block_contents": "The name or identifier of the person or entity who confirmed or acknowledged the problem."}, "doc.servicenow.duplicate_of_link": {"name": "duplicate_of_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.duplicate_of_link", "block_contents": "A link to the related issue that is identified as a duplicate of the current one."}, "doc.servicenow.duplicate_of_value": {"name": "duplicate_of_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.duplicate_of_value", "block_contents": "The name or identifier of the related issue that is identified as a duplicate."}, "doc.servicenow.first_reported_by_task_link": {"name": "first_reported_by_task_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.first_reported_by_task_link", "block_contents": "A link to the task or activity that first reported the issue."}, "doc.servicenow.problem_first_reported_by_task_link": {"name": "problem_first_reported_by_task_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_first_reported_by_task_link", "block_contents": "A link to the task or activity that first reported the problem."}, "doc.servicenow.first_reported_by_task_value": {"name": "first_reported_by_task_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.first_reported_by_task_value", "block_contents": "The name or identifier of the task or activity that first reported the issue."}, "doc.servicenow.problem_first_reported_by_task_value": {"name": "problem_first_reported_by_task_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_first_reported_by_task_value", "block_contents": "The name or identifier of the task or activity that first reported the problem."}, "doc.servicenow.fix_at": {"name": "fix_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_at", "block_contents": "The timestamp indicating when the issue is scheduled or planned to be fixed."}, "doc.servicenow.problem_fix_at": {"name": "problem_fix_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_fix_at", "block_contents": "The timestamp indicating when the problem is scheduled or planned to be fixed."}, "doc.servicenow.fix_by_link": {"name": "fix_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_by_link", "block_contents": "A link to the person or entity responsible for fixing the issue."}, "doc.servicenow.problem_fix_by_link": {"name": "problem_fix_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_fix_by_link", "block_contents": "A link to the person or entity responsible for fixing the problem."}, "doc.servicenow.fix_by_value": {"name": "fix_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_by_value", "block_contents": "The name or identifier of the person or entity responsible for fixing the issue."}, "doc.servicenow.problem_fix_by_value": {"name": "problem_fix_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_fix_by_value", "block_contents": "The name or identifier of the person or entity responsible for fixing the problem."}, "doc.servicenow.fix_communicated_at": {"name": "fix_communicated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_communicated_at", "block_contents": "The timestamp indicating when the fix for the issue was communicated."}, "doc.servicenow.fix_communicated_by_link": {"name": "fix_communicated_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_communicated_by_link", "block_contents": "A link to the person or entity who communicated the fix for the issue."}, "doc.servicenow.fix_communicated_by_value": {"name": "fix_communicated_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_communicated_by_value", "block_contents": "The name or identifier of the person or entity who communicated the fix for the issue."}, "doc.servicenow.fix_notes": {"name": "fix_notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fix_notes", "block_contents": "Additional notes or details related to the fix for the issue."}, "doc.servicenow.problem_fix_notes": {"name": "problem_fix_notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_fix_notes", "block_contents": "Additional notes or details related to the fix for the problem."}, "doc.servicenow.known_error": {"name": "known_error", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.known_error", "block_contents": "Indicates whether the issue is a known error with a documented resolution."}, "doc.servicenow.is_known_error": {"name": "is_known_error", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_known_error", "block_contents": "Indicates whether the issue is a known error with a documented resolution."}, "doc.servicenow.major_problem": {"name": "major_problem", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.major_problem", "block_contents": "Indicates whether the issue is categorized as a major problem."}, "doc.servicenow.is_major_problem": {"name": "is_major_problem", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_major_problem", "block_contents": "Indicates whether the issue is categorized as a major problem."}, "doc.servicenow.problem_state": {"name": "problem_state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_state", "block_contents": "The current state or status of the problem or issue."}, "doc.servicenow.related_incidents": {"name": "related_incidents", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.related_incidents", "block_contents": "Information about other incidents that are related to the current issue."}, "doc.servicenow.problem_related_incidents": {"name": "problem_related_incidents", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_related_incidents", "block_contents": "Number of incidents that are related to the current problem."}, "doc.servicenow.reopen_count": {"name": "reopen_count", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reopen_count", "block_contents": "The count of how many times the issue has been reopened."}, "doc.servicenow.reopened_at": {"name": "reopened_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reopened_at", "block_contents": "The timestamp indicating when the issue was last reopened."}, "doc.servicenow.reopened_by_link": {"name": "reopened_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reopened_by_link", "block_contents": "A link to the person or entity who reopened the issue."}, "doc.servicenow.reopened_by_value": {"name": "reopened_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reopened_by_value", "block_contents": "The name or identifier of the person or entity who reopened the issue."}, "doc.servicenow.resolution_code": {"name": "resolution_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.resolution_code", "block_contents": "The code or identifier associated with the resolution of the issue."}, "doc.servicenow.problem_resolution_code": {"name": "problem_resolution_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_resolution_code", "block_contents": "The code or identifier associated with the resolution of the problem."}, "doc.servicenow.resolved_at": {"name": "resolved_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.resolved_at", "block_contents": "The timestamp indicating when the issue was resolved."}, "doc.servicenow.problem_resolved_at": {"name": "problem_resolved_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_resolved_at", "block_contents": "The timestamp indicating when the problem was resolved."}, "doc.servicenow.resolved_by_link": {"name": "resolved_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.resolved_by_link", "block_contents": "A link to the person or entity who resolved the issue."}, "doc.servicenow.resolved_by_value": {"name": "resolved_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.resolved_by_value", "block_contents": "The name or identifier of the person or entity who resolved the issue."}, "doc.servicenow.problem_resolved_by_value": {"name": "problem_resolved_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_resolved_by_value", "block_contents": "The name or identifier of the person or entity who resolved the problem."}, "doc.servicenow.review_outcome": {"name": "review_outcome", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.review_outcome", "block_contents": "The outcome or result of the review process for the issue."}, "doc.servicenow.rfc_link": {"name": "rfc_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.rfc_link", "block_contents": "A link to the Request for Change (RFC) associated with the issue or incident."}, "doc.servicenow.rfc_value": {"name": "rfc_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.rfc_value", "block_contents": "The unique identifier or name associated with the Request for Change (RFC) linked to the issue."}, "doc.servicenow.problem_rfc_value": {"name": "problem_rfc_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_rfc_value", "block_contents": "The unique identifier or name associated with the Request for Change (RFC) linked to the problem."}, "doc.servicenow.subcategory": {"name": "subcategory", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.subcategory", "block_contents": "The specific subcategory or classification of the record, providing more detailed information about its nature."}, "doc.servicenow.problem_subcategory": {"name": "problem_subcategory", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_subcategory", "block_contents": "The specific subcategory or classification of the issue, providing more detailed information about its nature."}, "doc.servicenow.workaround": {"name": "workaround", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.workaround", "block_contents": "A description of a temporary or alternative solution that can be applied to address the issue before a permanent fix \nis implemented."}, "doc.servicenow.workaround_applied": {"name": "workaround_applied", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.workaround_applied", "block_contents": "Indicates whether a workaround has been applied to address the issue."}, "doc.servicenow.workaround_communicated_at": {"name": "workaround_communicated_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.workaround_communicated_at", "block_contents": "The timestamp indicating when the workaround for the issue was communicated."}, "doc.servicenow.workaround_communicated_by_link": {"name": "workaround_communicated_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.workaround_communicated_by_link", "block_contents": "A link to the person or entity who communicated the workaround for the issue."}, "doc.servicenow.workaround_communicated_by_value": {"name": "workaround_communicated_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.workaround_communicated_by_value", "block_contents": "The name or identifier of the person or entity who communicated the workaround for the issue."}, "doc.servicenow.cause_code": {"name": "cause_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cause_code", "block_contents": "The code or identifier associated with the cause of the issue or problem."}, "doc.servicenow.problem_task_cause_code": {"name": "problem_task_cause_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task_cause_code", "block_contents": "The code or identifier associated with the cause of the issue or problem."}, "doc.servicenow.close_code": {"name": "close_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.close_code", "block_contents": "The code or identifier associated with the closure or resolution."}, "doc.servicenow.problem_task_close_code": {"name": "problem_task_close_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task_close_code", "block_contents": "The code or identifier associated with the closure or resolution of the problem task."}, "doc.servicenow.change_task_close_code": {"name": "change_task_close_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_close_code", "block_contents": "The code or identifier associated with the closure or resolution of the change task."}, "doc.servicenow.change_request_close_code": {"name": "change_request_close_code", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_close_code", "block_contents": "The code or identifier associated with the closure or resolution of the change request."}, "doc.servicenow.other_reason": {"name": "other_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.other_reason", "block_contents": "Additional information or reasons associated with the issue, especially if it falls outside standard categories."}, "doc.servicenow.problem_link": {"name": "problem_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_link", "block_contents": "A link to the problem record associated with the issue or incident."}, "doc.servicenow.problem_task_type": {"name": "problem_task_type", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task_type", "block_contents": "The type or category of the task associated with the problem or issue."}, "doc.servicenow.problem_value": {"name": "problem_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_value", "block_contents": "The unique identifier or name associated with the problem linked to the record."}, "doc.servicenow.started_at": {"name": "started_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.started_at", "block_contents": "The timestamp indicating when the issue or incident was initiated or started."}, "doc.servicenow.problem_task_started_at": {"name": "problem_task_started_at", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_task_started_at", "block_contents": "The timestamp indicating when the issue or incident was initiated or started."}, "doc.servicenow.started_by_link": {"name": "started_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.started_by_link", "block_contents": "A link to the person or entity who initiated or started the issue or incident."}, "doc.servicenow.started_by_value": {"name": "started_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.started_by_value", "block_contents": "The name or identifier of the person or entity who initiated or started the issue or incident."}, "doc.servicenow.vendor_link": {"name": "vendor_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.vendor_link", "block_contents": "A link to the vendor or external entity associated with the record."}, "doc.servicenow.vendor_value": {"name": "vendor_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.vendor_value", "block_contents": "The name or identifier of the vendor or external entity linked to the record."}, "doc.servicenow.business_impact": {"name": "business_impact", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_impact", "block_contents": "Information about the impact of the issue on business operations or services."}, "doc.servicenow.business_stc": {"name": "business_stc", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_stc", "block_contents": "The business service that is impacted by the issue or incident."}, "doc.servicenow.calendar_stc": {"name": "calendar_stc", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.calendar_stc", "block_contents": "The calendar or schedule associated with the business service impacted by the issue."}, "doc.servicenow.caller_id_link": {"name": "caller_id_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.caller_id_link", "block_contents": "A link to the person or entity identified as the caller or reporter of the issue or incident."}, "doc.servicenow.caller_id_value": {"name": "caller_id_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.caller_id_value", "block_contents": "The name or identifier of the person or entity identified as the caller or reporter of the issue."}, "doc.servicenow.cause": {"name": "cause", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cause", "block_contents": "A description or explanation of the root cause of the issue or incident."}, "doc.servicenow.caused_by_link": {"name": "caused_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.caused_by_link", "block_contents": "A link to the record or entity that caused or triggered the issue or incident."}, "doc.servicenow.caused_by_value": {"name": "caused_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.caused_by_value", "block_contents": "The name or identifier of the record or entity that caused or triggered the issue or incident."}, "doc.servicenow.child_incidents": {"name": "child_incidents", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.child_incidents", "block_contents": "The number of incidents that are identified as child incidents linked to the current incident."}, "doc.servicenow.hold_reason": {"name": "hold_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.hold_reason", "block_contents": "The reason or rationale for placing the issue or incident on hold."}, "doc.servicenow.incident_state": {"name": "incident_state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.incident_state", "block_contents": "The current state or status of the incident."}, "doc.servicenow.notify": {"name": "notify", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.notify", "block_contents": "Indicates whether notifications or alerts have been configured for the issue or incident."}, "doc.servicenow.origin_id_link": {"name": "origin_id_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.origin_id_link", "block_contents": "A link to the original or source record from which the current record originated."}, "doc.servicenow.origin_id_value": {"name": "origin_id_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.origin_id_value", "block_contents": "The unique identifier or name associated with the original or source record linked to the current record."}, "doc.servicenow.parent_incident_link": {"name": "parent_incident_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.parent_incident_link", "block_contents": "A link to the parent incident record, indicating the incident from which the current incident is derived or related."}, "doc.servicenow.parent_incident_value": {"name": "parent_incident_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.parent_incident_value", "block_contents": "The unique identifier or name associated with the parent incident record linked to the current incident."}, "doc.servicenow.problem_id_link": {"name": "problem_id_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_id_link", "block_contents": "A link to the problem record associated with the current issue or incident."}, "doc.servicenow.problem_id_value": {"name": "problem_id_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_id_value", "block_contents": "The unique identifier or name associated with the problem record linked to the current issue or incident."}, "doc.servicenow.reopened_time": {"name": "reopened_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reopened_time", "block_contents": "The timestamp indicating when the issue or incident was reopened after being previously resolved."}, "doc.servicenow.severity": {"name": "severity", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.severity", "block_contents": "The level of impact or seriousness assigned to the issue or incident."}, "doc.servicenow.change_request_link": {"name": "change_request_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_link", "block_contents": "A link to the change request record associated with the issue or incident."}, "doc.servicenow.change_request_value": {"name": "change_request_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_value", "block_contents": "The unique identifier or name associated with the change request record linked to the issue or incident."}, "doc.servicenow.change_task_type": {"name": "change_task_type", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_type", "block_contents": "The type or category of the task associated with the change request or change record."}, "doc.servicenow.created_from": {"name": "created_from", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.created_from", "block_contents": "Information about the source or origin of the current record, indicating how it was created or generated."}, "doc.servicenow.change_task_created_from": {"name": "change_task_created_from", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_created_from", "block_contents": "Information about the source or origin of the current record, indicating how it was created or generated."}, "doc.servicenow.on_hold": {"name": "on_hold", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.on_hold", "block_contents": "Indicates whether the issue or incident is currently on hold or paused."}, "doc.servicenow.is_change_on_hold": {"name": "is_change_on_hold", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_change_on_hold", "block_contents": "Indicates whether the change task is currently on hold or paused."}, "doc.servicenow.is_change_request_on_hold": {"name": "is_change_request_on_hold", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_change_request_on_hold", "block_contents": "Indicates whether the change is currently on hold or paused."}, "doc.servicenow.on_hold_reason": {"name": "on_hold_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.on_hold_reason", "block_contents": "The reason or rationale for placing the associated record on hold."}, "doc.servicenow.change_task_on_hold_reason": {"name": "change_task_on_hold_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_on_hold_reason", "block_contents": "The reason or rationale for placing the change task on hold."}, "doc.servicenow.change_request_on_hold_reason": {"name": "change_request_on_hold_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_on_hold_reason", "block_contents": "The reason or rationale for placing the change on hold."}, "doc.servicenow.planned_end_date": {"name": "planned_end_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.planned_end_date", "block_contents": "The planned or scheduled end date for the change request or change record."}, "doc.servicenow.change_task_planned_end_date": {"name": "change_task_planned_end_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_planned_end_date", "block_contents": "The planned or scheduled end date for the change request or change record."}, "doc.servicenow.planned_start_date": {"name": "planned_start_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.planned_start_date", "block_contents": "The planned or scheduled start date for the change request or change record."}, "doc.servicenow.change_task_planned_start_date": {"name": "change_task_planned_start_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_task_planned_start_date", "block_contents": "The planned or scheduled start date for the change request or change record."}, "doc.servicenow.backout_plan": {"name": "backout_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.backout_plan", "block_contents": "Information about the plan or process for backing out or undoing the changes associated with the current record."}, "doc.servicenow.cab_date": {"name": "cab_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cab_date", "block_contents": "The date of the Change Advisory Board (CAB) meeting associated with the change request or change record."}, "doc.servicenow.cab_date_time": {"name": "cab_date_time", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cab_date_time", "block_contents": "The date and time of the Change Advisory Board (CAB) meeting associated with the change request or change record."}, "doc.servicenow.cab_delegate_link": {"name": "cab_delegate_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cab_delegate_link", "block_contents": "A link to the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) in relation \nto the change request."}, "doc.servicenow.cab_delegate_value": {"name": "cab_delegate_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cab_delegate_value", "block_contents": "The name or identifier of the person or entity delegated to represent or act on behalf of the Change Advisory Board (CAB) \nin relation to the change request."}, "doc.servicenow.cab_recommendation": {"name": "cab_recommendation", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cab_recommendation", "block_contents": "The recommendation or decision made by the Change Advisory Board (CAB) regarding the change request."}, "doc.servicenow.cab_required": {"name": "cab_required", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cab_required", "block_contents": "Indicates whether the Change Advisory Board (CAB) approval is required for the change request."}, "doc.servicenow.is_cab_required": {"name": "is_cab_required", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_cab_required", "block_contents": "Indicates whether the Change Advisory Board (CAB) approval is required for the change request."}, "doc.servicenow.change_plan": {"name": "change_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_plan", "block_contents": "Information about the plan or process for implementing the changes associated with the current record."}, "doc.servicenow.chg_model_link": {"name": "chg_model_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.chg_model_link", "block_contents": "A link to the change model or template associated with the change request or change record."}, "doc.servicenow.chg_model_value": {"name": "chg_model_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.chg_model_value", "block_contents": "The name or identifier of the change model or template linked to the change request or change record."}, "doc.servicenow.conflict_last_run": {"name": "conflict_last_run", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.conflict_last_run", "block_contents": "The timestamp indicating when the conflict detection was last run for the change request or change record."}, "doc.servicenow.conflict_status": {"name": "conflict_status", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.conflict_status", "block_contents": "The status or outcome of the conflict detection process for the change request or change record."}, "doc.servicenow.end_date": {"name": "end_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.end_date", "block_contents": "The end date for the implementation or execution associated with the current record."}, "doc.servicenow.change_end_date": {"name": "change_end_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_end_date", "block_contents": "The end date for the change or execution of the changes associated with the current record."}, "doc.servicenow.implementation_plan": {"name": "implementation_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.implementation_plan", "block_contents": "Information about the plan or process for implementing the changes associated with the current record."}, "doc.servicenow.change_implementation_plan": {"name": "change_implementation_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_implementation_plan", "block_contents": "Information about the plan or process for implementing the changes associated with the current record."}, "doc.servicenow.justification": {"name": "justification", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.justification", "block_contents": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made."}, "doc.servicenow.change_justification": {"name": "change_justification", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_justification", "block_contents": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made."}, "doc.servicenow.change_request_end_date": {"name": "change_request_end_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_end_date", "block_contents": "The end date for the change or execution of the change request associated with the current record."}, "doc.servicenow.change_request_implementation_plan": {"name": "change_request_implementation_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_implementation_plan", "block_contents": "Information about the plan or process for implementing the changes associated with the current record."}, "doc.servicenow.change_request_justification": {"name": "change_request_justification", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_justification", "block_contents": "The reasoning or justification behind the changes associated with the current record, providing context or explanation for the modifications made."}, "doc.servicenow.on_hold_task": {"name": "on_hold_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.on_hold_task", "block_contents": "A link to the task or activity that indicates the current record is on hold, specifying the task associated with the \nhold status."}, "doc.servicenow.outside_maintenance_schedule": {"name": "outside_maintenance_schedule", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.outside_maintenance_schedule", "block_contents": "Indicates whether the changes associated with the current record fall outside the regular maintenance schedule or window."}, "doc.servicenow.phase": {"name": "phase", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.phase", "block_contents": "The phase or stage of the change request or change record within the change management process, indicating its progress or status."}, "doc.servicenow.change_phase": {"name": "change_phase", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_phase", "block_contents": "The phase or stage of the change request or change record within the change management process, indicating its progress or status."}, "doc.servicenow.phase_state": {"name": "phase_state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.phase_state", "block_contents": "The current state or status of the phase associated with the change request or change record."}, "doc.servicenow.change_phase_state": {"name": "change_phase_state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_phase_state", "block_contents": "The current state or status of the phase associated with the change request or change record."}, "doc.servicenow.production_system": {"name": "production_system", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.production_system", "block_contents": "Indicates whether the changes associated with the current record are intended for the production environment or system."}, "doc.servicenow.is_production_system": {"name": "is_production_system", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_production_system", "block_contents": "Indicates whether the changes associated with the current record are intended for the production environment or system."}, "doc.servicenow.reason": {"name": "reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.reason", "block_contents": "The reason or rationale behind the changes requested by the current record, providing context or explanation for the modifications made."}, "doc.servicenow.change_reason": {"name": "change_reason", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_reason", "block_contents": "The reason or rationale behind the changes associated with the current record, providing context or explanation for the modifications made."}, "doc.servicenow.requested_by_date": {"name": "requested_by_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.requested_by_date", "block_contents": "The date the change is requested for."}, "doc.servicenow.change_requested_by_date": {"name": "change_requested_by_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_requested_by_date", "block_contents": "The date the change is requested for."}, "doc.servicenow.requested_by_link": {"name": "requested_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.requested_by_link", "block_contents": "A link to the person or entity who requested or initiated the changes associated with the current record."}, "doc.servicenow.change_requested_by_link": {"name": "change_requested_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_requested_by_link", "block_contents": "A link to the person or entity who requested or initiated the changes associated with the current record."}, "doc.servicenow.requested_by_value": {"name": "requested_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.requested_by_value", "block_contents": "The name or identifier of the person or entity who requested or initiated the changes associated with the current record."}, "doc.servicenow.change_requested_by_value": {"name": "change_requested_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_requested_by_value", "block_contents": "The name or identifier of the person or entity who requested or initiated the changes associated with the current record."}, "doc.servicenow.review_comments": {"name": "review_comments", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.review_comments", "block_contents": "Comments or feedback provided during the review process for the changes associated with the current record."}, "doc.servicenow.review_date": {"name": "review_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.review_date", "block_contents": "The date when the record was reviewed or evaluated."}, "doc.servicenow.change_review_date": {"name": "change_review_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_review_date", "block_contents": "The date when the changes associated with the current record were reviewed or evaluated."}, "doc.servicenow.change_request_review_date": {"name": "change_request_review_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_review_date", "block_contents": "The date when the change request was reviewed or evaluated."}, "doc.servicenow.review_status": {"name": "review_status", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.review_status", "block_contents": "The status or outcome of the review process associated with the current record."}, "doc.servicenow.change_request_review_status": {"name": "change_request_review_status", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_review_status", "block_contents": "The status or outcome of the review process for the change request associated with the current record."}, "doc.servicenow.risk": {"name": "risk", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.risk", "block_contents": "The level of risk associated with the changes, indicating the potential impact or consequences of implementing the modifications outlined in the current record."}, "doc.servicenow.change_request_risk": {"name": "change_request_risk", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_risk", "block_contents": "The level of risk associated with the changes, indicating the potential impact or consequences of implementing the modifications outlined in the current record."}, "doc.servicenow.risk_impact_analysis": {"name": "risk_impact_analysis", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.risk_impact_analysis", "block_contents": "An analysis or assessment of the impact or consequences of the changes outlined in the current record."}, "doc.servicenow.scope": {"name": "scope", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.scope", "block_contents": "The scope or extent of the changes outlined in the current record, specifying the areas or components affected by the modifications."}, "doc.servicenow.change_request_scope": {"name": "change_request_scope", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_scope", "block_contents": "The scope or extent of the changes outlined in the current record, specifying the areas or components affected by the modifications."}, "doc.servicenow.change_request_start_date": {"name": "change_request_start_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_start_date", "block_contents": "The requested start date for the implementation or execution of the changes associated with the current record."}, "doc.servicenow.start_date": {"name": "start_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.start_date", "block_contents": "The start date associated with the current record."}, "doc.servicenow.std_change_producer_version_link": {"name": "std_change_producer_version_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.std_change_producer_version_link", "block_contents": "A link to the version of the standard change producer associated with the current record."}, "doc.servicenow.std_change_producer_version_value": {"name": "std_change_producer_version_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.std_change_producer_version_value", "block_contents": "The name or identifier of the version of the standard change producer linked to the current record."}, "doc.servicenow.test_plan": {"name": "test_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.test_plan", "block_contents": "Information about the plan or process for testing the changes associated with the current record."}, "doc.servicenow.change_request_test_plan": {"name": "change_request_test_plan", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_test_plan", "block_contents": "Information about the plan or process for testing the changes requested by the change request of this record."}, "doc.servicenow.type": {"name": "type", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.type", "block_contents": "The type or category regarding the current record"}, "doc.servicenow.change_request_type": {"name": "change_request_type", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_type", "block_contents": "The type or category of the changes outlined in the current record, indicating the nature or purpose of the modifications."}, "doc.servicenow.unauthorized": {"name": "unauthorized", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.unauthorized", "block_contents": "Indicates whether the changes associated with the current record were made without proper authorization or approval."}, "doc.servicenow.is_change_request_unauthorized": {"name": "is_change_request_unauthorized", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_change_request_unauthorized", "block_contents": "Indicates whether the changes associated with the current record were made without proper authorization or approval."}, "doc.servicenow.category": {"name": "category", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.category", "block_contents": "The category of the record."}, "doc.servicenow.change_category": {"name": "change_category", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_category", "block_contents": "The category of the change."}, "doc.servicenow.problem_category": {"name": "problem_category", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_category", "block_contents": "The category of the problem."}, "doc.servicenow.servicenow__task_enhanced": {"name": "servicenow__task_enhanced", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__task_enhanced", "block_contents": "Each record represents a task with additional information about its associated problem, incident, or change request. Finally, it contains user information for who opened, started, updated, reported, fixed, closed, requested, reported, or confirmed the task."}, "doc.servicenow.is_problem_task": {"name": "is_problem_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_problem_task", "block_contents": "A boolean of whether the task is a problem task."}, "doc.servicenow.is_change_task": {"name": "is_change_task", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.is_change_task", "block_contents": "A boolean of whether the task is a change task."}, "doc.servicenow.task_minutes_open_to_close": {"name": "task_minutes_open_to_close", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_minutes_open_to_close", "block_contents": "The number of minutes from time that the task was opened to the time that the task was closed."}, "doc.servicenow.associated_problem_id": {"name": "associated_problem_id", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.associated_problem_id", "block_contents": "The associated problem with this task; the sys_id from the problem object."}, "doc.servicenow.associated_change_request_id": {"name": "associated_change_request_id", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.associated_change_request_id", "block_contents": "The associated change request with this task; the sys_id from the change request object."}, "doc.servicenow.servicenow__activity_summary": {"name": "servicenow__activity_summary", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__activity_summary", "block_contents": "Each record represents aggregate task, problem, change, incident, and change request data by varying grains including update date, status, priority, impact, and urgency."}, "doc.servicenow.total_incidents_caused_by_problem": {"name": "total_incidents_caused_by_problem", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_incidents_caused_by_problem", "block_contents": "The total number of incidents associated with this problem."}, "doc.servicenow.total_active_tasks": {"name": "total_active_tasks", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_active_tasks", "block_contents": "Total number of active tasks"}, "doc.servicenow.total_active_problem_tasks": {"name": "total_active_problem_tasks", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_active_problem_tasks", "block_contents": "Total number of active problem tasks"}, "doc.servicenow.total_active_change_tasks": {"name": "total_active_change_tasks", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_active_change_tasks", "block_contents": "Total number of active change tasks"}, "doc.servicenow.total_associated_problems": {"name": "total_associated_problems", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_associated_problems", "block_contents": "Total number of problems"}, "doc.servicenow.total_incidents_caused_by_problems": {"name": "total_incidents_caused_by_problems", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_incidents_caused_by_problems", "block_contents": "Total number of incidents caused by associated problems"}, "doc.servicenow.total_change_requests": {"name": "total_change_requests", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_change_requests", "block_contents": "Total number of change requests"}, "doc.servicenow.total_closed_tasks": {"name": "total_closed_tasks", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_closed_tasks", "block_contents": "Total number of closed tasks"}, "doc.servicenow.average_minutes_open_to_close": {"name": "average_minutes_open_to_close", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.average_minutes_open_to_close", "block_contents": "Average number of minutes between the time that the task was opened to the time that the task was closed."}, "doc.servicenow.total_tasks_made_slas": {"name": "total_tasks_made_slas", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_tasks_made_slas", "block_contents": "The count of total tasks where is_made_sla = True"}, "doc.servicenow.customer": {"name": "customer", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.customer", "block_contents": "Boolean of whether the company is a customer."}, "doc.servicenow.fax_phone": {"name": "fax_phone", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fax_phone", "block_contents": "Fax phone number of the record."}, "doc.servicenow.fiscal_year": {"name": "fiscal_year", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.fiscal_year", "block_contents": "Company's fiscal year"}, "doc.servicenow.notes": {"name": "notes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.notes", "block_contents": "Notes about the record"}, "doc.servicenow.address_state": {"name": "address_state", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.address_state", "block_contents": "The geographical state to which the record belongs"}, "doc.servicenow.street": {"name": "street", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.street", "block_contents": "The street to which the record belongs"}, "doc.servicenow.vendor": {"name": "vendor", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.vendor", "block_contents": "Boolean of whether the company is a vendor"}, "doc.servicenow.vendor_type": {"name": "vendor_type", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.vendor_type", "block_contents": "Vendor types group vendors that offer similar goods and services, and are useful for reporting and comparing vendor performance. Example: Hardware, Services"}, "doc.servicenow.website": {"name": "website", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.website", "block_contents": "Company website"}, "doc.servicenow.stg_servicenow__core_company": {"name": "stg_servicenow__core_company", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__core_company", "block_contents": "Staging table containing all records relating to companies."}, "doc.servicenow.core_company": {"name": "core_company", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.core_company", "block_contents": "Table containing all company related information."}, "doc.servicenow.cmdb_ci": {"name": "cmdb_ci", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cmdb_ci", "block_contents": "The base table for all CI (Configuration Item) tables in the CMDB (Configuration Management Database)"}, "doc.servicenow.stg_servicenow__cmdb_ci": {"name": "stg_servicenow__cmdb_ci", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__cmdb_ci", "block_contents": "Staging table containing all records relating to CI(Configuration Item) tables in the CMDB (Configuration Management Database)"}, "doc.servicenow.cmdb_ci_service": {"name": "cmdb_ci_service", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cmdb_ci_service", "block_contents": "Table containing all information related to application service areas. An application service is work or goods that are supported by an IT infrastructure. For example, delivering email service to an employee can require services such as email servers, web servers, and the work to configure the user's account. An application service management map graphically displays the configuration items (CI) that support an application service and the relationships between the CIs."}, "doc.servicenow.stg_servicenow__cmdb_ci_service": {"name": "stg_servicenow__cmdb_ci_service", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__cmdb_ci_service", "block_contents": "Staging table containing all records related to CMDB CI service areas."}, "doc.servicenow.sys_user_group": {"name": "sys_user_group", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_group", "block_contents": "Table containing all information related to user groups."}, "doc.servicenow.stg_servicenow__sys_user_group": {"name": "stg_servicenow__sys_user_group", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__sys_user_group", "block_contents": "Staging table containing information related to user groups."}, "doc.servicenow.attributes": {"name": "attributes", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.attributes", "block_contents": "Data elements which describe the characteristics of CIs"}, "doc.servicenow.business_unit_link": {"name": "business_unit_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_unit_link", "block_contents": "Link to business unit. Business units usually comprise departments and are associated with a company"}, "doc.servicenow.business_unit_value": {"name": "business_unit_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_unit_value", "block_contents": "The ID of the business unit."}, "doc.servicenow.cost": {"name": "cost", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cost", "block_contents": "The cost related to the record."}, "doc.servicenow.cost_cc": {"name": "cost_cc", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cost_cc", "block_contents": "The cost center that the record belongs to."}, "doc.servicenow.managed_by_link": {"name": "managed_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.managed_by_link", "block_contents": "The link to the user profile that manages this record."}, "doc.servicenow.managed_by_value": {"name": "managed_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.managed_by_value", "block_contents": "The ID of the user profile that manages this record."}, "doc.servicenow.manufacturer_link": {"name": "manufacturer_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.manufacturer_link", "block_contents": "The link to the manufacturer that manages this record."}, "doc.servicenow.manufacturer_value": {"name": "manufacturer_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.manufacturer_value", "block_contents": "The ID of the manufacturer that manages this record."}, "doc.servicenow.model_id_link": {"name": "model_id_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.model_id_link", "block_contents": "The link to the model related to the CI."}, "doc.servicenow.model_id_value": {"name": "model_id_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.model_id_value", "block_contents": "The ID to the model related to the CI."}, "doc.servicenow.model_number": {"name": "model_number", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.model_number", "block_contents": "The number of the model related to the IC."}, "doc.servicenow.owned_by_link": {"name": "owned_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.owned_by_link", "block_contents": "The link to the owner of the CI related to this record."}, "doc.servicenow.owned_by_value": {"name": "owned_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.owned_by_value", "block_contents": "The ID to the owner of the CI related to this record."}, "doc.servicenow.sys_class_path": {"name": "sys_class_path", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_class_path", "block_contents": "Where a particular CI class is within the overall hierarchy of classes."}, "doc.servicenow.service_classification": {"name": "service_classification", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.service_classification", "block_contents": "The type of service. Each type contains groups of CI services that share attributes."}, "doc.servicenow.service_level_requirement": {"name": "service_level_requirement", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.service_level_requirement", "block_contents": "Requirement specified to maintain service commitments between parties."}, "doc.servicenow.default_assignee_link": {"name": "default_assignee_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.default_assignee_link", "block_contents": "Link to the user that is the default assignee for this record."}, "doc.servicenow.default_assignee_value": {"name": "default_assignee_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.default_assignee_value", "block_contents": "ID of the user that is the default assignee for this record."}, "doc.servicenow.exclude_manager": {"name": "exclude_manager", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.exclude_manager", "block_contents": "Boolean of whether the group manager receives email notifications."}, "doc.servicenow.include_members": {"name": "include_members", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.include_members", "block_contents": "Boolean of whether the group members receive individual emails when someone sends an email to the Group Email address."}, "doc.servicenow.sys_user_group_parent_value": {"name": "sys_user_group_parent_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_group_parent_value", "block_contents": "ID of the other group of which this group is a member. If a group has a parent, the child group inherits the roles of the parent group. The members of the child group are not members of the parent group."}, "doc.servicenow.sys_user_group_parent_link": {"name": "sys_user_group_parent_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_group_parent_link", "block_contents": "Link to the other group of which this group is a member. If a group has a parent, the child group inherits the roles of the parent group. The members of the child group are not members of the parent group."}, "doc.servicenow.cmdb_ci_name": {"name": "cmdb_ci_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.cmdb_ci_name", "block_contents": "Name of the relevant CMDB CI."}, "doc.servicenow.assignment_group_name": {"name": "assignment_group_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assignment_group_name", "block_contents": "Name of the relevant assignment group."}, "doc.servicenow.business_service_name": {"name": "business_service_name", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.business_service_name", "block_contents": "Name of the relevant business service."}, "doc.servicenow.task_updated_date": {"name": "task_updated_date", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.task_updated_date", "block_contents": "The day the task last got updated."}, "doc.servicenow.unverified": {"name": "unverified", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.unverified", "block_contents": "Boolean indicating if the change task is unverified."}, "doc.servicenow.monitor": {"name": "monitor", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.monitor", "block_contents": "Monitor in relation to the cmdb_ci_service."}, "doc.servicenow.servicenow__problem_enhanced": {"name": "servicenow__problem_enhanced", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__problem_enhanced", "block_contents": "Each record represents a problem with additional information about users who have interacted with it, pertinent task data, and relevant timestamps."}, "doc.servicenow.problem_minutes_created_to_fix": {"name": "problem_minutes_created_to_fix", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_minutes_created_to_fix", "block_contents": "The minutes lapsed from when the problem was created to when it was fixed."}, "doc.servicenow.problem_minutes_created_to_resolved": {"name": "problem_minutes_created_to_resolved", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.problem_minutes_created_to_resolved", "block_contents": "The minutes lapsed from when the problem was created to when it was resolved."}, "doc.servicenow.total_related_tasks": {"name": "total_related_tasks", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.total_related_tasks", "block_contents": "The total number of tasks tied to this record."}, "doc.servicenow.servicenow__change_request_enhanced": {"name": "servicenow__change_request_enhanced", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__change_request_enhanced", "block_contents": "Each record represents a change request with additional information about users who have interacted with it, pertinent task data, and relevant timestamps."}, "doc.servicenow.change_request_days_created_to_reviewed": {"name": "change_request_days_created_to_reviewed", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_days_created_to_reviewed", "block_contents": "The days lapsed from when the change request was created to when it was reviewed"}, "doc.servicenow.change_request_days_created_to_start": {"name": "change_request_days_created_to_start", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_days_created_to_start", "block_contents": "The days lapsed from when the change request was created to when it was started"}, "doc.servicenow.change_request_days_requested_by_to_start": {"name": "change_request_days_requested_by_to_start", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.change_request_days_requested_by_to_start", "block_contents": "The days lapsed from when the change request was requested to when it was started"}, "doc.servicenow.servicenow__incident_enhanced": {"name": "servicenow__incident_enhanced", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__incident_enhanced", "block_contents": "Each record represents an incident with additional information about users who have interacted with it and relevant timestamps."}, "doc.servicenow.incident_minutes_created_to_resolved": {"name": "incident_minutes_created_to_resolved", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.incident_minutes_created_to_resolved", "block_contents": "Minutes elapsed from when incident was created to resolved."}, "doc.servicenow.sys_user_role": {"name": "sys_user_role", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_role", "block_contents": "Table containing all the information about roles that can belong to a user. A user\u2019s role can be directly granted, inherited from other roles, or inherited from groups."}, "doc.servicenow.stg_servicenow__sys_user_role": {"name": "stg_servicenow__sys_user_role", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__sys_user_role", "block_contents": "Staging table containing information about roles that can belong to a user. When a role is added to a user, a new record is created here. A user\u2019s role can be directly granted, inherited from other roles, or inherited from groups."}, "doc.servicenow.sys_user_has_role": {"name": "sys_user_has_role", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_has_role", "block_contents": "Table containing all the information about each unique user and role combination. When a role is added to a user, a new record is created here. This relates the sys_user table with the sys_user_role table."}, "doc.servicenow.stg_servicenow__sys_user_has_role": {"name": "stg_servicenow__sys_user_has_role", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__sys_user_has_role", "block_contents": "Staging table containing information about each unique user and role combination. When a role is added to a user, a new record is created here. This relates the sys_user table with the sys_user_role table."}, "doc.servicenow.sys_user_grmember": {"name": "sys_user_grmember", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_grmember", "block_contents": "Table containing all the information about a given user and given group. This relates the sys_user_group table to the sys_user table."}, "doc.servicenow.stg_servicenow__sys_user_grmember": {"name": "stg_servicenow__sys_user_grmember", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.stg_servicenow__sys_user_grmember", "block_contents": "Staging table containing information about a given user and given group. This relates the sys_user_group table to the sys_user table."}, "doc.servicenow.assignable_by_link": {"name": "assignable_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assignable_by_link", "block_contents": "The link to the entity that can assign this role."}, "doc.servicenow.assignable_by_value": {"name": "assignable_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.assignable_by_value", "block_contents": "The value of the entity that can assign this role."}, "doc.servicenow.can_delegate": {"name": "can_delegate", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.can_delegate", "block_contents": "Boolean of whether this role can delegate."}, "doc.servicenow.elevated_privilege": {"name": "elevated_privilege", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.elevated_privilege", "block_contents": "Boolean of whether this role is an elevated privilege."}, "doc.servicenow.grantable": {"name": "grantable", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.grantable", "block_contents": "Boolean of whether this role is grantable."}, "doc.servicenow.includes_roles": {"name": "includes_roles", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.includes_roles", "block_contents": "The roles included in this record."}, "doc.servicenow.requires_subscription": {"name": "requires_subscription", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.requires_subscription", "block_contents": "If this role requires a subscription."}, "doc.servicenow.scoped_admin": {"name": "scoped_admin", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.scoped_admin", "block_contents": "Boolean of whether the role was scoped administration."}, "doc.servicenow.suffix": {"name": "suffix", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.suffix", "block_contents": "Suffix of the record."}, "doc.servicenow.granted_by_link": {"name": "granted_by_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.granted_by_link", "block_contents": "The link to the entity that granted this."}, "doc.servicenow.granted_by_value": {"name": "granted_by_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.granted_by_value", "block_contents": "The value of the entity that granted this."}, "doc.servicenow.included_in_role_instance_link": {"name": "included_in_role_instance_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.included_in_role_instance_link", "block_contents": "The link to the role instance included in the role."}, "doc.servicenow.included_in_role_instance_value": {"name": "included_in_role_instance_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.included_in_role_instance_value", "block_contents": "The value of the role instance included in the role."}, "doc.servicenow.included_in_role_link": {"name": "included_in_role_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.included_in_role_link", "block_contents": "The link to the role included in the role."}, "doc.servicenow.included_in_role_value": {"name": "included_in_role_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.included_in_role_value", "block_contents": "The value of the role included in the role."}, "doc.servicenow.inh_count": {"name": "inh_count", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.inh_count", "block_contents": "Count of inherited roles."}, "doc.servicenow.inh_map": {"name": "inh_map", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.inh_map", "block_contents": "Mapping of inherited roles."}, "doc.servicenow.inherited": {"name": "inherited", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.inherited", "block_contents": "Boolean of whether the role is inherited."}, "doc.servicenow.role_link": {"name": "role_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.role_link", "block_contents": "Link to the role in the sys_user_role table."}, "doc.servicenow.role_value": {"name": "role_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.role_value", "block_contents": "The sys_id associated with the role in the sys_user_role table."}, "doc.servicenow.user_link": {"name": "user_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.user_link", "block_contents": "Link to the user in the sys_user table."}, "doc.servicenow.user_value": {"name": "user_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.user_value", "block_contents": "The sys_id associated with the user in the sys_user table."}, "doc.servicenow.group_link": {"name": "group_link", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.group_link", "block_contents": "Link to the group in the sys_user_group table."}, "doc.servicenow.group_value": {"name": "group_value", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.group_value", "block_contents": "The sys_id associated with the group in the sys_user_group table."}, "doc.servicenow.servicenow__user_aggregated": {"name": "servicenow__user_aggregated", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__user_aggregated", "block_contents": "Each record represents a user with their associated groups and roles. To prevent run failures caused by character limits, if there are more than 1000 distinct associated values, the field will output 'Too many fields to render' ."}, "doc.servicenow.servicenow__user_enhanced": {"name": "servicenow__user_enhanced", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.servicenow__user_enhanced", "block_contents": "Each record represents a user with their associated groups and roles, in addition to additional user info from the sys_user table."}, "doc.servicenow.sys_user_group_ids": {"name": "sys_user_group_ids", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_group_ids", "block_contents": "List of associated user group ids."}, "doc.servicenow.sys_user_role_ids": {"name": "sys_user_role_ids", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_role_ids", "block_contents": "List of associated user roles ids."}, "doc.servicenow.sys_user_role_names": {"name": "sys_user_role_names", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_role_names", "block_contents": "Names of associated user roles."}, "doc.servicenow.included_roles": {"name": "included_roles", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.included_roles", "block_contents": "List of included roles."}, "doc.servicenow.sys_user_group_roles": {"name": "sys_user_group_roles", "resource_type": "doc", "package_name": "servicenow", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.servicenow.sys_user_group_roles", "block_contents": "List of associated user group roles."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.servicenow.servicenow__user_enhanced": ["model.servicenow.servicenow__user_aggregated", "model.servicenow.stg_servicenow__core_company", "model.servicenow.stg_servicenow__sys_user"], "model.servicenow.servicenow__change_request_enhanced": ["model.servicenow.stg_servicenow__change_request", "model.servicenow.stg_servicenow__change_task", "model.servicenow.stg_servicenow__sys_user"], "model.servicenow.servicenow__user_aggregated": ["model.servicenow.stg_servicenow__sys_user", "model.servicenow.stg_servicenow__sys_user_grmember", "model.servicenow.stg_servicenow__sys_user_group", "model.servicenow.stg_servicenow__sys_user_has_role", "model.servicenow.stg_servicenow__sys_user_role"], "model.servicenow.servicenow__problem_enhanced": ["model.servicenow.stg_servicenow__problem", "model.servicenow.stg_servicenow__problem_task", "model.servicenow.stg_servicenow__sys_user"], "model.servicenow.servicenow__activity_summary": ["model.servicenow.servicenow__task_enhanced"], "model.servicenow.stg_servicenow__task": ["model.servicenow.stg_servicenow__task_base"], "model.servicenow.stg_servicenow__cmdb_ci": ["model.servicenow.stg_servicenow__cmdb_ci_base"], "model.servicenow.stg_servicenow__sys_user_role": ["model.servicenow.stg_servicenow__sys_user_role_base"], "model.servicenow.stg_servicenow__sys_user_grmember": ["model.servicenow.stg_servicenow__sys_user_grmember_base"], "model.servicenow.stg_servicenow__cmdb_ci_service": ["model.servicenow.stg_servicenow__cmdb_ci_service_base"], "model.servicenow.stg_servicenow__change_task": ["model.servicenow.stg_servicenow__change_task_base"], "model.servicenow.stg_servicenow__sys_user_group": ["model.servicenow.stg_servicenow__sys_user_group_base"], "model.servicenow.stg_servicenow__sys_user_has_role": ["model.servicenow.stg_servicenow__sys_user_has_role_base"], "model.servicenow.stg_servicenow__incident": ["model.servicenow.stg_servicenow__incident_base"], "model.servicenow.stg_servicenow__task_sla": ["model.servicenow.stg_servicenow__task_sla_base"], "model.servicenow.stg_servicenow__core_company": ["model.servicenow.stg_servicenow__core_company_base"], "model.servicenow.stg_servicenow__sys_user": ["model.servicenow.stg_servicenow__sys_user_base"], "model.servicenow.stg_servicenow__change_request": ["model.servicenow.stg_servicenow__change_request_base"], "model.servicenow.stg_servicenow__problem_task": ["model.servicenow.stg_servicenow__problem_task_base"], "model.servicenow.stg_servicenow__problem": ["model.servicenow.stg_servicenow__problem_base"], "model.servicenow.stg_servicenow__task_base": ["source.servicenow.servicenow.task"], "model.servicenow.stg_servicenow__sys_user_role_base": ["source.servicenow.servicenow.sys_user_role"], "model.servicenow.stg_servicenow__incident_base": ["source.servicenow.servicenow.incident"], "model.servicenow.stg_servicenow__cmdb_ci_service_base": ["source.servicenow.servicenow.cmdb_ci_service"], "model.servicenow.stg_servicenow__problem_base": ["source.servicenow.servicenow.problem"], "model.servicenow.stg_servicenow__cmdb_ci_base": ["source.servicenow.servicenow.cmdb_ci"], "model.servicenow.stg_servicenow__sys_user_group_base": ["source.servicenow.servicenow.sys_user_group"], "model.servicenow.stg_servicenow__sys_user_has_role_base": ["source.servicenow.servicenow.sys_user_has_role"], "model.servicenow.stg_servicenow__sys_user_grmember_base": ["source.servicenow.servicenow.sys_user_grmember"], "model.servicenow.stg_servicenow__problem_task_base": ["source.servicenow.servicenow.problem_task"], "model.servicenow.stg_servicenow__change_request_base": ["source.servicenow.servicenow.change_request"], "model.servicenow.stg_servicenow__task_sla_base": ["source.servicenow.servicenow.task_sla"], "model.servicenow.stg_servicenow__core_company_base": ["source.servicenow.servicenow.core_company"], "model.servicenow.stg_servicenow__change_task_base": ["source.servicenow.servicenow.change_task"], "model.servicenow.stg_servicenow__sys_user_base": ["source.servicenow.servicenow.sys_user"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation.8ca2665c4e": ["model.servicenow.servicenow__activity_summary"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation.17d8bd3f7e": ["model.servicenow.servicenow__problem_enhanced"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation.69a5aa212b": ["model.servicenow.servicenow__change_request_enhanced"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation.a19e988556": ["model.servicenow.servicenow__user_aggregated"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation.115977e822": ["model.servicenow.servicenow__user_enhanced"], "test.servicenow.not_null_stg_servicenow__task_task_id.7a50a91303": ["model.servicenow.stg_servicenow__task"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation.4b5ec4b727": ["model.servicenow.stg_servicenow__task"], "test.servicenow.not_null_stg_servicenow__task_sla_task_sla_id.c67b0e6fdf": ["model.servicenow.stg_servicenow__task_sla"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation.e9939b7a70": ["model.servicenow.stg_servicenow__task_sla"], "test.servicenow.not_null_stg_servicenow__sys_user_sys_user_id.99385b5bcb": ["model.servicenow.stg_servicenow__sys_user"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation.040d637571": ["model.servicenow.stg_servicenow__sys_user"], "test.servicenow.not_null_stg_servicenow__problem_problem_id.2b0f45ffad": ["model.servicenow.stg_servicenow__problem"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation.135d98438b": ["model.servicenow.stg_servicenow__problem"], "test.servicenow.not_null_stg_servicenow__problem_task_problem_task_id.2d07d24f54": ["model.servicenow.stg_servicenow__problem_task"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation.e59f50cae6": ["model.servicenow.stg_servicenow__problem_task"], "test.servicenow.not_null_stg_servicenow__incident_incident_id.b01cee4a78": ["model.servicenow.stg_servicenow__incident"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation.4383616e6a": ["model.servicenow.stg_servicenow__incident"], "test.servicenow.not_null_stg_servicenow__change_task_change_task_id.2d5ae34a7b": ["model.servicenow.stg_servicenow__change_task"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation.11bf5182ff": ["model.servicenow.stg_servicenow__change_task"], "test.servicenow.not_null_stg_servicenow__change_request_change_request_id.0f2ee81c5f": ["model.servicenow.stg_servicenow__change_request"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation.f8d65569ae": ["model.servicenow.stg_servicenow__change_request"], "test.servicenow.not_null_stg_servicenow__core_company_core_company_id.e8ef462897": ["model.servicenow.stg_servicenow__core_company"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation.85b30d325b": ["model.servicenow.stg_servicenow__core_company"], "test.servicenow.not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.83f2c6d37c": ["model.servicenow.stg_servicenow__cmdb_ci"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation.4d25f1839d": ["model.servicenow.stg_servicenow__cmdb_ci"], "test.servicenow.not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.f7770250de": ["model.servicenow.stg_servicenow__cmdb_ci_service"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation.e596372710": ["model.servicenow.stg_servicenow__cmdb_ci_service"], "test.servicenow.not_null_stg_servicenow__sys_user_group_sys_user_group_id.a4600fb5c8": ["model.servicenow.stg_servicenow__sys_user_group"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation.6fd66f39ed": ["model.servicenow.stg_servicenow__sys_user_group"], "test.servicenow.not_null_stg_servicenow__sys_user_role_sys_user_role_id.7a1587bcfd": ["model.servicenow.stg_servicenow__sys_user_role"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation.7f807d9e69": ["model.servicenow.stg_servicenow__sys_user_role"], "test.servicenow.not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.c17ac67033": ["model.servicenow.stg_servicenow__sys_user_has_role"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation.9010f1a7f8": ["model.servicenow.stg_servicenow__sys_user_has_role"], "test.servicenow.not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.137c7e7cfc": ["model.servicenow.stg_servicenow__sys_user_grmember"], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation.38800293d6": ["model.servicenow.stg_servicenow__sys_user_grmember"], "model.servicenow.servicenow__incident_enhanced": ["model.servicenow.stg_servicenow__incident", "model.servicenow.stg_servicenow__sys_user"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation.210ca84c74": ["model.servicenow.servicenow__incident_enhanced"], "model.servicenow.servicenow__task_enhanced": ["model.servicenow.stg_servicenow__change_request", "model.servicenow.stg_servicenow__change_task", "model.servicenow.stg_servicenow__cmdb_ci", "model.servicenow.stg_servicenow__cmdb_ci_service", "model.servicenow.stg_servicenow__core_company", "model.servicenow.stg_servicenow__problem", "model.servicenow.stg_servicenow__problem_task", "model.servicenow.stg_servicenow__sys_user", "model.servicenow.stg_servicenow__sys_user_group", "model.servicenow.stg_servicenow__task"], "test.servicenow.unique_servicenow__task_enhanced_task_id.a974c4dbbc": ["model.servicenow.servicenow__task_enhanced"], "test.servicenow.not_null_servicenow__task_enhanced_task_id.76cea62cda": ["model.servicenow.servicenow__task_enhanced"], "source.servicenow.servicenow.task": [], "source.servicenow.servicenow.task_sla": [], "source.servicenow.servicenow.problem": [], "source.servicenow.servicenow.problem_task": [], "source.servicenow.servicenow.incident": [], "source.servicenow.servicenow.change_task": [], "source.servicenow.servicenow.change_request": [], "source.servicenow.servicenow.core_company": [], "source.servicenow.servicenow.cmdb_ci": [], "source.servicenow.servicenow.cmdb_ci_service": [], "source.servicenow.servicenow.sys_user": [], "source.servicenow.servicenow.sys_user_group": [], "source.servicenow.servicenow.sys_user_role": [], "source.servicenow.servicenow.sys_user_has_role": [], "source.servicenow.servicenow.sys_user_grmember": []}, "child_map": {"model.servicenow.servicenow__user_enhanced": ["test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation.115977e822"], "model.servicenow.servicenow__change_request_enhanced": ["test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation.69a5aa212b"], "model.servicenow.servicenow__user_aggregated": ["model.servicenow.servicenow__user_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation.a19e988556"], "model.servicenow.servicenow__problem_enhanced": ["test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation.17d8bd3f7e"], "model.servicenow.servicenow__activity_summary": ["test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation.8ca2665c4e"], "model.servicenow.stg_servicenow__task": ["model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation.4b5ec4b727", "test.servicenow.not_null_stg_servicenow__task_task_id.7a50a91303"], "model.servicenow.stg_servicenow__cmdb_ci": ["model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation.4d25f1839d", "test.servicenow.not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.83f2c6d37c"], "model.servicenow.stg_servicenow__sys_user_role": ["model.servicenow.servicenow__user_aggregated", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation.7f807d9e69", "test.servicenow.not_null_stg_servicenow__sys_user_role_sys_user_role_id.7a1587bcfd"], "model.servicenow.stg_servicenow__sys_user_grmember": ["model.servicenow.servicenow__user_aggregated", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation.38800293d6", "test.servicenow.not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.137c7e7cfc"], "model.servicenow.stg_servicenow__cmdb_ci_service": ["model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation.e596372710", "test.servicenow.not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.f7770250de"], "model.servicenow.stg_servicenow__change_task": ["model.servicenow.servicenow__change_request_enhanced", "model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation.11bf5182ff", "test.servicenow.not_null_stg_servicenow__change_task_change_task_id.2d5ae34a7b"], "model.servicenow.stg_servicenow__sys_user_group": ["model.servicenow.servicenow__task_enhanced", "model.servicenow.servicenow__user_aggregated", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation.6fd66f39ed", "test.servicenow.not_null_stg_servicenow__sys_user_group_sys_user_group_id.a4600fb5c8"], "model.servicenow.stg_servicenow__sys_user_has_role": ["model.servicenow.servicenow__user_aggregated", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation.9010f1a7f8", "test.servicenow.not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.c17ac67033"], "model.servicenow.stg_servicenow__incident": ["model.servicenow.servicenow__incident_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation.4383616e6a", "test.servicenow.not_null_stg_servicenow__incident_incident_id.b01cee4a78"], "model.servicenow.stg_servicenow__task_sla": ["test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation.e9939b7a70", "test.servicenow.not_null_stg_servicenow__task_sla_task_sla_id.c67b0e6fdf"], "model.servicenow.stg_servicenow__core_company": ["model.servicenow.servicenow__task_enhanced", "model.servicenow.servicenow__user_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation.85b30d325b", "test.servicenow.not_null_stg_servicenow__core_company_core_company_id.e8ef462897"], "model.servicenow.stg_servicenow__sys_user": ["model.servicenow.servicenow__change_request_enhanced", "model.servicenow.servicenow__incident_enhanced", "model.servicenow.servicenow__problem_enhanced", "model.servicenow.servicenow__task_enhanced", "model.servicenow.servicenow__user_aggregated", "model.servicenow.servicenow__user_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation.040d637571", "test.servicenow.not_null_stg_servicenow__sys_user_sys_user_id.99385b5bcb"], "model.servicenow.stg_servicenow__change_request": ["model.servicenow.servicenow__change_request_enhanced", "model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation.f8d65569ae", "test.servicenow.not_null_stg_servicenow__change_request_change_request_id.0f2ee81c5f"], "model.servicenow.stg_servicenow__problem_task": ["model.servicenow.servicenow__problem_enhanced", "model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation.e59f50cae6", "test.servicenow.not_null_stg_servicenow__problem_task_problem_task_id.2d07d24f54"], "model.servicenow.stg_servicenow__problem": ["model.servicenow.servicenow__problem_enhanced", "model.servicenow.servicenow__task_enhanced", "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation.135d98438b", "test.servicenow.not_null_stg_servicenow__problem_problem_id.2b0f45ffad"], "model.servicenow.stg_servicenow__task_base": ["model.servicenow.stg_servicenow__task"], "model.servicenow.stg_servicenow__sys_user_role_base": ["model.servicenow.stg_servicenow__sys_user_role"], "model.servicenow.stg_servicenow__incident_base": ["model.servicenow.stg_servicenow__incident"], "model.servicenow.stg_servicenow__cmdb_ci_service_base": ["model.servicenow.stg_servicenow__cmdb_ci_service"], "model.servicenow.stg_servicenow__problem_base": ["model.servicenow.stg_servicenow__problem"], "model.servicenow.stg_servicenow__cmdb_ci_base": ["model.servicenow.stg_servicenow__cmdb_ci"], "model.servicenow.stg_servicenow__sys_user_group_base": ["model.servicenow.stg_servicenow__sys_user_group"], "model.servicenow.stg_servicenow__sys_user_has_role_base": ["model.servicenow.stg_servicenow__sys_user_has_role"], "model.servicenow.stg_servicenow__sys_user_grmember_base": ["model.servicenow.stg_servicenow__sys_user_grmember"], "model.servicenow.stg_servicenow__problem_task_base": ["model.servicenow.stg_servicenow__problem_task"], "model.servicenow.stg_servicenow__change_request_base": ["model.servicenow.stg_servicenow__change_request"], "model.servicenow.stg_servicenow__task_sla_base": ["model.servicenow.stg_servicenow__task_sla"], "model.servicenow.stg_servicenow__core_company_base": ["model.servicenow.stg_servicenow__core_company"], "model.servicenow.stg_servicenow__change_task_base": ["model.servicenow.stg_servicenow__change_task"], "model.servicenow.stg_servicenow__sys_user_base": ["model.servicenow.stg_servicenow__sys_user"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__activity_summary_task_updated_date__task_state__priority__impact__urgency__source_relation.8ca2665c4e": [], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__problem_enhanced_problem_id__source_relation.17d8bd3f7e": [], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__change_request_enhanced_change_request_id__source_relation.69a5aa212b": [], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_aggregated_sys_user_id__source_relation.a19e988556": [], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__user_enhanced_sys_user_id__source_relation.115977e822": [], "test.servicenow.not_null_stg_servicenow__task_task_id.7a50a91303": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_task_id__source_relation.4b5ec4b727": [], "test.servicenow.not_null_stg_servicenow__task_sla_task_sla_id.c67b0e6fdf": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__task_sla_task_sla_id__source_relation.e9939b7a70": [], "test.servicenow.not_null_stg_servicenow__sys_user_sys_user_id.99385b5bcb": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_sys_user_id__source_relation.040d637571": [], "test.servicenow.not_null_stg_servicenow__problem_problem_id.2b0f45ffad": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_problem_id__source_relation.135d98438b": [], "test.servicenow.not_null_stg_servicenow__problem_task_problem_task_id.2d07d24f54": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__problem_task_problem_task_id__source_relation.e59f50cae6": [], "test.servicenow.not_null_stg_servicenow__incident_incident_id.b01cee4a78": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__incident_incident_id__source_relation.4383616e6a": [], "test.servicenow.not_null_stg_servicenow__change_task_change_task_id.2d5ae34a7b": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_task_change_task_id__source_relation.11bf5182ff": [], "test.servicenow.not_null_stg_servicenow__change_request_change_request_id.0f2ee81c5f": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__change_request_change_request_id__source_relation.f8d65569ae": [], "test.servicenow.not_null_stg_servicenow__core_company_core_company_id.e8ef462897": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__core_company_core_company_id__source_relation.85b30d325b": [], "test.servicenow.not_null_stg_servicenow__cmdb_ci_cmdb_ci_id.83f2c6d37c": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_cmdb_ci_id__source_relation.4d25f1839d": [], "test.servicenow.not_null_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id.f7770250de": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__cmdb_ci_service_cmdb_ci_service_id__source_relation.e596372710": [], "test.servicenow.not_null_stg_servicenow__sys_user_group_sys_user_group_id.a4600fb5c8": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_group_sys_user_group_id__source_relation.6fd66f39ed": [], "test.servicenow.not_null_stg_servicenow__sys_user_role_sys_user_role_id.7a1587bcfd": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_role_sys_user_role_id__source_relation.7f807d9e69": [], "test.servicenow.not_null_stg_servicenow__sys_user_has_role_sys_user_has_role_id.c17ac67033": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_has_role_sys_user_has_role_id__source_relation.9010f1a7f8": [], "test.servicenow.not_null_stg_servicenow__sys_user_grmember_sys_user_grmember_id.137c7e7cfc": [], "test.servicenow.dbt_utils_unique_combination_of_columns_stg_servicenow__sys_user_grmember_sys_user_grmember_id__source_relation.38800293d6": [], "model.servicenow.servicenow__incident_enhanced": ["test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation.210ca84c74"], "test.servicenow.dbt_utils_unique_combination_of_columns_servicenow__incident_enhanced_incident_id__source_relation.210ca84c74": [], "model.servicenow.servicenow__task_enhanced": ["model.servicenow.servicenow__activity_summary", "test.servicenow.not_null_servicenow__task_enhanced_task_id.76cea62cda", "test.servicenow.unique_servicenow__task_enhanced_task_id.a974c4dbbc"], "test.servicenow.unique_servicenow__task_enhanced_task_id.a974c4dbbc": [], "test.servicenow.not_null_servicenow__task_enhanced_task_id.76cea62cda": [], "source.servicenow.servicenow.task": ["model.servicenow.stg_servicenow__task_base"], "source.servicenow.servicenow.task_sla": ["model.servicenow.stg_servicenow__task_sla_base"], "source.servicenow.servicenow.problem": ["model.servicenow.stg_servicenow__problem_base"], "source.servicenow.servicenow.problem_task": ["model.servicenow.stg_servicenow__problem_task_base"], "source.servicenow.servicenow.incident": ["model.servicenow.stg_servicenow__incident_base"], "source.servicenow.servicenow.change_task": ["model.servicenow.stg_servicenow__change_task_base"], "source.servicenow.servicenow.change_request": ["model.servicenow.stg_servicenow__change_request_base"], "source.servicenow.servicenow.core_company": ["model.servicenow.stg_servicenow__core_company_base"], "source.servicenow.servicenow.cmdb_ci": ["model.servicenow.stg_servicenow__cmdb_ci_base"], "source.servicenow.servicenow.cmdb_ci_service": ["model.servicenow.stg_servicenow__cmdb_ci_service_base"], "source.servicenow.servicenow.sys_user": ["model.servicenow.stg_servicenow__sys_user_base"], "source.servicenow.servicenow.sys_user_group": ["model.servicenow.stg_servicenow__sys_user_group_base"], "source.servicenow.servicenow.sys_user_role": ["model.servicenow.stg_servicenow__sys_user_role_base"], "source.servicenow.servicenow.sys_user_has_role": ["model.servicenow.stg_servicenow__sys_user_has_role_base"], "source.servicenow.servicenow.sys_user_grmember": ["model.servicenow.stg_servicenow__sys_user_grmember_base"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}